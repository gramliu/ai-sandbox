{
  "key": "5XIIII3Q",
  "url": "http://arxiv.org/pdf/2401.18059",
  "metadata": {
    "title": "RAPTOR: Recursive Abstractive Processing for Tree-Organized Retrieval",
    "abstract": "  Retrieval-augmented language models can better adapt to changes in world\nstate and incorporate long-tail knowledge. However, most existing methods\nretrieve only short contiguous chunks from a retrieval corpus, limiting\nholistic understanding of the overall document context. We introduce the novel\napproach of recursively embedding, clustering, and summarizing chunks of text,\nconstructing a tree with differing levels of summarization from the bottom up.\nAt inference time, our RAPTOR model retrieves from this tree, integrating\ninformation across lengthy documents at different levels of abstraction.\nControlled experiments show that retrieval with recursive summaries offers\nsignificant improvements over traditional retrieval-augmented LMs on several\ntasks. On question-answering tasks that involve complex, multi-step reasoning,\nwe show state-of-the-art results; for example, by coupling RAPTOR retrieval\nwith the use of GPT-4, we can improve the best performance on the QuALITY\nbenchmark by 20% in absolute accuracy.\n",
    "published": "2024-01-31T18:30:21Z"
  },
  "text": [
    "Published as a conference paper at ICLR 2024\nRAPTOR:   RECURSIVEABSTRACTIVEPROCESSING\nFORTREE-ORGANIZEDRETRIEVAL\nParth Sarthi, Salman Abdullah, Aditi Tuli, Shubh Khanna, Anna Goldie, Christopher D. Manning\nStanford University\npsarthi@cs.stanford.edu\nABSTRACT\nRetrieval-augmented language models can better adapt to changes in world state\nand incorporate long-tail knowledge.   However,  most existing methods retrieve\nonly  short  contiguous  chunks  from  a  retrieval  corpus,  limiting  holistic  under-\nstanding of the overall document context.   We introduce the novel approach of\nrecursively embedding, clustering, and summarizing chunks of text, constructing\na tree with differing levels of summarization from the bottom up.  At inference\ntime, our RAPTOR model retrieves from this tree, integrating information across\nlengthy documents at different levels of abstraction. Controlled experiments show\nthat retrieval with recursive summaries offers significant improvements over tra-\nditional retrieval-augmented LMs on several tasks.  On question-answering tasks\nthat involve complex, multi-step reasoning, we show state-of-the-art results; for\nexample, by coupling RAPTOR retrieval with the use of GPT-4, we can improve\nthe best performance on the QuALITY benchmark by 20% in absolute accuracy.\n1INTRODUCTION\nLarge Language Models (LLMs) have emerged as transformative tools showing impressive perfor-\nmance on many tasks.  With the growing size of LLMs, they can serve standalone as very effective\nknowledge stores, with facts encoded within their parameters (Petroni et al., 2019; Jiang et al., 2020;\nTalmor et al., 2020; Rae et al., 2021; Hoffmann et al., 2022; Chowdhery et al., 2022; Bubeck et al.,\n2023; Kandpal et al., 2023) and models can be further improved with fine-tuning on downstream\ntasks (Roberts et al., 2020).  Nevertheless, even a large model does not contain sufficient domain-\nspecific knowledge for particular tasks and the world continues to change, invalidating facts in the\nLLM. Updating the knowledge of these models through additional fine-tuning or editing is difficult,\nparticularly when dealing with vast text corpora (Lewis et al., 2020; Mitchell et al., 2022). An alter-\nnative approach, pioneered in open domain question answering systems (Chen et al., 2017; Yu et al.,\n2018), is to index large quantities of text, after splitting it into chunks (paragraphs), in a separate\ninformation retrieval system.  Retrieved information is then presented to the LLM along with the\nquestion as context (“retrieval augmentation”, Lewis et al., 2020; Izacard et al., 2022; Min et al.,\n2023; Ram et al., 2023), making it easy to provide a system with current knowledge particular to\nsome domain and enabling easy interpretability and provenance tracking, whereas the parametric\nknowledge of LLMs is opaque and difficult to trace back to its source (Akyurek et al., 2022).\nNevertheless, existing retrieval-augmented approaches also have flaws.  The one we tackle is that\nmost existing methods retrieve only a few short, contiguous text chunks, which limits their ability\nto represent and leverage large-scale discourse structure.  This is particularly relevant for thematic\nquestions that require integrating knowledge from multiple parts of a text, such as understanding\nan  entire  book,  as  in  the  NarrativeQA  dataset  (Ko\nˇ\ncisk\n`\ny  et  al.,  2018).   Consider  the  fairy  tale  of\nCinderella, and the question “How did Cinderella reach her happy ending?”.  The top-kretrieved\nshort contiguous texts will not contain enough context to answer the question.\nTo address this, we design an indexing and retrieval system that uses a tree structure to capture both\nhigh-level and low-level details about a text. As shown in Figure 1, our system, RAPTOR, clusters\nchunks of text, generates text summaries of those clusters, and then repeats, generating a tree from\nthe bottom up. This structure enables RAPTOR to load into an LLM’s context chunks representing\nthe text at different levels so that it can effectively and efficiently answer questions at different levels.\n1\narXiv:2401.18059v1  [cs.CL]  31 Jan 2024",
    "Published as a conference paper at ICLR 2024\n23451\n1233455\n6\n8\n7\nIndex #8\nText:  summary of \nnodes 2 and 3\nChild Nodes: 2, 3\nText Embedding\nText chunks\n3\n.1\n4\n.1\n5\n2. Summarization \nby LLM\n1.Clustering\n10\n7\n1\n2\n8\n4\n3\n5\n6\n9\nFormation of one tree layer\nRoot layer\nLeaf layer\nContents of a node\nRAPTOR Tree \nFigure 1:Tree construction process:RAPTOR recursively clusters chunks of text based on their\nvector  embeddings  and  generates  text  summaries  of  those  clusters,  constructing  a  tree  from  the\nbottom up.  Nodes clustered together are siblings; a parent node contains the text summary of that\ncluster.\nOur main contribution is the idea of using text summarization to allow retrieval augmentation of\ncontext at different scales, and to show its effectiveness in experiments on collections of long doc-\numents.  Controlled experiments with three language models (UnifiedQA (Khashabi et al., 2020),\nGPT-3 (Brown et al., 2020) and GPT-4 (OpenAI, 2023)) show that RAPTOR outperforms current\nretrieval augmentation.  Moreover, RAPTOR coupled with GPT-4, and sometimes even with Uni-\nfiedQA, gives new state-of-the-art results on three QA tasks: free text response questions on books\nand movies (NarrativeQA, Ko\nˇ\ncisk\n`\ny et al. 2018), full-text NLP papers (QASPER, Dasigi et al. 2021),\nand multiple-choice questions based on medium-length passages (QuALITY, Pang et al. 2022).\n1\n2RELATEDWORK\nWhy Retrieval?Recent advances in hardware and algorithms have indeed expanded the con-\ntext lengths that models can handle, leading to questions about the need for retrieval systems (Dai\net al., 2019; Dao et al., 2022; Liu et al., 2023).  However, as Liu et al. (2023) and Sun et al. (2021)\nhave noted, models tend to underutilize long-range context and see diminishing performance as con-\ntext length increases, especially when pertinent information is embedded within a lengthy context.\nMoreover, practically, use of long contexts is expensive and slow.  This suggests that selecting the\nmost relevant information for knowledge-intensive tasks is still crucial.\nRetrieval MethodsRetrieval-augmented language models (RALMs) have seen improvements in\nvarious components:  the retriever, the reader, and end-to-end system training.  Retrieval methods\nhave  transitioned  from  traditional  term-based  techniques  likeTF-IDF(Sp\n ̈\narck  Jones,  1972)  and\nBM25(Robertson et al., 1995; Roberts et al., 2020) to deep learning–based strategies (Karpukhin\net  al.,  2020;  Khattab  &  Zaharia,  2020;  Sachan  et  al.,  2023).   Some  recent  work  proposes  using\nlarge language models as retrievers due to their ability to memorize extensive knowledge (Yu et al.,\n2022;  Sun  et  al.,  2022).   Research  on  the  reader  component  includesFusion-in-Decoder  (FiD)\n(Izacard & Grave, 2022), which employs both DPR and BM25 for retrieval and processes passages\nindependently in the encoder andRETRO(Borgeaud et al., 2022; Wang et al., 2023), which utilizes\ncross-chunked attention and chunkwise retrieval to generate text grounded on retrieved context.\nEnd-to-end system training work includesAtlas(Izacard et al., 2022), which fine-tunes an encoder-\ndecoder model in conjunction with the retriever;REALM(Guu et al., 2020), a bidirectional, masked\nLM fine-tuned for open-domain question answering;  andRAG (Retrieval-Augmented Genera-\ntion)(Lewis et al., 2020), which integrates pre-trained sequence-to-sequence models with a neural\nretriever.  Min et al. (2021) introducedJoint Passage Retrieval (JPR)model which uses a tree-\ndecoding algorithm to handle passage diversity and relevance in multi-answer retrieval.Dense Hi-\nerarchical Retrieval (DHR)andHybrid Hierarchical Retrieval (HHR)represent advancements\nin retrieval accuracy by combining document and passage level retrievals and integrating sparse and\ndense retrieval methods, respectively (Liu et al., 2021; Arivazhagan et al., 2023).\n1\nWe will release the code of RAPTOR publicly here.\n2",
    "Published as a conference paper at ICLR 2024\nDespite a diversity in methods, the retrieving components of models predominantly rely on stan-\ndard approaches, i.e., chunking corpora and encoding with BERT-based retrievers.  Although this\napproach is widely adopted, Nair et al. (2023) highlights a potential shortcoming:  contiguous seg-\nmentation might not capture the complete semantic depth of the text.  Reading extracted snippets\nfrom technical or scientific documents may lack important context making them difficult to read or\neven misleading. (Cohan & Goharian, 2017; Newman et al., 2023; Zhang et al., 2023).\nRecursive summarization as ContextSummarization techniques provide a condensed view of\ndocuments, enabling more focused engagement with the content (Angelidis & Lapata, 2018).  The\nsummarization/snippet model by Gao et al. (2023) uses summarizations and snippets of passages,\nwhich improves correctness on most datasets but can sometimes be a lossy means of compression.\nThe recursive-abstractive summarization model by Wu et al. (2021) employs task decomposition\nto summarize smaller text chunks, which are later integrated to form summaries of larger sections.\nWhile this method is effective for capturing broader themes, it can miss granular details. LlamaIndex\n(Liu, 2022) mitigates this issue by similarly summarizing adjacent text chunks but also retaining\nintermediate nodes thus storing varying levels of detail, keeping granular details.  However, both\nmethods, due to their reliance on adjacency for grouping or summarizing adjacent nodes, may still\noverlook distant interdependencies within the text, which we can find and group with RAPTOR.\n3METHODS\nOverview of RAPTORBuilding on the idea that long texts often present subtopics and hierarchi-\ncal structures (Cao & Wang, 2022; Dong et al., 2023b), RAPTOR addresses the issue of semantic\ndepth and connection in reading by building a recursive tree structure that balances broader thematic\ncomprehension with granular details and which allows nodes to be grouped based on semantic sim-\nilarity not just order in the text.\nConstruction of the RAPTOR tree begins with segmenting the retrieval corpus into short, contiguous\ntexts of length 100, similar to traditional retrieval augmentation techniques. If a sentence exceeds the\n100-token limit, we move the entire sentence to the next chunk, rather than cutting it mid-sentence.\nThis preserves the contextual and semantic coherence of the text within each chunk.  These texts\nare then embedded using SBERT, a BERT-based encoder (multi-qa-mpnet-base-cos-v1)\n(Reimers & Gurevych, 2019).  The chunks and their corresponding SBERT embeddings form the\nleaf nodes of our tree structure.\nTo group similar text chunks, we employ a clustering algorithm. Once clustered, a Language Model\nis used to summarize the grouped texts. These summarized texts are then re-embedded, and the cycle\nof embedding, clustering, and summarization continues until further clustering becomes infeasible,\nresulting in a structured, multi-layered tree representation of the original documents. An important\naspect of RAPTOR is its computational efficiency. The system scales linearly in terms of both build\ntime and token expenditure,  making it suitable for processing large and complex corpora.   For a\ncomprehensive discussion on RAPTOR’s scalability, please refer to the Appendix A.\nFor querying within this tree, we introduce two distinct strategies: tree traversal and collapsed tree.\nThe tree traversal method traverses the tree layer-by-layer, pruning and selecting the most relevant\nnodes at each level. The collapsed tree method evaluates nodes collectively across all layers to find\nthe most relevant ones.\nClustering AlgorithmClustering plays a key role in building the RAPTOR tree, organizing text\nsegments into cohesive groups.  This step groups related content together, which helps the subse-\nquent retrieval process.\nOne of the unique aspects of our clustering approach is the use of soft clustering, where nodes can\nbelong to multiple clusters without requiring a fixed number of clusters.  This flexibility is essen-\ntial because individual text segments often contain information relevant to various topics, thereby\nwarranting their inclusion in multiple summaries.\nOur clustering algorithm is based on Gaussian Mixture Models (GMMs), an approach that offers\nboth flexibility and a probabilistic framework. GMMs assume that data points are generated from a\nmixture of several Gaussian distributions.\n3",
    "Published as a conference paper at ICLR 2024\nGiven a set ofNtext segments, each represented as ad-dimensional dense vector embedding, the\nlikelihood of a text vector,x, given its membership in thek\nth\nGaussian distribution, is denoted by\nP(x|k) =N(x;μ\nk\n,Σ\nk\n).  The overall probability distribution is a weighted combinationP(x) =\nP\nK\nk=1\nπ\nk\nN(x;μ\nk\n,Σ\nk\n), whereπ\nk\nsignifies the mixture weight for thek\nth\nGaussian distribution.\nThe high dimensionality of vector embeddings presents a challenge for traditional GMMs, as dis-\ntance metrics may behave poorly when used to measure similarity in high-dimensional spaces (Ag-\ngarwal et al., 2001). To mitigate this, we employ Uniform Manifold Approximation and Projection\n(UMAP), a manifold learning technique for dimensionality reduction (McInnes et al., 2018).  The\nnumber of nearest neighbors parameter,n\nneighbors, in UMAP determines the balance between\nthe preservation of local and global structures. Our algorithm variesn\nneighborsto create a hierar-\nchical clustering structure: it first identifies global clusters and then performs local clustering within\nthese global clusters.  This two-step clustering process captures a broad spectrum of relationships\namong the text data, from broad themes to specific details.\nShould a local cluster’s combined context ever exceed the summarization model’s token threshold,\nour algorithm recursively applies clustering within the cluster,  ensuring that the context remains\nwithin the token threshold.\nTo determine the optimal number of clusters, we employ the Bayesian Information Criterion (BIC)\nfor model selection.   BIC not only penalizes model complexity but also rewards goodness of fit\n(Schwarz, 1978). The BIC for a given GMM isBIC= ln(N)k−2 ln(\nˆ\nL), whereNis the number\nof text segments (or data points),kis the number of model parameters, and\nˆ\nLis the maximized\nvalue of the likelihood function of the model.  In the context of GMM, the number of parametersk\nis a function of the dimensionality of the input vectors and the number of clusters.\nWith the optimal number of clusters determined by BIC, the Expectation-Maximization algorithm\nis then used to estimate the GMM parameters, namely the means, covariances, and mixture weights.\nWhile the Gaussian assumption in GMMs may not perfectly align with the nature of text data, which\noften exhibits a sparse and skewed distribution, our empirical observations suggest that it offers an\neffective model for our purpose. We run an ablation comparing GMM Clustering with summarizing\ncontiguous chunks and provide details in Appendix B.\nModel-Based SummarizationAfter clustering the nodes using Gaussian Mixture Models,  the\nnodes in each cluster are sent to a language model for summarization.  This step allows the model\nto transform large chunks of text into concise, coherent summaries of the selected nodes.  For our\nexperiments, we usegpt-3.5-turboto generate the summaries.  The summarization step con-\ndenses the potentially large volume of retrieved information into a manageable size.  We provide\nstatistics  on  the  compression  due  to  the  summarization  in  Appendix  C  and  the  prompt  used  for\nsummarization in Appendix D.\nWhile the summarization model generally produces reliable summaries, a focused annotation study\nrevealed that about 4% of the summaries contained minor hallucinations.  These did not propagate\nto parent nodes and had no discernible impact on question-answering tasks. For an in-depth analysis\nof hallucinations, refer to the appendix E.\nQueryingIn this section, we elaborate on the two querying mechanisms employed by RAPTOR:\ntree traversal and collapsed tree.  These methods offer unique ways of traversing the multi-layered\nRAPTOR tree to retrieve relevant information,  each with its own advantages and trade-offs.  We\nprovide the pseudocode of both methods in Appendix F. Note that we embed all nodes using SBERT.\nThetree traversalmethod first selects the top-k most relevant root nodes based on their cosine\nsimilarity to the query embedding.  The children of these selected nodes are considered at the next\nlayer and the top-k nodes are selected from this pool again based on their cosine similarity to the\nquery vector. This process is repeated until we reach the leaf nodes. Finally, the text from all selected\nnodes is concatenated to form the retrieved context. The algorithm’s steps are outlined below:\n1.  Start at the root layer of the RAPTOR tree.  Compute the cosine similarity between the\nquery embedding and the embeddings of all nodes present at this initial layer.\n2.  Choose the top-knodes based on the highest cosine similarity scores, forming the setS\n1\n.\n4",
    "Published as a conference paper at ICLR 2024\nFigure 2:Illustration of the tree traversal and collapsed tree retrieval mechanisms.Tree traver-\nsal starts at the root level of the tree and retrieves the top-k(here, top-1) node(s) based on cosine\nsimilarity to the query vector.  At each level, it retrieves the top-knode(s) from the child nodes of\nthe previous layer’s top-k.  Collapsed tree collapses the tree into a single layer and retrieves nodes\nuntil a threshold number of tokens is reached, based on cosine similarity to the query vector.  The\nnodes on which cosine similarity search is performed are highlighted in both illustrations.\n3.  Proceed to the child nodes of the elements in setS\n1\n. Compute the cosine similarity between\nthe query vector and the vector embeddings of these child nodes.\n4.  Select the topkchild nodes with the highest cosine similarity scores to the query, forming\nthe setS\n2\n.\n5.  Continue this process recursively fordlayers, producing setsS\n1\n,S\n2\n,...,S\nd\n.\n6.  Concatenate setsS\n1\nthroughS\nd\nto assemble the relevant context to the query.\nBy adjusting the depthdand the number of nodeskselected at each layer, the tree traversal method\noffers control over the specificity and breadth of the information retrieved. The algorithm starts with\na broad outlook by considering the top layers of the tree and progressively focuses on finer details\nas it descends through the lower layers.\nThecollapsed treeapproach offers a simpler way to search for relevant information by considering\nall nodes in the tree simultaneously, as depicted in Figure 2.  Instead of going layer-by-layer, this\nmethod flattens the multi-layered tree into a single layer, essentially bringing all the nodes onto the\nsame level for comparison. The steps for this method are outlined below:\n1.  First, collapse the entire RAPTOR tree into a single layer. This new set of nodes, denoted\nasC, contains nodes from every layer of the original tree.\n2.  Next, calculate the cosine similarity between the query embedding and the embeddings of\nall nodes present in the collapsed setC.\n3.  Finally, pick the top-knodes that have the highest cosine similarity scores with the query.\nKeep  adding  nodes  to  the  result  set  until  you  reach  a  predefined  maximum  number  of\ntokens, ensuring you don’t exceed the model’s input limitations.\nWe tested both approaches on 20 stories from the QASPER dataset. Figure 3 shows the performance\nof tree traversal with different top- sizes and collapsed tree with different maximum token numbers.\nThe  collapsed  tree  approach  consistently  performs  better.   We  believe  collapsed  tree  retrieval  is\nbetter due to offering greater flexibility than tree traversal; i.e., by searching through all the nodes\nsimultaneously, it retrieves information that is at the correct level of granularity for a given question.\nIn comparison, while using tree traversal with the same values ofdandk, the ratio of nodes from\neach level of the tree will be constant. So, the ratio of higher-order thematic information to granular\ndetails will remain the same regardless of the question.\n5",
    "Published as a conference paper at ICLR 2024\nOne drawback, however, of the collapsed tree approach is that it requires cosine similarity search to\nbe performed on all nodes in the tree. However, this can be made more efficient with fastk-nearest\nneighbor libraries such as FAISS (Johnson et al., 2019).\nFigure  3:Comparison  of  querying  methods.\nResults on 20 stories from the QASPER dataset\nusing  tree  traversal  with  different  top-k  values,\nand collapsed tree with different context lengths.\nCollapsed tree with 2000 tokens produces the best\nresults,  so we use this querying strategy for our\nmain results.\nOverall,  given  the  collapsed  tree  approach’s\ngreater flexibility and its superior performance\non  the  subset  of  the  QASPER  dataset,  this  is\nthe querying approach with which we proceed.\nSpecifically,  we  use  the  collapsed  tree  with\n2000  maximum  tokens,  which  approximately\nequates to retrieving the top-20 nodes. Using a\ntoken-based approach ensures the context does\nnot exceed model context constraints as token\ncounts can vary across nodes.  For experiments\nwith the UnifiedQA model, we provide 400 to-\nkens of context, as UnifiedQA has a max con-\ntext length of 512 tokens. We provide the same\namount of tokens of context to RAPTOR and to\nthe baselines.\nQualitative  StudyWe  conduct  a  qualitative\nanalysis  to  understand  the  benefits  of  RAP-\nTOR’s  retrieval  process  compared  to  Dense\nPassage Retrieval (DPR) methods.   Our study\nfocuses on thematic, multi-hop questions using\na 1500-word Cinderella fairytale. As illustrated\nin Figure 4,  RAPTOR’s tree-based retrieval allows it to choose nodes from different tree layers,\nmatching the question’s detail level.  This approach often yields more relevant and comprehensive\ninformation for downstream tasks than DPR. For a detailed discussion and examples, including the\ntext retrieved by both RAPTOR and DPR for specific questions, please refer to the appendix G.\n4EXPERIMENTS\nDatasetsWe measure RAPTOR’s performance across three question-answering datasets:  Narra-\ntiveQA, QASPER, and QuALITY.\nNarrativeQA  is  a  dataset  that  comprises  question-answer  pairs  based  on  the  full  texts  of  books\nand  movie  transcripts,  totaling  1,572  documents  (Ko\nˇ\ncisk\n`\ny  et  al.,  2018;  Wu  et  al.,  2021).   The\nNarrativeQA-Story  task  requires  a  comprehensive  understanding  of  the  entire  narrative  in  order\nto accurately answer its questions, thus testing the model’s ability to comprehend longer texts in\nthe literary domain.  We measure performance on this dataset using the standard BLEU (B-1, B-4),\nROUGE (R-L), and METEOR (M) metrics.  Please see appendix H for more details on the Narra-\ntiveQA evaluation script used in our experiments.\nThe QASPER dataset includes 5,049 questions across 1,585 NLP papers, with each question probing\nfor information embedded within the full text (Dasigi et al., 2021).  The answer types in QASPER\nare  categorized  as  Answerable/Unanswerable,  Yes/No,  Abstractive,  and  Extractive.   Accuracy  is\nmeasured using standard F1.\nLastly, the QuALITY dataset consists of multiple-choice questions, each accompanied by context\npassages averaging approximately 5,000 tokens in length (Pang et al., 2022).  This dataset calls for\nreasoning over the entire document for QA tasks, enabling us to measure the performance of our re-\ntrieval system on medium-length documents. The dataset includes a challenging subset, QuALITY-\nHARD, which contains questions that a majority of human annotators answered incorrectly in a\nspeed-setting. We report accuracies for both the entire test set and the HARD subset.\nControlled Baseline ComparisonsWe first present controlled comparisons using the UnifiedQA\n3B as the reader, with SBERT (Reimers & Gurevych, 2019), BM25 (Robertson et al., 1995; 2009),\nand DPR (Karpukhin et al., 2020) as the embedding models with and without the RAPTOR tree\nstructure, on three datasets:  QASPER, NarrativeQA, and QuALITY. As shown in Tables 1 and 2,\n6",
    "Published as a conference paper at ICLR 2024\nFigure 4:Querying Process:Illustration of how RAPTOR retrieves information for two questions\nabout the Cinderella story: “What is the central theme of the story?” and “How did Cinderella find\na happy ending?”.  Highlighted nodes indicate RAPTOR’s selections, while arrows point to DPR’s\nleaf nodes. Notably, RAPTOR’s context often encompasses the information retrieved by DPR, either\ndirectly or within higher-layer summaries.\nour results demonstrate that RAPTOR, when combined with any retriever, consistently outperforms\nthe respective retriever across all datasets.\n2\nSince RAPTOR with SBERT has the best performance, we use it in all subsequent experiments.\nWe now compare RAPTOR with BM25 and DPR, using three different LLMs: GPT-3, GPT-4, and\nUnifiedQA. As shown in Table 3,  RAPTOR consistently outperforms BM25 and DPR across all\nthree Language Models on the QASPER dataset.  RAPTOR’s F-1 Match scores are 53.1%, 55.7%,\nand 36.6% when using GPT-3, GPT-4, and UnifiedQA, respectively.  These scores surpass DPR by\nmargins of 1.8, 2.7, and 4.5 points, and outdo BM25 by 6.5, 5.5, and 10.2 points across the respective\nLLMs.  QASPER requires synthesizing information within NLP papers, so it is unsurprising that\nRAPTOR’s higher-level summary nodes would allow it to outperform methods that can only extract\nthe top-kmost similar raw chunks of text, which may not contain the correct response in isolation.\nTable  1:NarrativeQA  Performance  With  +  Without  RAPTOR:Performance  comparison  of\nvarious retrieval methods (SBERT, BM25, DPR) with and without RAPTOR on the NarrativeQA\ndataset, using UnifiedQA-3B as the language model.  RAPTOR outperforms baselines of each re-\nspective retrieval method.\nModelROUGEBLEU-1BLEU-4METEOR\nSBERT with RAPTOR30.87%23.50%6.42%19.20%\nSBERT without RAPTOR29.26%22.56%5.95%18.15%\nBM25 with RAPTOR27.93%21.17%5.70%17.03%\nBM25 without RAPTOR23.52%17.73%4.65%13.98%\nDPR with RAPTOR30.94%23.51%6.45%19.05%\nDPR without RAPTOR29.56%22.84%6.12%18.44%\nLikewise, in the QuALITY dataset as shown in Table 4, RAPTOR achieves an accuracy of 62.4%,\nwhich is a 2% and 5.1% improvement over DPR and BM25. Similar trends are observed when Uni-\nfiedQA is employed, with RAPTOR outperforming DPR and BM25 by 2.7% and 6.7%, respectively.\nFinally, in the NarrativeQA dataset, as presented in Table 6, RAPTOR excels across multiple met-\nrics.   For  ROUGE-L,  it  surpasses  BM25  and  DPR  by  7.3  and  2.7  points,  respectively.   In  other\nmetrics like BLEU-1, BLEU-4, and METEOR, RAPTOR outperforms BM25 and DPR by margins\nranging from 1.7 to 5.8 and 0.7 to 2.1 points, respectively.\n2\nFor the DPR experiments in Tables 1 and 2, we used thedpr-multiset-basemodel as opposed to\ndpr-single-nq-basewhich was used in rest of the experiments done earlier. This decision was based on\nthe performance observed in Karpukhin et al. (2020), wheredpr-multiset-baseshowed superior results.\n7",
    "Published as a conference paper at ICLR 2024\nTable 2:QuALITY and QASPER Performance With + Without RAPTOR:Performance com-\nparison across the QuALITY and QASPER datasets of various retrieval methods (SBERT, BM25,\nDPR) with and without RAPTOR. UnifiedQA-3B is used as the language model. RAPTOR outper-\nforms baselines of each respective retrieval method for both datasets.\nModelAccuracy (QuALITY)Answer F1 (QASPER)\nSBERT with RAPTOR56.6%36.70%\nSBERT without RAPTOR54.9%36.23%\nBM25 with RAPTOR52.1%27.00%\nBM25 without RAPTOR49.9%26.47%\nDPR with RAPTOR54.7%32.23%\nDPR without RAPTOR53.1%31.70%\nTable 3:  Controlled comparison of F-1 scores on the QASPER dataset, using three different lan-\nguage models (GPT-3, GPT-4, UnifiedQA 3B) and various retrieval methods.  The column ”Title +\nAbstract” reflects performance when only the title and abstract of the papers are used for context.\nRAPTOR outperforms the established baselines BM25 and DPR across all tested language models.\nSpecifically, RAPTOR’s F-1 scores are at least 1.8% points higher than DPR and at least 5.3% points\nhigher than BM25.\nRetrieverGPT-3 F-1 MatchGPT-4 F-1 MatchUnifiedQA F-1 Match\nTitle + Abstract25.222.217.5\nBM2546.650.226.4\nDPR51.353.032.1\nRAPTOR53.155.736.6\nTable 4: Comparison of accuracies on the QuAL-\nITY dev dataset for two different language mod-\nels (GPT-3, UnifiedQA 3B) using various retrieval\nmethods.  RAPTOR outperforms the baselines of\nBM25 and DPR by at least 2.0% in accuracy.\nModelGPT-3 Acc.UnifiedQA Acc.\nBM2557.349.9\nDPR60.453.9\nRAPTOR62.456.6\nTable 5:  Results on F-1 Match scores of various\nmodels on the QASPER dataset.\nModelF-1 Match\nLongT5 XL (Guo et al., 2022)53.1\nCoLT5 XL (Ainslie et al., 2023)53.9\nRAPTOR + GPT-455.7\nComparison    to    State-of-the-art    Systems\nBuilding   upon   our   controlled   comparisons,\nwe  examine  RAPTOR’s  performance  relative\nto  other  state-of-the-art  models.As  shown\nin  Table  5,  RAPTOR  with  GPT-4  sets  a  new\nbenchmark  on  QASPER,  with  a  55.7%  F-1\nscore,   surpassing  the  CoLT5  XL’s  score  of\n53.9%.\nIn the QuALITY dataset, as shown in Table 7,\nRAPTOR paired with GPT-4 sets a new state-\nof-the-art with an accuracy of 82.6%, surpass-\ning the previous best result of 62.3%.  In par-\nticular,  it  outperforms  CoLISA  by  21.5%  on\nQuALITY-HARD, which represents questions\nthat  humans  took  unusually  long  to  correctly\nanswer,  requiring  rereading  parts  of  the  text,\ndifficult reasoning, or both.\nFor the NarrativeQA dataset, as represented in\nTable 6, RAPTOR paired with UnifiedQA sets\na new state-of-the-art METEOR score.  When compared to the recursively summarizing model by\nWu et al. (2021), which also employs UnifiedQA, RAPTOR outperforms it on all metrics.  While\nWu et al. (2021) rely solely on the summary in the top root node of the tree structure, RAPTOR\nbenefits from its intermediate layers and clustering approaches, which allows it to capture a range of\ninformation, from general themes to specific details, contributing to its overall strong performance.\n4.1CONTRIBUTION  OF THE TREE STRUCTURE\nWe examine the contribution of each layer of nodes to RAPTOR’s retrieval capabilities.  We hy-\npothesized that upper nodes play a crucial role in handling thematic or multi-hop queries requiring\na broader understanding of the text.\n8",
    "Published as a conference paper at ICLR 2024\nTable  6:  Performance  comparison  on  the  NarrativeQA  dataset  across  multiple  models,  focusing\non four metrics:  ROUGE-L, BLEU-1, BLEU-4, and METEOR. RAPTOR, when paired with Uni-\nfiedQA 3B, not only surpasses retrieval methods like BM25 and DPR but also sets a new state-of-\nthe-art in the METEOR metric.\nModelROUGE-LBLEU-1BLEU-4METEOR\nBiDAF (Ko\nˇ\ncisk\n`\ny et al., 2018)6.2        5.7       0.3        3.7\nBM25 + BERT (Mou et al., 2020)15.5       14.5      1.4        5.0\nRecursively Summarizing Books (Wu et al., 2021)21.6       22.3      4.2       10.6\nRetriever + Reader (Izacard & Grave, 2022)32.035.37.511.1\nRAPTOR + UnifiedQA30.823.56.419.1\nTable 7:  Accuracies of the QuALITY dataset on both the overall test set and the more challenging\nhard subset. GPT-4 with RAPTOR sets a new state-of-the-art.\nModel\nAccuracy\nTest SetHard Subset\nLongformer-base (Beltagy et al., 2020)39.5       35.3\nDPR and DeBERTaV3-large (Pang et al., 2022)55.4       46.1\nCoLISA (DeBERTaV3-large) (Dong et al., 2023a)62.3       54.7\nRAPTOR + GPT-482.676.2\nTable 8: Performance of RAPTOR when querying different tree layers for Story 1 from the QuAL-\nITY dataset. Columns represent different starting points (highest layer) and rows represent different\nnumbers of layers queried.\nLayers Queried / Start LayerLayer 0 (Leaf Nodes)Layer 1Layer 2\n1 layer57.957.857.9\n2 layers-52.663.15\n3 layers--73.68\nWe validated this hypothesis both quantitatively and qualitatively. We present qualitative analysis in\nappendix G. To quantitatively understand the contribution of the upper-level nodes, we used stories\nfrom the QuALITY dataset.  The RAPTOR tree is built for each of these stories, as described in\nSection 3. However, during retrieval, we limit the search to different subsets of layers. For example,\nwe exclusively retrieve from the leaf nodes and each upper layer, as well as from different contiguous\nsubsets of the layers.  We show findings specific to one story in Table 8, revealing that a full-tree\nsearch, utilizing all layers, outperformed retrieval strategies that focused only on specific layers.\nThese findings highlight the importance of the full tree structure in RAPTOR. By providing both\nthe original text and higher-level summaries for retrieval, RAPTOR can effectively handle a wider\nrange of questions, from higher-order thematic queries to detail-oriented questions. Detailed results\nfor additional stories and an ablation study on layer contributions can be found in Appendix I.\n5CONCLUSION\nIn this paper, we have presented RAPTOR, a novel tree-based retrieval system that augments the\nparametric knowledge of large language models with contextual information at various levels of\nabstraction.  By employing recursive clustering and summarization techniques, RAPTOR creates a\nhierarchical tree structure that is capable of synthesizing information across various sections of the\nretrieval corpora. During the query phase, RAPTOR leverages this tree structure for more effective\nretrieval.  Our controlled experiments demonstrated that RAPTOR not only outperforms traditional\nretrieval methods but also sets new performance benchmarks on several question-answering tasks.\n9",
    "Published as a conference paper at ICLR 2024\n6REPRODUCIBILITYSTATEMENT\nLanguage Models for QA and SummarizationFour language models are used in our RAPTOR\nexperiments: GPT-3 and GPT-4 for QA tasks, and GPT-3.5-turbo for summarization.  Thegpt-3,\ngpt-4, andgpt-3.5-turbomodels can be accessed via API calls (OpenAI API). UnifiedQA,\nwhich is used for QA tasks, is publicly available at Hugging Face.\nEvaluation   DatasetsThe   three   evaluation   datasets   used   in   our   experiments—QuALITY,\nQASPER, and NarrativeQA—are all publicly accessible.  These datasets ensure that the retrieval\nand QA tests conducted in this study can be replicated.\nSource CodeThe source code for RAPTOR will be publicly available here.\nREFERENCES\nCharu C Aggarwal, Alexander Hinneburg, and Daniel A Keim.  On the Surprising Behavior of Dis-\ntance Metrics in High Dimensional Space.  InDatabase Theory—ICDT 2001: 8th International\nConference London, UK, January 4–6, 2001 Proceedings 8, pp. 420–434. Springer, 2001.  URL\nhttps://link.springer.com/chapter/10.1007/3-540-44503-x_27.\nJoshua Ainslie, Tao Lei, Michiel de Jong, Santiago Onta\n ̃\nn\n ́\non, Siddhartha Brahma, Yury Zemlyan-\nskiy,  David  Uthus,  Mandy  Guo,  James  Lee-Thorp,  Yi  Tay,  et  al.   CoLT5:  Faster  long-range\ntransformers  with  conditional  computation.arXiv preprint arXiv:2303.09752,  2023.URL\nhttps://arxiv.org/abs/2303.09752.\nEkin  Akyurek,  Tolga  Bolukbasi,  Frederick  Liu,  Binbin  Xiong,  Ian  Tenney,  Jacob  Andreas,  and\nKelvin  Guu.    Towards  tracing  knowledge  in  language  models  back  to  the  training  data.    In\nFindings of the Association for Computational Linguistics:  EMNLP 2022,  pp.  2429–2446,\nAbu Dhabi, United Arab Emirates, December 2022. Association for Computational Linguistics.\ndoi:  10.18653/v1/2022.findings-emnlp.180.   URLhttps://aclanthology.org/2022.\nfindings-emnlp.180.\nStefanos Angelidis and Mirella Lapata.  Summarizing opinions: Aspect extraction meets sentiment\nprediction and they are both weakly supervised.arXiv preprint arXiv:1808.08858, 2018.  URL\nhttps://arxiv.org/abs/1808.08858.\nManoj Ghuhan Arivazhagan, Lan Liu, Peng Qi, Xinchi Chen, William Yang Wang, and Zhiheng\nHuang.   Hybrid  hierarchical  retrieval  for  open-domain  question  answering.   In  Anna  Rogers,\nJordan Boyd-Graber, and Naoaki Okazaki (eds.),Findings of the Association for Computational\nLinguistics: ACL 2023, pp. 10680–10689, Toronto, Canada, July 2023. Association for Computa-\ntional Linguistics. doi: 10.18653/v1/2023.findings-acl.679. URLhttps://aclanthology.\norg/2023.findings-acl.679.\nIz Beltagy, Matthew E. Peters, and Arman Cohan.  Longformer: The Long-document Transformer,\n2020. URLhttps://arxiv.org/abs/2004.05150. arXiv preprint arXiv:2004.05150.\nSebastian Borgeaud, Arthur Mensch, Jordan Hoffmann, Trevor Cai, Eliza Rutherford, Katie Milli-\ncan, George Bm Van Den Driessche, Jean-Baptiste Lespiau, Bogdan Damoc, Aidan Clark, et al.\nImproving language models by retrieving from trillions of tokens. InInternational conference on\nmachine learning, pp. 2206–2240. PMLR, 2022.  URLhttps://arxiv.org/abs/2112.\n04426.\nTom  Brown,  Benjamin  Mann,  Nick  Ryder,  Melanie  Subbiah,  Jared  D  Kaplan,  Prafulla  Dhari-\nwal,  Arvind  Neelakantan,  Pranav  Shyam,  Girish  Sastry,  Amanda  Askell,  Sandhini  Agarwal,\nAriel  Herbert-Voss,  Gretchen  Krueger,  Tom  Henighan,  Rewon  Child,  Aditya  Ramesh,  Daniel\nZiegler,  Jeffrey  Wu,  Clemens  Winter,  Chris  Hesse,  Mark  Chen,  Eric  Sigler,  Mateusz  Litwin,\nScott  Gray,  Benjamin  Chess,  Jack  Clark,  Christopher  Berner,  Sam  McCandlish,  Alec  Rad-\nford,  Ilya  Sutskever,  and  Dario  Amodei.Language  Models  are  Few-Shot  Learners.In\nH.  Larochelle,  M.  Ranzato,  R.  Hadsell,  M.F.  Balcan,  and  H.  Lin  (eds.),Advances in Neu-\nral Information Processing Systems,  volume  33,  pp.  1877–1901.  Curran  Associates,  Inc.,\n10",
    "Published as a conference paper at ICLR 2024\n2020.URLhttps://proceedings.neurips.cc/paper_files/paper/2020/\nfile/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf.\nS\n ́\nebastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Ka-\nmar,  Peter Lee,  Yin Tat Lee,  Yuanzhi Li,  Scott Lundberg,  et al.   Sparks of Artificial General\nIntelligence:  Early  Experiments  with  GPT-4.arXiv preprint arXiv:2303.12712,  2023.   URL\nhttps://arxiv.org/abs/2303.12712.\nShuyang Cao and Lu Wang.  HIBRIDS: Attention with hierarchical biases for structure-aware long\ndocument  summarization.   InProceedings of the 60th Annual Meeting of the Association for\nComputational Linguistics (Volume 1: Long Papers), pp. 786–807, Dublin, Ireland, May 2022.\nAssociation for Computational Linguistics.  doi:  10.18653/v1/2022.acl-long.58.  URLhttps:\n//aclanthology.org/2022.acl-long.58.\nDanqi  Chen,  Adam  Fisch,  Jason  Weston,  and  Antoine  Bordes.   Reading  Wikipedia  to  Answer\nOpen-Domain  Questions.   InProceedings of the 55th Annual Meeting of the Association for\nComputational Linguistics (Volume 1: Long Papers), pp. 1870–1879, Vancouver, Canada, July\n2017. Association for Computational Linguistics.  doi:  10.18653/v1/P17-1171.  URLhttps:\n//aclanthology.org/P17-1171.\nAakanksha  Chowdhery,  Sharan  Narang,  Jacob  Devlin,  Maarten  Bosma,  Gaurav  Mishra,  Adam\nRoberts, Paul Barham, Hyung Won Chung, Charles Sutton, Sebastian Gehrmann, et al.  PaLM:\nScaling  Language  Modeling  with  Pathways.arXiv preprint arXiv:2204.02311,  2022.    URL\nhttps://arxiv.org/abs/2204.02311.\nArman Cohan  and  Nazli  Goharian.   Contextualizing  citations for  scientific summarization  using\nword embeddings and domain knowledge.  InProceedings of the 40th International ACM SIGIR\nConference on Research and Development in Information Retrieval, pp. 1133–1136, 2017.  URL\nhttps://dl.acm.org/doi/abs/10.1145/3077136.3080740.\nZihang  Dai,  Zhilin  Yang,  Yiming  Yang,  Jaime  Carbonell,  Quoc  Le,  and  Ruslan  Salakhutdinov.\nTransformer-XL: Attentive language models beyond a fixed-length context. InProceedings of the\n57th Annual Meeting of the Association for Computational Linguistics, pp. 2978–2988, Florence,\nItaly, July 2019. Association for Computational Linguistics.  doi:  10.18653/v1/P19-1285.  URL\nhttps://aclanthology.org/P19-1285.\nTri  Dao,  Dan  Fu,  Stefano  Ermon,  Atri  Rudra,  and  Christopher  R\n ́\ne.    FlashAttention:   Fast  and\nmemory-efficient exact attention with IO-Awareness.Advances in Neural Information Processing\nSystems, 35:16344–16359, 2022. URLhttps://arxiv.org/abs/2205.14135.\nPradeep Dasigi, Kyle Lo, Iz Beltagy, Arman Cohan, Noah A. Smith, and Matt Gardner.  A Dataset\nof  Information-Seeking  Questions  and  Answers  Anchored  in  Research  Papers.    InProceed-\nings of the 2021 Conference of the North American Chapter of the Association for Computa-\ntional Linguistics: Human Language Technologies,  pp. 4599–4610,  Online,  June 2021. Asso-\nciation for Computational Linguistics.  doi:  10.18653/v1/2021.naacl-main.365.  URLhttps:\n//aclanthology.org/2021.naacl-main.365.\nMengxing Dong, Bowei Zou, Yanling Li, and Yu Hong.  CoLISA: Inner Interaction via Contrastive\nLearning for Multi-choice Reading Comprehension.  InAdvances in Information Retrieval: 45th\nEuropean Conference on Information Retrieval, ECIR 2023, Dublin, Ireland, April 2–6, 2023,\nProceedings, Part I, pp. 264–278. Springer, 2023a.  URLhttps://link.springer.com/\nchapter/10.1007/978-3-031-28244-7_17.\nZican Dong, Tianyi Tang, Lunyi Li, and Wayne Xin Zhao.  A survey on long text modeling with\ntransformers.arXiv preprint arXiv:2302.14502, 2023b.  URLhttps://arxiv.org/abs/\n2302.14502.\nTianyu Gao, Howard Yen, Jiatong Yu, and Danqi Chen. Enabling large language models to generate\ntext with citations.arXiv preprint arXiv:2305.14627,  2023.   URLhttps://arxiv.org/\nabs/2305.14627.\n11",
    "Published as a conference paper at ICLR 2024\nMandy Guo,  Joshua Ainslie,  David Uthus,  Santiago Ontanon,  Jianmo Ni,  Yun-Hsuan Sung,  and\nYinfei Yang.  LongT5:  Efficient text-to-text transformer for long sequences.  InFindings of the\nAssociation for Computational Linguistics: NAACL 2022, pp. 724–736, Seattle, United States,\nJuly 2022. Association for Computational Linguistics.  doi: 10.18653/v1/2022.findings-naacl.55.\nURLhttps://aclanthology.org/2022.findings-naacl.55.\nKelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Mingwei Chang. Retrieval Augmented\nLanguage Model Pre-Training. InInternational conference on machine learning, pp. 3929–3938.\nPMLR, 2020. URLhttps://doi.org/10.48550/arXiv.2002.08909.\nJordan  Hoffmann,  Sebastian  Borgeaud,  Arthur  Mensch,  Elena  Buchatskaya,  Trevor  Cai,  Eliza\nRutherford,  Diego  de  Las  Casas,  Lisa  Anne  Hendricks,  Johannes  Welbl,  Aidan  Clark,  et  al.\nTraining compute-optimal large language models.arXiv preprint arXiv:2203.15556, 2022. URL\nhttps://arxiv.org/abs/2203.15556.\nGautier  Izacard  and  Edouard  Grave.   Distilling  Knowledge  from  Reader  to  Retriever  for  Ques-\ntion  Answering,  2022.   URLhttps://arxiv.org/abs/2012.04584.    arXiv  preprint\narXiv:2012.04584.\nGautier Izacard, Patrick Lewis, Maria Lomeli, Lucas Hosseini, Fabio Petroni, Timo Schick, Jane\nDwivedi-Yu, Armand Joulin, Sebastian Riedel, and Edouard Grave.  Few-shot learning with re-\ntrieval  augmented  language  models.arXiv preprint arXiv:2208.03299,  2022.   URLhttps:\n//arxiv.org/abs/2208.03299.\nZhengbao Jiang, Frank F Xu, Jun Araki, and Graham Neubig.  How can we know what language\nmodels know?Transactions of the Association for Computational Linguistics, 8:423–438, 2020.\nURLhttps://arxiv.org/abs/1911.12543.\nJeff Johnson, Matthijs Douze, and Herv\n ́\ne J\n ́\negou.  Billion-Scale Similarity Search with GPUs.IEEE\nTransactions on Big Data, 7(3):535–547, 2019.   URLhttps://arxiv.org/abs/1702.\n08734.\nNikhil Kandpal, Haikang Deng, Adam Roberts, Eric Wallace, and Colin Raffel.  Large Language\nModels struggle to learn Long-Tail Knowledge.  InInternational Conference on Machine Learn-\ning, pp. 15696–15707. PMLR, 2023.  URLhttps://proceedings.mlr.press/v202/\nkandpal23a/kandpal23a.pdf.\nVladimir Karpukhin, Barlas Oguz, Sewon Min, Patrick Lewis, Ledell Wu, Sergey Edunov, Danqi\nChen,  and Wen-tau Yih.   Dense Passage Retrieval for Open-Domain Question Answering.   In\nProceedings of the 2020 Conference on Empirical Methods in Natural Language Processing\n(EMNLP),  pp.  6769–6781,  Online,  November  2020.  Association  for  Computational  Linguis-\ntics. doi: 10.18653/v1/2020.emnlp-main.550. URLhttps://aclanthology.org/2020.\nemnlp-main.550.\nDaniel Khashabi, Sewon Min, Tushar Khot, Ashish Sabharwal, Oyvind Tafjord, Peter Clark, and\nHannaneh  Hajishirzi.UNIFIEDQA:  Crossing  format  boundaries  with  a  single  QA  system.\nInFindings of the Association for Computational Linguistics: EMNLP 2020,  pp. 1896–1907,\nOnline,  November  2020.  Association  for  Computational  Linguistics.   doi:  10.18653/v1/2020.\nfindings-emnlp.171.URLhttps://aclanthology.org/2020.findings-emnlp.\n171.\nOmar  Khattab  and  Matei  Zaharia.ColBERT:  Efficient  and  effective  passage  search  via  con-\ntextualized  late  interaction  over  bert.    InProceedings of the 43rd International ACM SIGIR\nconference on research and development in Information Retrieval,  pp.  39–48,  2020.URL\nhttps://arxiv.org/abs/2004.12832.\nTom\n ́\na\nˇ\ns Ko\nˇ\ncisk\n`\ny, Jonathan Schwarz, Phil Blunsom, Chris Dyer, Karl Moritz Hermann, G\n ́\nabor Melis,\nand Edward Grefenstette.  The NarrativeQA Reading Comprehension Challenge.Transactions\nof the Association for Computational Linguistics, 6:317–328, 2018.  URLhttps://arxiv.\norg/abs/1712.07040.\n12",
    "Published as a conference paper at ICLR 2024\nPatrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal,\nHeinrich K\n ̈\nuttler, Mike Lewis, Wen-tau Yih, Tim Rockt\n ̈\naschel, et al. Retrieval-Augmented Gener-\nation for Knowledge-Intensive NLP Tasks.Advances in Neural Information Processing Systems,\n33:9459–9474, 2020. URLhttps://doi.org/10.48550/arXiv.2005.11401.\nJerry Liu. LlamaIndex, 2022. URLhttps://github.com/jerryjliu/llama_index.\nNelson F Liu, Kevin Lin, John Hewitt, Ashwin Paranjape, Michele Bevilacqua, Fabio Petroni, and\nPercy  Liang.    Lost  in  the  middle:   How  language  models  use  long  contexts.arXiv preprint\narXiv:2307.03172, 2023. URLhttps://arxiv.org/abs/2307.03172.\nYe Liu, Kazuma Hashimoto, Yingbo Zhou, Semih Yavuz, Caiming Xiong, and Philip Yu.  Dense\nhierarchical retrieval for open-domain question answering.  In Marie-Francine Moens, Xuanjing\nHuang,  Lucia  Specia,  and  Scott  Wen-tau  Yih  (eds.),Findings of the Association for Compu-\ntational Linguistics: EMNLP 2021,  pp.  188–200,  Punta  Cana,  Dominican  Republic,  Novem-\nber 2021. Association for Computational Linguistics.  doi: 10.18653/v1/2021.findings-emnlp.19.\nURLhttps://aclanthology.org/2021.findings-emnlp.19.\nLeland  McInnes,  John  Healy,  and  James  Melville.    UMAP:  Uniform  Manifold  Approximation\nand Projection for Dimension Reduction,  2018.   URLhttps://arxiv.org/abs/1802.\n03426. arXiv preprint arXiv:1802.03426.\nSewon Min, Kenton Lee, Ming-Wei Chang, Kristina Toutanova, and Hannaneh Hajishirzi.   Joint\npassage ranking for diverse multi-answer retrieval.  In Marie-Francine Moens, Xuanjing Huang,\nLucia Specia, and Scott Wen-tau Yih (eds.),Proceedings of the 2021 Conference on Empirical\nMethods in Natural Language Processing, pp. 6997–7008, Online and Punta Cana, Dominican\nRepublic, November 2021. Association for Computational Linguistics.  doi:  10.18653/v1/2021.\nemnlp-main.560. URLhttps://aclanthology.org/2021.emnlp-main.560.\nSewon Min,  Weijia Shi,  Mike Lewis,  Xilun Chen,  Wen-tau Yih,  Hannaneh Hajishirzi,  and Luke\nZettlemoyer.   Nonparametric  masked  language  modeling.   InFindings of the Association for\nComputational Linguistics: ACL 2023,  pp.  2097–2118,  Toronto,  Canada,  July  2023.  Associ-\nation for Computational Linguistics.   doi:  10.18653/v1/2023.findings-acl.132.   URLhttps:\n//aclanthology.org/2023.findings-acl.132.\nEric  Mitchell,   Charles  Lin,   Antoine  Bosselut,   Christopher  D  Manning,   and  Chelsea  Finn.\nMemory-based  model  editing  at  scale.InInternational Conference on Machine Learning,\npp.  15817–15831.  PMLR,  2022.URLhttps://proceedings.mlr.press/v162/\nmitchell22a/mitchell22a.pdf.\nXiangyang Mou, Mo Yu, Bingsheng Yao, Chenghao Yang, Xiaoxiao Guo, Saloni Potdar, and Hui\nSu.  Frustratingly hard evidence retrieval for QA over books.  InProceedings of the First Joint\nWorkshop on Narrative Understanding, Storylines, and Events, pp. 108–113, Online, July 2020.\nAssociation for Computational Linguistics.   doi:  10.18653/v1/2020.nuse-1.13.   URLhttps:\n//aclanthology.org/2020.nuse-1.13.\nInderjeet Nair, Aparna Garimella, Balaji Vasan Srinivasan, Natwar Modani, Niyati Chhaya, Srikr-\nishna  Karanam,  and  Sumit  Shekhar.A  neural  CRF-based  hierarchical  approach  for  lin-\near  text  segmentation.   InFindings of the Association for Computational Linguistics: EACL\n2023,  pp.  883–893,  Dubrovnik,  Croatia,  May  2023.  Association  for  Computational  Linguis-\ntics. doi: 10.18653/v1/2023.findings-eacl.65. URLhttps://aclanthology.org/2023.\nfindings-eacl.65.\nBenjamin Newman, Luca Soldaini, Raymond Fok, Arman Cohan, and Kyle Lo.  A controllable qa-\nbased framework for decontextualization.arXiv preprint arXiv:2305.14772, 2023. URLhttps:\n//arxiv.org/pdf/2305.14772.pdf.\nOpenAI.  GPT-4 Technical Report.ArXiv, abs/2303.08774, 2023.  URLhttps://arxiv.org/\nabs/2303.08774.\nRichard Yuanzhe Pang, Alicia Parrish, Nitish Joshi, Nikita Nangia, Jason Phang, Angelica Chen,\nVishakh Padmakumar, Johnny Ma, Jana Thompson, He He, and Samuel Bowman.  QuALITY:\n13",
    "Published as a conference paper at ICLR 2024\nQuestion Answering with Long Input Texts,  Yes!    InProceedings of the 2022 Conference of\nthe North American Chapter of the Association for Computational Linguistics: Human Language\nTechnologies, pp. 5336–5358, Seattle, United States, July 2022. Association for Computational\nLinguistics. URLhttps://aclanthology.org/2022.naacl-main.391.\nFabio Petroni, Tim Rockt\n ̈\naschel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, Alexander H Miller,\nand Sebastian Riedel.  Language models as knowledge bases?arXiv preprint arXiv:1909.01066,\n2019. URLhttps://arxiv.org/abs/1909.01066.\nJack W Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John\nAslanides,  Sarah Henderson,  Roman Ring,  Susannah Young,  et al.   Scaling language models:\nMethods, Analysis & Insights from Training Gopher.arXiv preprint arXiv:2112.11446, 2021.\nURLhttps://arxiv.org/abs/2112.11446.\nOri  Ram,   Yoav  Levine,   Itay  Dalmedigos,   Dor  Muhlgay,   Amnon  Shashua,   Kevin  Leyton-\nBrown,  and  Yoav  Shoham.   In-context  retrieval-augmented  language  models.arXiv preprint\narXiv:2302.00083, 2023. URLhttps://arxiv.org/abs/2302.00083.\nNils Reimers and Iryna Gurevych.  Sentence-BERT: Sentence embeddings using Siamese BERT-\nnetworks.InProceedings of the 2019 Conference on Empirical Methods in Natural Lan-\nguage Processing and the 9th International Joint Conference on Natural Language Processing\n(EMNLP-IJCNLP), pp. 3982–3992, Hong Kong, China, November 2019. Association for Com-\nputational Linguistics.  doi: 10.18653/v1/D19-1410.  URLhttps://aclanthology.org/\nD19-1410.\nAdam  Roberts,  Colin  Raffel,  and  Noam  Shazeer.    How  Much  Knowledge  Can  You  Pack  Into\nthe  Parameters  of  a  Language  Model?InProceedings of the 2020 Conference on Empir-\nical Methods in Natural Language Processing (EMNLP),  pp.  5418–5426,  Online,  November\n2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-main.437. URL\nhttps://aclanthology.org/2020.emnlp-main.437.\nStephen Robertson,  Hugo Zaragoza,  et al.   The Probabilistic Relevance Framework:  BM25 and\nBeyond.Foundations and Trends in Information Retrieval, 3(4):333–389, 2009.  URLhttps:\n//doi.org/10.1561/1500000019.\nStephen E Robertson, Steve Walker, Susan Jones, Micheline M Hancock-Beaulieu, Mike Gatford,\net al.  Okapi at TREC-3.Nist Special Publication Sp, 109:109, 1995.  URLhttps://www.\nmicrosoft.com/en-us/research/publication/okapi-at-trec-3/.\nDevendra Singh Sachan, Mike Lewis, Dani Yogatama, Luke Zettlemoyer, Joelle Pineau, and Manzil\nZaheer.   Questions are all you need to train a dense passage retriever.Transactions of the As-\nsociation for Computational Linguistics, 11:600–616, 2023.   doi:  10.1162/tacl\na00564.   URL\nhttps://aclanthology.org/2023.tacl-1.35.\nGideon Schwarz.   Estimating the Dimension of a Model.The annals of statistics,  pp. 461–464,\n1978.  URLhttps://projecteuclid.org/journals/annals-of-statistics/\nvolume-6/issue-2/Estimating-the-Dimension-of-a-Model/10.1214/\naos/1176344136.full.\nKaren  Sp\n ̈\narck  Jones.   A  Statistical  Interpretation  of  Term  Specificity  and  its  Application  in  Re-\ntrieval.Journal of documentation, 28(1):11–21, 1972.  URLhttps://doi.org/10.1108/\neb026526.\nSimeng Sun, Kalpesh Krishna, Andrew Mattarella-Micke, and Mohit Iyyer. Do long-range language\nmodels  actually  use  long-range  context?In  Marie-Francine  Moens,  Xuanjing  Huang,  Lucia\nSpecia, and Scott Wen-tau Yih (eds.),Proceedings of the 2021 Conference on Empirical Methods\nin Natural Language Processing,  pp. 807–822,  Online and Punta Cana,  Dominican Republic,\nNovember 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.emnlp-main.\n62. URLhttps://aclanthology.org/2021.emnlp-main.62.\nZhiqing Sun, Xuezhi Wang, Yi Tay, Yiming Yang, and Denny Zhou. Recitation-augmented language\nmodels.arXiv preprint arXiv:2210.01296, 2022.  URLhttps://arxiv.org/abs/2210.\n01296.\n14",
    "Published as a conference paper at ICLR 2024\nAlon  Talmor,  Yanai  Elazar,  Yoav  Goldberg,  and  Jonathan  Berant.   oLMpics–  on  what  language\nmodel pre-training captures.Transactions of the Association for Computational Linguistics, 8:\n743–758, 2020. URLhttps://arxiv.org/abs/1912.13283.\nBoxin Wang, Wei Ping, Peng Xu, Lawrence McAfee, Zihan Liu, Mohammad Shoeybi, Yi Dong,\nOleksii Kuchaiev, Bo Li, Chaowei Xiao, et al.  Shall we pretrain autoregressive language models\nwith retrieval?  a comprehensive study.arXiv preprint arXiv:2304.06762, 2023.  URLhttps:\n//arxiv.org/abs/2304.06762.\nJeff  Wu,  Long  Ouyang,  Daniel  M.  Ziegler,  Nisan  Stiennon,  Ryan  Lowe,  Jan  Leike,  and  Paul\nChristiano.    Recursively  Summarizing  Books  with  Human  Feedback,  2021.    URLhttps:\n//arxiv.org/abs/2109.10862.\nAdams  Wei  Yu,  David  Dohan,  Minh-Thang  Luong,  Rui  Zhao,  Kai  Chen,  Mohammad  Norouzi,\nand Quoc V. Le.  QANet:  Combining Local Convolution with Global Self-Attention for Read-\ning Comprehension, 2018.  URLhttps://arxiv.org/abs/1804.09541.  arXiv preprint\narXiv:1804.09541.\nWenhao Yu,  Dan Iter,  Shuohang Wang,  Yichong Xu,  Mingxuan Ju,  Soumya Sanyal,  Chenguang\nZhu, Michael Zeng, and Meng Jiang.  Generate rather than retrieve: Large Language Models are\nstrong context generators, 2022. URLhttps://arxiv.org/abs/2209.10063.\nShiyue  Zhang,  David  Wan,  and  Mohit  Bansal.    Extractive  is  not  faithful:   An  investigation  of\nbroad  unfaithfulness  problems  in  extractive  summarization.    In  Anna  Rogers,  Jordan  Boyd-\nGraber, and Naoaki Okazaki (eds.),Proceedings of the 61st Annual Meeting of the Association\nfor Computational Linguistics (Volume 1: Long Papers), pp. 2153–2174, Toronto, Canada, July\n2023. Association for Computational Linguistics.   doi:  10.18653/v1/2023.acl-long.120.   URL\nhttps://aclanthology.org/2023.acl-long.120.\nASCALABILITY  ANDCOMPUTATIONALEFFICIENCY OF THE\nTREE-BUILDINGPROCESS\nTo assess the computational efficiency and cost-effectiveness of RAPTOR’s tree-building process,\nwe conducted experiments on a consumer-grade laptop, specifically an Apple M1 Mac with 16GB\nof RAM. These experiments aimed to demonstrate the scalability and feasibility of RAPTOR on\ntypical hardware. We varied the context length from 12,500 to 78,000 tokens and measured both the\ntoken expenditure and the time required to complete the tree-building process, from initial splitting\nand embedding to the construction of the final root node.\nFigure 5: Token cost as a function of document length for QASPER, NarrativeQA, and QuALITY.\nRAPTOR tree construction costs scale linearly with document length for each of the datasets.\nToken  ExpenditureWe  empirically  investigated  the  relationship  between  the  initial  document\nlength and the total number of tokens expended during the tree-building process, which includes\nboth the prompt and completion tokens. The document lengths varied significantly across the three\n15",
    "Published as a conference paper at ICLR 2024\ndatasets examined: QuALITY, QASPER, and NarrativeQA. Figure 5 illustrates a clear linear corre-\nlation between the initial document length and the total token expenditure, emphasizing that RAP-\nTOR maintains a linear token scaling regardless of document complexity or length.\nFigure 6: Build time as a function of document length for documents of up to 80,000 tokens. RAP-\nTOR tree construction time scales linearly with document length for each of the datasets.\nBuild TimeWe also empirically observed a consistent linear trend between the document length\nand the build time, as shown in Figure 6.  This suggests that RAPTOR scales linearly in terms of\ntime, making it a viable solution for efficiently processing large corpora of varying lengths.\nConclusionOverall, our empirical results indicate that RAPTOR scales both in terms of tokens\nexpended and build time.  Even as the complexity and volume of the input text grow, the cost of\nconstructing the tree scales predictably and linearly.  This demonstrates that RAPTOR is computa-\ntionally efficient and well-suited for processing large and diverse corpora.\nBABLATIONSTUDY ONCLUSTERINGMECHANISM  INRAPTOR\nTo assess the effectiveness of the clustering mechanism in our RAPTOR approach, we conducted\nan ablation study on the QuALITY dataset.  This study compares RAPTOR’s performance with a\nbalanced tree-style encoding and summarization of contiguous chunks, in contrast to our standard\nclustering method.\nB.1METHODOLOGY\nBoth configurations in this ablation study utilized SBERT embeddings and UnifiedQA to maintain\nconsistency  in  retrieval.   For  RAPTOR,  we  employed  our  typical  clustering  and  summarization\nprocess. In contrast, the alternative setup involved creating a balanced tree by recursively encoding\nand summarizing contiguous text chunks.  We determined the window size for this setup based on\nthe average cluster size observed in RAPTOR, which is approximately 6.7 nodes. Hence, we chose\na window size of 7 nodes. The collapsed tree approach was applied for retrieval in both models.\nB.2RESULTS& DISCUSSION\nThe results of the ablation study are presented in table 9. The results from this ablation study clearly\nindicate an improvement in accuracy when employing RAPTOR’s clustering mechanism over the\nrecency-based tree approach. This finding substantiates our hypothesis that the clustering strategy in\nRAPTOR is more effective in capturing homogeneous content for summarization, thereby enhancing\nthe overall retrieval performance.\n16",
    "Published as a conference paper at ICLR 2024\nTable 9: Ablation study results comparing RAPTOR with a recency-based tree approach\nConfigurationAccuracy\nRAPTOR + SBERT embeddings + UnifiedQA56.6%\nRecency-based tree + SBERT embeddings + UnifiedQA55.8%\nCDATASETSTATISTICS ANDCOMPRESSIONRATIOS\nThe average ratio of the summary length to the sum of child node lengths across all datasets is 0.28,\nindicating a 72% compression rate. On average, the summary length is 131 tokens, and the average\nchild node length is 86 tokens. Below are the detailed statistics for all three datasets:\nTable 10: Statistics of Average Summary Length and Child Node Length Across Datasets\nDatasetAvg.\nSummary\nLength\n(tokens)\nAvg. Child\nNode Text\nLength\n(tokens)\nAvg. # of\nChild Nodes\nPer Parent\nAvg.\nCompression\nRatio (%)\nAll Datasets13185.66.7.28\nQuALITY124.487.95.7.28\nNarrativeQA129.785.56.8.27\nQASPER145.986.25.7.35\nDSUMMARIZATIONPROMPT\nTable 11 shows the prompt used for summarization.\nTable 11: Prompt for Summarization\nRoleContent\nsystemYou are a Summarizing Text Portal\nuserWrite  a  summary  of  the  following,  including  as  many  key  details  as\npossible:{context}:\nEHALLUCINATIONANALYSIS\nTo assess the quality and accuracy of the summarizations within our RAPTOR model, we conducted\nan analysis focusing on hallucinations in the generated summaries. The summaries were generated\nbygpt-3.5-turboand subsequently annotated to quantify the rates of hallucinations, to examine\nwhether  such  inaccuracies  propagate  to  parent  nodes,  and  to  evaluate  their  impact  on  question-\nanswering (QA) tasks.\nE.1METHODOLOGY\nWe  randomly  sampled  150  nodes  across  40  stories  and  evaluated  them  for  hallucinations.   This\nsampling strategy provides a broad view of the model’s performance across different contexts. Each\nnode was annotated by hand, and determined if it contained a hallucination.\nE.2FINDINGS\nOut of the 150 nodes sampled, 4% (6 nodes) contained some form of hallucination. Most commonly,\nthese hallucinations originated from the model adding minor information possibly from its training\ndata  that  was  not  present  in  the  text  being  summarized,  or  from  incorrectly  extrapolating  some\ninformation when creating the summary.\n17",
    "Published as a conference paper at ICLR 2024\nExample:\nText of the child nodes:\n”And you will come with me to my people?  We may live here among them, and\nyou will be a great warrior–oh, when Jor dies you may even be chief, for there is\nnone so mighty as my warrior...”But your father will not permit it–Jor, my father,\nHigh Chief of the Galus, will not permit it, for like me you are cos-ata-lo. Oh, Co-\nTan, if we but could!... Bradley noticed that she spoke in English–broken English\nlike Co-Tan’s but equally appealing.\nSummary found in the parent of that node:\nThe protagonist, Bradley, is being asked by Co-Tan to stay with her people and\nbecome a great warrior, but he refuses and must return to his own country.  Tom\nBillings of Santa Monica arrives and tells them he came to search for a man named\nBowen J. Tyler, Jr. Ajor, Co-Tan’s sister, is excited about the possibility of going\nto Tom’s country to see strange and wonderful things...\nThe hallucination here is that the summary states that Jr.  Ajor and Co-Tan are sisters, but does not\nexplicitly mention or imply this.\nUpon reviewing all parent nodes, we found that hallucinations did not propagate to higher layers.\nGenerally, the hallucinations were minor and did not alter the thematic interpretation of the text.\nE.3IMPACT ONQA TASKS\nIn our findings, hallucinations had no discernible impact on the performance of QA tasks. This sug-\ngests that hallucination is not a major concerns for the summarization component in our RAPTOR\narchitecture.\nFPSEUDOCODE FORRETRIEVALMETHODS\nAlgorithm 1Tree Traversal Algorithm\nfunctionTRAVERSETREE(tree,query,k)\nS\ncurrent\n←tree.layer[0]\nforlayer in range(tree.numlayers)do\ntop\nk\n←[]\nfornode inS\ncurrent\ndo\nscore←dot\nproduct(query, node)\ntopk.append((node, score))\nend for\nS\nlayer\n←sorted(top\nk)[:k].nodes\nS\ncurrent\n←S\nlayer\nend for\nreturnS\n0\n∪S\n1\n∪S\n2\n∪...∪S\nk\nend function\nGQUALITATIVEANALYSIS\nTo qualitatively examine RAPTOR’s retrieval process, we test it on thematic, multi-hop questions\nabout a 1500-word version of the fairytale Cinderella.  We compare the context retrieved by RAP-\nTOR with the context retrieved by Dense Passage Retrieval (DPR). Figure 4 in the main paper details\nthe retrieval process within RAPTOR’s tree structure for two questions.  The nodes that RAPTOR\nselects for each question are highlighted, while the leaf nodes that DPR selects for the same question\nare indicated with arrows.  This comparison illustrates the advantage of RAPTOR’s tree structure.\nRAPTOR selects nodes from different layers depending on the level of granularity required by the\n18",
    "Published as a conference paper at ICLR 2024\nAlgorithm 2Collapsed Tree Algorithm\nfunctionCOLLAPSEDTREE(tree,query,k,maxtokens)\ntree←flatten(tree)▷Flatten tree into 1D\ntop\nnodes←[]\nfornode in treedo\ntop\nnodes.append((node, dotproduct(query, node))\nend for\ntop\nnodes←sorted(topnodes)\nresult←[]\ntotal\ntokens←0\nfornode in topnodesdo\niftotal\ntokens+node.tokensize<maxtokensthen\nresult.append(node)\nend if\ntotal\ntokens←totaltokens+node.tokensize\nend for\nreturnresult\nend function\nQuestion: What is the central theme of the story?\nRAPTORFairy Godmother helps Cinderella attend a ball by transforming her rags. . .  Cinderella\nimpresses the Prince at the ball. . .  she loses track of time and has to run home alone in\nthe darkness. The Prince is unable to find Cinderella and goes in search of her . . .  She\nforgave her sisters, and treated them always very kindly, and the Prince had great cause\nto be glad that he had found the glass slipper.\nDPRTwo mice were turned into footmen;  four grasshoppers into white horses.  Next,  the\nFairy touched Cinderella’s rags, and they became rich satin robes, trimmed with point\nlace. . . .  Alas! the clock had struck Eleven. She found no coach, only a pumpkin, and\nthe rat and mice ran quickly away when they saw her; while all her fine dress turned to\nrags, and she had to run home alone. . . They told her a beautiful Princess had been at\nthe ball, with whom the Prince was delighted. They did not know it was Cinderella.\nQuestion: How does Cinderella find a happy ending?\nRAPTORThe  story  of  Cinderella  involves  her  godmother,  a  fairy,  who  transforms  a  pumpkin\ninto a grand coach with her wand and allows Cinderella to attend the ball.  However,\nCinderella must return home before the clock strikes eleven or her dress will turn back\ninto rags. . .   Cinderella impresses the Prince at the ball but leaves before he can find\nout who she is. . .  The Prince searched for the owner of a lost glass slipper and found it\nbelonged to Cinderella.  She forgave her sisters and the Prince was glad to have found\nher.\nDPRthe clock had struck Eleven. . .   The Prince was very much surprised when he missed\nCinderella  again,  and  leaving  the  ball,  went  in  search  of  her. . .   Fairy  touched  Cin-\nderella’s rags,  and they became rich satin robes,  trimmed with point lace...   Her old\nshoes became a charming pair of glass slippers, which shone like diamonds.  “Now go\nto the ball, my love,” she said, “and enjoy yourself. But remember, you must leave the\nroom before the clock strikes eleven. If you do not your dress will return to its original\nrags.”\nTable 12: Relevant excerpts from text retrieved by RAPTOR and DPR for the questions on the\nfairytale Cinderella.\nquestion at hand.  Further, the information that would be retrieved by DPR is more often than not\nincluded in the context retrieved by RAPTOR, either directly as a leaf node or indirectly as part of a\nsummary from a higher layer.\n”The first question we examine is “How does Cinderella find a happy ending?”, a multi-hop question\nbest answered by synthesizing information from various text segments. To control for the language\nmodel’s potential familiarity with the Cinderella story, we instructed it to rely solely on the retrieved\ninformation for its answers.  Table 13 shows the text retrieved by both RAPTOR and DPR for this\nquestion.  RAPTOR’s context succinctly describes Cinderella’s journey to happiness, while DPR’s\nleaf nodes primarily focus on her initial transformation.   The difference in retrieved information\n19",
    "Published as a conference paper at ICLR 2024\nsignificantly impacts downstream tasks.  When GPT-4 is provided with RAPTOR’s context, it gen-\nerates a detailed answer:  “Cinderella finds a happy ending when the Prince searches for the owner\nof the lost glass slipper and discovers it belongs to Cinderella.  They eventually marry, transform-\ning Cinderella’s life for the better.”  In contrast, using DPR’s context, GPT-4 states:  “Based on the\ngiven context, it is not possible to determine how Cinderella finds a happy ending, as the text lacks\ninformation about the story’s conclusion.”\nThe second question we examine is “What is the central theme of the story?”, a thematic question\nthat requires holistic understanding of the entire text.  The text retrieved by RAPTOR and DPR for\nthis question is shown in Table 13.  The text retrieved by RAPTOR contains short descriptions of\nall the major parts of the story, whereas the text retrieved by DPR contains detailed descriptions of\na narrow subset of the story. Again, the difference in retrieval mechanisms affects the performance\nof GPT-4 when answering the question.   Given DPR’s context,  it outputs “The central theme of\nthe story is transformation and the power of inner beauty, as Cinderella, a kind and humble girl, is\nmagically transformed into a beautiful princess, capturing the attention and admiration of the Prince\nand others at the ball.”  This answer only takes into account the first portion of the story, up until\nCinderella first meets the prince. In contrast, given RAPTOR’s context, GPT-4 outputs “The central\ntheme of the story is transformation and overcoming adversity, as Cinderella, with the help of her\nFairy Godmother, transforms from a mistreated and downtrodden girl into a beautiful and confident\nyoung woman who ultimately finds happiness and love with the Prince.”  This is a more complete\nanswer, demonstrating a comprehensive understanding of the story.\nThis qualitative analysis indicates that RAPTOR outperforms prior retrieval mechanisms because\nthe information that it retrieves is more relevant and exhaustive, allowing for better performance on\ndownstream tasks.\nWe also created a 2600-word story along with questions about its narrative and theme.  An excerpt\nfrom the story is present below and the full PDF of this story is linked here. For questions like “What\nis the central theme of the story?”, an upper-level node is retrieved which includes the sentence:\n“This story is about the power of human connection...  inspiring and uplifting each other as they\npursued their passions.” This summary, not explicitly present in the original text, almost directly\nanswers the question.\nExcerpt from ”The Eager Writer”:\n”Ethan’s passion for writing had always been a part of him. As a child, he would\noften scribble stories and poems in his notebook, and as he grew older, his love\nfor writing only intensified. His evenings were often spent in the dim light of his\nroom, typing away at his laptop.  He had recently taken a job as a content writer\nfor  an  online  marketing  firm  to  pay  the  bills,  but  his  heart  still  longed  for  the\nworld of storytelling.  However, like many aspiring writers, he struggled to find a\nfoothold in the industry. He took a job as a content writer for an online marketing\nfirm, but it was growing increasingly evident to him that this was not the path he\nwanted to pursue.  It was during this time that he stumbled upon the Pathways\napp.  The app offered a platform for people in similar professions to connect and\nshare knowledge, and he saw it as an opportunity to finally connect with others\nwho shared his passion for writing. Ethan saw an opportunity to meet others who\nshared his passion and could offer guidance and mentorship.  He quickly signed\nup and was surprised by the number of writers he found on the platform, from\nwell establish professionals to beginners just starting out in the business.”\nHNARRATIVEQA EVALUATIONSCRIPT\nWe made several modifications to AllenNLP’s evaluation script\n3\nto better fit our evaluation needs:\n•Added Smoothing:Smoothing was incorporated to handle cases where BLEU score is\nzero, due to no n-gram matches occurring in the reference text.  A BLEU score of zero\nskews the results, leading to an overly harsh evaluation for rare or novel phrases. By adding\n3\ndocs.allennlp.org/models/main/models/rc/tools/narrativeqa/\n20",
    "Published as a conference paper at ICLR 2024\na smoothing function, we prevent the BLEU scores from dropping to zero, providing a more\nfair evaluation.\n•Modified BLEU-4 Weighting:The original script applied a weight of 1 to the highest\norder  n-gram  (4-gram)  and  0  to  the  rest  in  its  BLEU-4  calculation  (i.e.,  weights=(0,  0,\n0, 1)).  This approach may overly focus on 4-gram matches while neglecting lower-order\nmatches.  To provide a more balanced evaluation, we evenly distributed the weight across\nall n-gram levels, changing the weights for the BLEU-4 calculation to (0.25, 0.25, 0.25,\n0.25).\n•Tokenization before Mapping in METEOR Calculation:The original script utilized a\nsimple split and map method for METEOR calculation. We fixed this by first tokenizing the\ntext and then mapping the tokens. This amendment improves the accuracy of the METEOR\ncalculation by taking into account the correct linguistic boundaries of words.\nQuestion: What is the central theme of the story?\nRAPTORFairy Godmother helps Cinderella attend a ball by transforming her rags. . .  Cinderella\nimpresses the Prince at the ball. . .  she loses track of time and has to run home alone in\nthe darkness. The Prince is unable to find Cinderella and goes in search of her . . .  She\nforgave her sisters, and treated them always very kindly, and the Prince had great cause\nto be glad that he had found the glass slipper.\nDPRTwo mice were turned into footmen;  four grasshoppers into white horses.  Next,  the\nFairy touched Cinderella’s rags, and they became rich satin robes, trimmed with point\nlace. . . .  Alas! the clock had struck Eleven. She found no coach, only a pumpkin, and\nthe rat and mice ran quickly away when they saw her; while all her fine dress turned to\nrags, and she had to run home alone. . . They told her a beautiful Princess had been at\nthe ball, with whom the Prince was delighted. They did not know it was Cinderella.\nQuestion: How does Cinderella find a happy ending?\nRAPTORThe  story  of  Cinderella  involves  her  godmother,  a  fairy,  who  transforms  a  pumpkin\ninto a grand coach with her wand and allows Cinderella to attend the ball.  However,\nCinderella must return home before the clock strikes eleven or her dress will turn back\ninto rags. . .   Cinderella impresses the Prince at the ball but leaves before he can find\nout who she is. . .  The Prince searched for the owner of a lost glass slipper and found it\nbelonged to Cinderella.  She forgave her sisters and the Prince was glad to have found\nher.\nDPRthe clock had struck Eleven. . .   The Prince was very much surprised when he missed\nCinderella  again,  and  leaving  the  ball,  went  in  search  of  her. . .   Fairy  touched  Cin-\nderella’s rags,  and they became rich satin robes,  trimmed with point lace...   Her old\nshoes became a charming pair of glass slippers, which shone like diamonds.  “Now go\nto the ball, my love,” she said, “and enjoy yourself. But remember, you must leave the\nroom before the clock strikes eleven. If you do not your dress will return to its original\nrags.”\nTable 13: Relevant excerpts from text retrieved by RAPTOR and DPR for the questions on the\nfairytale Cinderella.\nIANALYSIS OFDIFFERENTLAYERS ONRAPTOR’SPERFORMANCE\nI.1HOW  DO  DIFFERENTLAYERS IMPACT PERFORMANCE?\nIn this section, we present a detailed breakdown of RAPTOR’s retrieval performance when querying\ndifferent layers of the hierarchical tree structure for various stories. These tables validate the utility\nof RAPTOR’s multi-layered structure for diverse query requirements.\nTable 14: Performance of RAPTOR when querying different layers of the tree for Story 2.\nLayers Queried / Start LayerLayer 0 (Leaf Nodes)Layer 1Layer 2\n1 layer58.847.141.1\n2 layers-64.752.9\n3 layers--47.1\n21",
    "Published as a conference paper at ICLR 2024\nFigure 7: Histogram showing the percentage of nodes retrieved from different layers of the RAPTOR\ntree across three datasets (NarrativeQA, Quality, and Qasper) using three retrievers (SBERT, BM25,\nand DPR). The data indicate that a substantial portion of the nodes contributing to the final retrieval\ncomes from non-leaf layers, with a notable percentage from the first and second layers, highlighting\nthe importance of RAPTOR’s hierarchical summarization in the retrieval process.\nTable 15: Performance of RAPTOR when querying different layers of the tree for Story 3.\nLayers Queried / Start LayerLayer 0 (Leaf Nodes)Layer 1Layer 2\n1 layer66.661.161.1\n2 layers-66.666.6\n3 layers--83.3\nTable 16: Performance of RAPTOR when querying different layers of the tree for Story 4.\nLayers Queried / Start LayerLayer 0 (Leaf Nodes)Layer 1\n1 layer94.784.2\n2 layers-89.4\nTable 17: Performance of RAPTOR when querying different layers of the tree for Story 5.\nLayers Queried / Start LayerLayer 0 (Leaf Nodes)Layer 1\n1 layer57.947.3\n2 layers-68.4\nI.2WHICHLAYERS DORETRIEVEDNODES COME FROM?\nWe further conduct an ablation study across all three datasets and across three different retrievers\nwith RAPTOR with the collapsed tree retrieval to examine the layers from which the retrieved nodes\noriginate. We observe that between 18.5% to 57% of the retrieved nodes come from non-leaf nodes.\nAs illustrated in Figure 7, the retrieval pattern across layers reveals the importance of RAPTOR’s\nmulti-layered tree structure.  Notably, a significant percentage of the nodes retrieved by RAPTOR\nusing the DPR retriever for the NarrativeQA dataset come from the first and second layers of the\ntree, as opposed to the leaf nodes. This pattern is consistent across the other datasets and retrievers,\nalbeit with varying percentages.\nTable 18: Percentage of nodes from non-leaf nodes across different datasets and retrievers\nDatasetDPRSBERTBM25\nNarrativeQA57.36%36.78%34.96%\nQuality32.28%24.41%32.36%\nQasper22.93%18.49%22.76%\n22",
    "Published as a conference paper at ICLR 2024\nTable 19: Percentage of nodes from different layers with DPR as the retriever\nLayerNarrativeQAQualityQasper\n042.64%67.71%77.07%\n145.00%29.43%21.88%\n210.57%2.85%1.05%\n31.78%--\n40.003%--\nTable 20: Percentage of nodes from different layers with SBERT as the retriever\nLayerNarrativeQAQualityQasper\n063.22%75.59%81.51%\n131.51%22.78%17.84%\n24.85%1.63%0.65%\n30.42%--\nTable 21: Percentage of nodes from different layers with BM25 as the retriever\nLayerNarrativeQAQualityQasper\n065.04%67.64%77.24%\n128.79%28.85%21.57%\n25.36%3.51%1.19%\n30.81%--\n23"
  ]
}
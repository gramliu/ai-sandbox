{
  "key": "NJ22ISTI",
  "url": "http://arxiv.org/pdf/2205.13147",
  "metadata": {
    "title": "Matryoshka Representation Learning",
    "abstract": "  Learned representations are a central component in modern ML systems, serving\na multitude of downstream tasks. When training such representations, it is\noften the case that computational and statistical constraints for each\ndownstream task are unknown. In this context rigid, fixed capacity\nrepresentations can be either over or under-accommodating to the task at hand.\nThis leads us to ask: can we design a flexible representation that can adapt to\nmultiple downstream tasks with varying computational resources? Our main\ncontribution is Matryoshka Representation Learning (MRL) which encodes\ninformation at different granularities and allows a single embedding to adapt\nto the computational constraints of downstream tasks. MRL minimally modifies\nexisting representation learning pipelines and imposes no additional cost\nduring inference and deployment. MRL learns coarse-to-fine representations that\nare at least as accurate and rich as independently trained low-dimensional\nrepresentations. The flexibility within the learned Matryoshka Representations\noffer: (a) up to 14x smaller embedding size for ImageNet-1K classification at\nthe same level of accuracy; (b) up to 14x real-world speed-ups for large-scale\nretrieval on ImageNet-1K and 4K; and (c) up to 2% accuracy improvements for\nlong-tail few-shot classification, all while being as robust as the original\nrepresentations. Finally, we show that MRL extends seamlessly to web-scale\ndatasets (ImageNet, JFT) across various modalities -- vision (ViT, ResNet),\nvision + language (ALIGN) and language (BERT). MRL code and pretrained models\nare open-sourced at https://github.com/RAIVNLab/MRL.\n",
    "published": "2022-05-26T04:33:56Z"
  },
  "text": [
    "Matryoshka Representation Learning\nAditya Kusupati\n∗†⋄\n, Gantavya Bhatt\n∗†\n, Aniket Rege\n∗†\n,\nMatthew Wallingford\n†\n, Aditya Sinha\n⋄\n, Vivek Ramanujan\n†\n, William Howard-Snyder\n†\n,\nKaifeng Chen\n⋄\n, Sham Kakade\n‡\n, Prateek Jain\n⋄\nand Ali Farhadi\n†\n†\nUniversity of Washington,\n⋄\nGoogle Research,\n‡\nHarvard University\n{kusupati,ali}@cs.washington.edu,prajain@google.com\nAbstract\nLearned representations are a central component in modern ML systems, serv-\ning  a  multitude  of  downstream  tasks.   When  training  such  representations,  it\nis often the case that computational and statistical constraints for each down-\nstream task are unknown.  In this context, rigid fixed-capacity representations\ncan be either over or under-accommodating to the task at hand.  This leads us\nto ask:can we design a flexible representation that can adapt to multiple down-\nstream tasks with varying computational resources?Our main contribution is\nMatryoshka Representation Learning(MRL) which encodes information at\ndifferent granularities and allows a single embedding to adapt to the computational\nconstraints of downstream tasks.MRLminimally modifies existing representation\nlearning pipelines and imposes no additional cost during inference and deployment.\nMRLlearns coarse-to-fine representations that are at least as accurate and rich as\nindependently trained low-dimensional representations. The flexibility within the\nlearnedMatryoshka Representationsoffer:  (a) up to14×smaller embedding\nsize for ImageNet-1K classification at the same level of accuracy; (b) up to14×\nreal-world speed-ups for large-scale retrieval on ImageNet-1K and 4K; and (c) up\nto2% accuracy improvements for long-tail few-shot classification, all while being\nas robust as the original representations. Finally, we show thatMRLextends seam-\nlessly to web-scale datasets (ImageNet, JFT) across various modalities – vision\n(ViT, ResNet), vision + language (ALIGN) and language (BERT).MRLcode and\npretrained models are open-sourced athttps://github.com/RAIVNLab/MRL.\n1    Introduction\nLearned representations [57] are fundamental building blocks of real-world ML systems [66,91].\nTrained once and frozen,d-dimensional representations encode rich information and can be used\nto perform multiple downstream tasks [4]. The deployment of deep representations has two steps:\n(1) an expensive yet constant-cost forward pass to compute the representation [29] and (2) utilization\nof the representation for downstream applications [50,89]. Compute costs for the latter part of the\npipeline scale with the embedding dimensionality as well as the data size (N) and label space (L).\nAt web-scale [15,85] this utilization cost overshadows the feature computation cost. The rigidity in\nthese representations forces the use of high-dimensional embedding vectors across multiple tasks\ndespite the varying resource and accuracy constraints that require flexibility.\nHuman perception of the natural world has a naturally coarse-to-fine granularity [28,32]. However,\nperhaps due to the inductive bias of gradient-based training [84], deep learning models tend to diffuse\n“information” across the entire representation vector. The desired elasticity is usually enabled in the\nexisting flat and fixed representations either through training multiple low-dimensional models [29],\njointly optimizing sub-networks of varying capacity [9,100] or post-hoc compression [38,60]. Each\nof these techniques struggle to meet the requirements for adaptive large-scale deployment either\n∗\nEqual contribution – AK led the project with extensive support from GB and AR for experimentation.\n36th Conference on Neural Information Processing Systems (NeurIPS 2022).\narXiv:2205.13147v4  [cs.LG]  8 Feb 2024",
    "due to training/maintenance overhead, numerous expensive forward passes through all of the data,\nstorage and memory cost for multiple copies of encoded data, expensive on-the-fly feature selection\nor a significant drop in accuracy. By encoding coarse-to-fine-grained representations, which are as\naccurate as the independently trained counterparts, we learn with minimal overhead a representation\nthat can be deployedadaptivelyat no additional cost during inference.\nWe introduceMatryoshka Representation Learning(MRL) to induce flexibility in the learned\nrepresentation.MRLlearns representations of varying capacities within the same high-dimensional\nvector through explicit optimization ofO(log(d))lower-dimensional vectors in a nested fashion,\nhence the nameMatryoshka.MRLcan be adapted to any existing representation pipeline and\nis easily extended to many standard tasks in computer vision and natural language processing.\nFigure 1 illustrates the core idea ofMatryoshka Representation Learning(MRL) and the adaptive\ndeployment settings of the learnedMatryoshka Representations.\nAdaptive Retrieval\nShortlisting\nRe-ranking\nAdaptive Classification\nTrainingInference\n<latexit sha1_base64=\"eh9hk+peBkdsPY6v+r4rONmxYLY=\">AAAB7nicbVBNSwMxEJ2tX7V+VT16CRbBU9kVoR6LXjxWsB/QLiWbZtvQbBKSrFCW/ggvHhTx6u/x5r8x2+5BWx8MPN6bYWZepDgz1ve/vdLG5tb2Tnm3srd/cHhUPT7pGJlqQttEcql7ETaUM0HblllOe0pTnEScdqPpXe53n6g2TIpHO1M0TPBYsJgRbJ3UHUjFU1MZVmt+3V8ArZOgIDUo0BpWvwYjSdKECks4NqYf+MqGGdaWEU7nlUFqqMJkise076jACTVhtjh3ji6cMkKx1K6ERQv190SGE2NmSeQ6E2wnZtXLxf+8fmrjmzBjQqWWCrJcFKccWYny39GIaUosnzmCiWbuVkQmWGNiXUJ5CMHqy+ukc1UP/HrwcF1r3hZxlOEMzuESAmhAE+6hBW0gMIVneIU3T3kv3rv3sWwtecXMKfyB9/kDBrKPWQ==</latexit>\n<latexit sha1_base64=\"szvlzTDYQEH5M/GSBtp0D9XaTiU=\">AAAB/HicbVDLSsNAFL2pr1pf0S7dDBahbkoiguKq6MaFiwr2AW0Ik8m0HTp5MDMRYqi/4saFIm79EHf+jZM2C209MHA4517umePFnEllWd9GaWV1bX2jvFnZ2t7Z3TP3DzoySgShbRLxSPQ8LClnIW0rpjjtxYLiwOO0602uc7/7QIVkUXiv0pg6AR6FbMgIVlpyzeogwGpMMEe39Uc3sy/96Ylr1qyGNQNaJnZBalCg5ZpfAz8iSUBDRTiWsm9bsXIyLBQjnE4rg0TSGJMJHtG+piEOqHSyWfgpOtaKj4aR0C9UaKb+3shwIGUaeHoyjyoXvVz8z+snanjhZCyME0VDMj80TDhSEcqbQD4TlCieaoKJYDorImMsMFG6r4ouwV788jLpnDZsq2HfndWaV0UdZTiEI6iDDefQhBtoQRsIpPAMr/BmPBkvxrvxMR8tGcVOFf7A+PwBd6WT/A==</latexit>\n<latexit sha1_base64=\"EDzxxYGdFHE0OT/8r1yzvduiKkY=\">AAAB/nicbVDLSsNAFL2pr1pfUXHlZrAIdVOTIiiuim5cuKhgH9CGMJlM26GTBzMToYaCv+LGhSJu/Q53/o2TNgttPTBwOOde7pnjxZxJZVnfRmFpeWV1rbhe2tjc2t4xd/daMkoEoU0S8Uh0PCwpZyFtKqY47cSC4sDjtO2NrjO//UCFZFF4r8YxdQI8CFmfEay05JoHvQCrIcEc3VYe3dS+9E9rkxPXLFtVawq0SOyclCFHwzW/en5EkoCGinAsZde2YuWkWChGOJ2UeomkMSYjPKBdTUMcUOmk0/gTdKwVH/UjoV+o0FT9vZHiQMpx4OnJLKyc9zLxP6+bqP6Fk7IwThQNyexQP+FIRSjrAvlMUKL4WBNMBNNZERligYnSjZV0Cfb8lxdJq1a1rap9d1auX+V1FOEQjqACNpxDHW6gAU0gkMIzvMKb8WS8GO/Gx2y0YOQ7+/AHxucPYdOUcQ==</latexit>\n<latexit sha1_base64=\"GlggPMD8z4lB+hiIvM4R0NcwGwo=\">AAAB/nicbVDLSsNAFL2pr1pfUXHlZrAIdVMTKSiuim5cuKhgH9CGMJlM26GTBzMToYaCv+LGhSJu/Q53/o2TNgttPTBwOOde7pnjxZxJZVnfRmFpeWV1rbhe2tjc2t4xd/daMkoEoU0S8Uh0PCwpZyFtKqY47cSC4sDjtO2NrjO//UCFZFF4r8YxdQI8CFmfEay05JoHvQCrIcEc3VYe3dS+9E9rkxPXLFtVawq0SOyclCFHwzW/en5EkoCGinAsZde2YuWkWChGOJ2UeomkMSYjPKBdTUMcUOmk0/gTdKwVH/UjoV+o0FT9vZHiQMpx4OnJLKyc9zLxP6+bqP6Fk7IwThQNyexQP+FIRSjrAvlMUKL4WBNMBNNZERligYnSjZV0Cfb8lxdJ66xqW1X7rlauX+V1FOEQjqACNpxDHW6gAU0gkMIzvMKb8WS8GO/Gx2y0YOQ7+/AHxucPZN+Ucw==</latexit>\n<latexit sha1_base64=\"tEtInXKd9mqmi/oFctu/VjSe+v0=\">AAAB/nicbVDLSsNAFL2pr1pfUXHlZrAIdVMTESyuim5cuKhgH9CGMJlM26GTBzMToYaCv+LGhSJu/Q53/o2TNgttPTBwOOde7pnjxZxJZVnfRmFpeWV1rbhe2tjc2t4xd/daMkoEoU0S8Uh0PCwpZyFtKqY47cSC4sDjtO2NrjO//UCFZFF4r8YxdQI8CFmfEay05JoHvQCrIcEc3VYe3dS+9E9rkxPXLFtVawq0SOyclCFHwzW/en5EkoCGinAsZde2YuWkWChGOJ2UeomkMSYjPKBdTUMcUOmk0/gTdKwVH/UjoV+o0FT9vZHiQMpx4OnJLKyc9zLxP6+bqH7NSVkYJ4qGZHaon3CkIpR1gXwmKFF8rAkmgumsiAyxwETpxkq6BHv+y4ukdVa1rap9d16uX+V1FOEQjqACNlxAHW6gAU0gkMIzvMKb8WS8GO/Gx2y0YOQ7+/AHxucPaveUdw==</latexit>\n<latexit sha1_base64=\"dyCsZ/ny7rQzKcXztjElUtg2QPg=\">AAAB/3icbVDLSgMxFM3UV62vUcGNm2AR6qZORFRcFd24cFHBPqAdhkwmbUMzmSHJCHXswl9x40IRt/6GO//GTDsLrR4IHM65l3ty/JgzpR3nyyrMzS8sLhWXSyura+sb9uZWU0WJJLRBIh7Jto8V5UzQhmaa03YsKQ59Tlv+8DLzW3dUKhaJWz2KqRvivmA9RrA2kmfvdEOsBwRzeF2591J0Hhyik/GBZ5edqjMB/EtQTsogR92zP7tBRJKQCk04VqqDnFi7KZaaEU7HpW6iaIzJEPdpx1CBQ6rcdJJ/DPeNEsBeJM0TGk7UnxspDpUahb6ZzNKqWS8T//M6ie6duSkTcaKpINNDvYRDHcGsDBgwSYnmI0MwkcxkhWSAJSbaVFYyJaDZL/8lzaMqcqro5rhcu8jrKIJdsAcqAIFTUANXoA4agIAH8ARewKv1aD1bb9b7dLRg5Tvb4Besj2/eCZSw</latexit>\n<latexit sha1_base64=\"OPHM4ACsGr0VI7qMpDgoN+t2ICI=\">AAAB9XicbVDLSgMxFL3xWeur6tJNsAh1U2ZE0GXRjQsXFewD2rFk0kwbmskMSUapQ//DjQtF3Pov7vwbM+0stPVA4HDOvdyT48eCa+M432hpeWV1bb2wUdzc2t7ZLe3tN3WUKMoaNBKRavtEM8ElaxhuBGvHipHQF6zlj64yv/XAlOaRvDPjmHkhGUgecEqMle67ITHDQJERvqk8nfRKZafqTIEXiZuTMuSo90pf3X5Ek5BJQwXRuuM6sfFSogyngk2K3USzmNARGbCOpZKETHvpNPUEH1ulj4NI2ScNnqq/N1ISaj0OfTuZpdTzXib+53USE1x4KZdxYpiks0NBIrCJcFYB7nPFqBFjSwhV3GbFdEgUocYWVbQluPNfXiTN06rrVN3bs3LtMq+jAIdwBBVw4RxqcA11aAAFBc/wCm/oEb2gd/QxG11C+c4B/AH6/AGZEJHn</latexit>\nFigure   1:Matryoshka Representation Learningis\nadaptable   to   any   representation   learning   setup   and   begets\naMatryoshka Representationzby   optimizing   the   orig-\ninal   lossL(.)atO(log(d))chosen   representation   sizes.\nMatryoshka Representationcan be utilized effectively for adap-\ntive deployment across environments and downstream tasks.\nThe firstm-dimensions,m∈[d], of\ntheMatryoshka Representationis\nan information-rich low-dimensional\nvector, at no additional training cost,\nthat  is  as  accurate  as  an  indepen-\ndently trainedm-dimensional repre-\nsentation.    The  information  within\ntheMatryoshka Representationin-\ncreases with the dimensionality creat-\ning a coarse-to-fine grained represen-\ntation, all without significant training\nor  additional  deployment  overhead.\nMRLequips the representation vector\nwith the desired flexibility and multi-\nfidelity that can ensure a near-optimal\naccuracy-vs-compute trade-off. With\nthese advantages,MRLenables adap-\ntive  deployment  based  on  accuracy\nand compute constraints.\nTheMatryoshka Representationsimprove efficiency for large-scale classification and retrieval\nwithout any significant loss of accuracy. While there are potentially several applications of coarse-to-\nfineMatryoshka Representations, in this work we focus on two key building blocks of real-world\nML systems: large-scale classification and retrieval. For classification, we use adaptive cascades with\nthe variable-size representations from a model trained withMRL, significantly reducing the average\ndimension of embeddings needed to achieve a particular accuracy. For example, on ImageNet-1K,\nMRL+ adaptive classification results in up to a14×smaller representation size at the same accuracy\nas baselines (Section 4.2.1). Similarly, we useMRLin an adaptive retrieval system. Given a query,\nwe shortlist retrieval candidates using the first few dimensions of the query embedding, and then\nsuccessively use more dimensions to re-rank the retrieved set.  A simple implementation of this\napproach leads to128×theoretical (in terms of FLOPS) and14×wall-clock time speedups compared\nto a single-shot retrieval system that uses a standard embedding vector; note thatMRL’s retrieval\naccuracy is comparable to that of single-shot retrieval (Section 4.3.1). Finally, asMRLexplicitly\nlearns coarse-to-fine representation vectors, intuitively it should share more semantic information\namong its various dimensions (Figure 5). This is reflected in up to2%accuracy gains in long-tail\ncontinual learning settings while being as robust as the original embeddings. Furthermore, due to its\ncoarse-to-fine grained nature,MRLcan also be used as method to analyze hardness of classification\namong instances and information bottlenecks.\nWe make the following key contributions:\n1.We introduceMatryoshka Representation Learning(MRL) to obtain flexible representa-\ntions (Matryoshka Representations) for adaptive deployment (Section 3).\n2.  Up to14×faster yet accurate large-scale classification and retrieval usingMRL(Section 4).\n3.Seamless adaptation ofMRLacross modalities (vision - ResNet & ViT, vision + language -\nALIGN, language - BERT) and to web-scale data (ImageNet-1K/4K, JFT-300M and ALIGN data).\n4.  Further analysis ofMRL’s representations in the context of other downstream tasks (Section 5).\n2",
    "2    Related Work\nRepresentation Learning.Large-scale datasets like ImageNet [16,76] and JFT [85] enabled\nthe learning of general purpose representations for computer vision [4,98]. These representations\nare typically learned through supervised and un/self-supervised learning paradigms.  Supervised\npretraining [29,51,82] casts representation learning as a multi-class/label classification problem,\nwhile un/self-supervised learning learns representation via proxy tasks like instance classification [97]\nand reconstruction [31,63]. Recent advances [12,30] in contrastive learning [27] enabled learning\nfrom web-scale data [21] that powers large-capacity cross-modal models [18,46,71,101]. Similarly,\nnatural language applications are built [40] on large language models [8] that are pretrained [68,75]\nin a un/self-supervised fashion with masked language modelling [19] or autoregressive training [70].\nMatryoshka Representation Learning(MRL) is complementary to all these setups and can be\nadapted with minimal overhead (Section 3).MRLequips representations with multifidelity at no\nadditional cost which enables adaptive deployment based on the data and task (Section 4).\nEfficient Classification and Retrieval.Efficiency in classification and retrieval during inference\ncan be studied with respect to the high yet constant deep featurization costs or the search cost which\nscales with the size of the label space and data.  Efficient neural networks address the first issue\nthrough a variety of algorithms [25,54] and design choices [39,53,87].  However, with a strong\nfeaturizer, most of the issues with scale are due to the linear dependence on number of labels (L), size\nof the data (N) and representation size (d), stressing RAM, disk and processor all at the same time.\nThe sub-linear complexity dependence on number of labels has been well studied in context of\ncompute [3,43,69] and memory [20] using Approximate Nearest Neighbor Search (ANNS) [62] or\nleveraging the underlying hierarchy [17,55]. In case of the representation size, often dimensionality\nreduction [77,88], hashing techniques [14,52,78] and feature selection [64] help in alleviating\nselective aspects of theO(d)scaling at a cost of significant drops in accuracy. Lastly, most real-world\nsearch systems [11,15] are often powered by large-scale embedding based retrieval [10,66] that\nscales in cost with the ever increasing web-data. While categorization [89,99] clusters similar things\ntogether, it is imperative to be equipped with retrieval capabilities that can bring forward every\ninstance [7]. Approximate Nearest Neighbor Search (ANNS) [42] makes it feasible with efficient\nindexing [14] and traversal [5,6] to present the users with the most similar documents/images from\nthe database for a requested query.  Widely adopted HNSW [62] (O(dlog(N))) is as accurate as\nexact retrieval (O(dN)) at the cost of a graph-based index overhead for RAM and disk [44].\nMRLtackles   the   linear   dependence   on   embedding   size,d,    by   learning   multifidelity\nMatryoshka Representations.    Lower-dimensionalMatryoshka Representationsare  as  accu-\nrate  as  independently  trained  counterparts  without  the  multiple  expensive  forward  passes.\nMatryoshka Representationsprovide anintermediate abstractionbetween high-dimensional vec-\ntors and their efficient ANNS indices through the adaptive embeddings nested within the original\nrepresentation vector (Section 4). All other aforementioned efficiency techniques are complementary\nand can be readily applied to the learnedMatryoshka Representationsobtained fromMRL.\nSeveral works in efficient neural network literature [9,93,100] aim at packing neural networks of\nvarying capacity within the same larger network. However, the weights for each progressively smaller\nnetwork can be different and often require distinct forward passes to isolate the final representations.\nThis is detrimental for adaptive inference due to the need for re-encoding the entire retrieval database\nwith expensive sub-net forward passes of varying capacities. Several works [23,26,65,59] investigate\nthe notions of intrinsic dimensionality and redundancy of representations and objective spaces pointing\nto minimum description length [74]. Finally, ordered representations proposed by Rippel et al.[73]\nuse nested dropout in the context of autoencoders to learn nested representations.MRLdifferentiates\nitself in formulation by optimizing only forO(log(d))nesting dimensions instead ofO(d). Despite\nthis,MRLdiffuses information to intermediate dimensions interpolating between the optimized\nMatryoshka Representationsizes accurately (Figure 5); making web-scale feasible.\n3Matryoshka Representation Learning\nFord∈N, consider a setM ⊂[d]of representation sizes.  For a datapointxin the input do-\nmainX, our goal is to learn ad-dimensional representation vectorz∈R\nd\n.  For everym∈ M,\n3",
    "Matryoshka Representation Learning(MRL) enables each of the firstmdimensions of the em-\nbedding vector,z\n1:m\n∈R\nm\nto be independently capable of being a transferable and general purpose\nrepresentation of the datapointx.  We obtainzusing a deep neural networkF(·;θ\nF\n):X →R\nd\nparameterized by learnable weightsθ\nF\n, i.e.,z\n:\n=F(x;θ\nF\n). The multi-granularity is captured through\nthe set of the chosen dimensionsM, that contains less thanlog(d)elements, i.e.,|M|≤⌊log(d)⌋.\nThe usual setMconsists of consistent halving until the representation size hits a low information\nbottleneck. We discuss the design choices in Section 4 for each of the representation learning settings.\nFor the ease of exposition, we present the formulation for fully supervised representation learning\nvia multi-class classification.Matryoshka Representation Learningmodifies the typical setting\nto become a multi-scale representation learning problem on the same task. For example, we train\nResNet50 [29] on ImageNet-1K [76] which embeds a224×224pixel image into ad= 2048\nrepresentation vector and then passed through a linear classifier to make a prediction,ˆyamong the\nL= 1000labels. ForMRL, we chooseM={8,16,...,1024,2048}as the nesting dimensions.\nSuppose we are given a labelled datasetD={(x\n1\n,y\n1\n),...,(x\nN\n,y\nN\n)}wherex\ni\n∈ Xis an input\npoint andy\ni\n∈[L]is the label ofx\ni\nfor alli∈[N].MRLoptimizes the multi-class classification loss\nfor each of the nested dimensionm∈Musing standard empirical risk minimization using a separate\nlinear classifier, parameterized byW\n(m)\n∈R\nL×m\n. All the losses are aggregated after scaling with\ntheir relative importance(c\nm\n≥0)\nm∈M\nrespectively. That is, we solve\nmin\n{\nW\n(m)\n}\nm∈M\n, θ\nF\n1\nN\nX\ni∈[N]\nX\nm∈M\nc\nm\n·L\n\u0010\nW\n(m)\n·F(x\ni\n;θ\nF\n)\n1:m\n;y\ni\n\u0011\n,(1)\nwhereL:R\nL\n×[L]→R\n+\nis the multi-class softmax cross-entropy loss function. This is a standard\noptimization problem that can be solved using sub-gradient descent methods. We set all the impor-\ntance scales,c\nm\n= 1for allm∈ M; see Section 5 for ablations.  Lastly, despite only optimizing\nforO(log(d))nested dimensions,MRLresults in accurate representations,  that interpolate,  for\ndimensions that fall between the chosen granularity of the representations (Section 4.2).\nWe call this formulation asMatryoshka Representation Learning(MRL). A natural way to make\nthis efficient is through weight-tying across all the linear classifiers, i.e., by definingW\n(m)\n=W\n1:m\nfor a set of common weightsW∈R\nL×d\n.  This would reduce the memory cost due to the linear\nclassifiers by almost half, which would be crucial in cases of extremely large output spaces [89,99].\nThis variant is calledEfficientMatryoshka Representation Learning(MRL–E).  Refer to Alg 1\nand Alg 2 in Appendix A for the building blocks ofMatryoshka Representation Learning(MRL).\nAdaptation to Learning Frameworks.MRLcan be adapted seamlessly to most representation\nlearning frameworks at web-scale with minimal modifications (Section 4.1). For example,MRL’s\nadaptation to masked language modelling reduces toMRL–Edue to the weight-tying between the\ninput embedding matrix and the linear classifier. For contrastive learning, both in context of vision &\nvision + language,MRLis applied to both the embeddings that are being contrasted with each other.\nThe presence of normalization on the representation needs to be handled independently for each of\nthe nesting dimension for best results (see Appendix C for more details).\n4    Applications\nIn this section, we discussMatryoshka Representation Learning(MRL) for a diverse set of ap-\nplications along with an extensive evaluation of the learned multifidelity representations. Further,\nwe showcase the downstream applications of the learnedMatryoshka Representationsfor flexible\nlarge-scale deployment through (a) Adaptive Classification (AC) and (b) Adaptive Retrieval (AR).\n4.1    Representation Learning\nWe adaptMatryoshka Representation Learning(MRL) to various representation learning setups\n(a) Supervised learning for vision:  ResNet50 [29] on ImageNet-1K [76] and ViT-B/16 [22] on\nJFT-300M [85], (b) Contrastive learning for vision + language: ALIGN model with ViT-B/16 vision\nencoder and BERT language encoder on ALIGN data [46] and (c) Masked language modelling:\nBERT [19] on English Wikipedia and BooksCorpus [102]. Please refer to Appendices B and C for\ndetails regarding the model architectures, datasets and training specifics.\n4",
    "8\n163264\n128256512\n10242048\nRepresentation Size\n40\n50\n60\n70\n80\nTop-1 Accuracy (%)\nMRL\nMRL-E\nFF\nSVD\nSlim. Net\nRand. LP\nFigure 2: ImageNet-1K linear classification ac-\ncuracy of ResNet50 models.MRLis as accurate\nas the independently trained FF models for every\nrepresentation size.\n8\n163264\n128256512\n10242048\nRepresentation Size\n40\n50\n60\n70\n1-NN Accuracy (%)\nMRL\nMRL-E\nFF\nSVD\nSlim. Net\nRand. FS\nFigure  3:    ImageNet-1K  1-NN  accuracy  of\nResNet50 models measuring the representation\nquality for downstream task.MRLoutperforms\nall the baselines across all representation sizes.\nWe do not search for best hyper-parameters for allMRLexperiments but use the same hyper-\nparameters as the independently trained baselines.  ResNet50 outputs a2048-dimensional repre-\nsentation while ViT-B/16 and BERT-Base output768-dimensional embeddings for each data point.\nWe useM={8,16,32,64,128,256,512,1024,2048}andM={12,24,48,96,192,384,768}as\nthe explicitly optimized nested dimensions respectively. Lastly, we extensively compare theMRL\nandMRL–Emodels to independently trained low-dimensional (fixed feature) representations (FF),\ndimensionality reduction (SVD), sub-net method (slimmable networks [100]) and randomly selected\nfeatures of the highest capacity FF model.\nIn section 4.2, we evaluate the quality and capacity of the learned representations through linear\nclassification/probe (LP) and 1-nearest neighbour (1-NN) accuracy. Experiments show thatMRL\nmodels remove the dependence on|M|resource-intensive independently trained models for the\ncoarse-to-fine representations while being as accurate. Lastly, we show that despite optimizing only\nfor|M|dimensions,MRLmodels diffuse the information, in an interpolative fashion, across all the\nddimensions providing the finest granularity required for adaptive deployment.\n4.2    Classification\nFigure 2 compares the linear classification accuracy of ResNet50 models trained and evaluated\non ImageNet-1K. ResNet50–MRLmodel is at least as accurate as each FF model at every rep-\nresentation  size  inMwhileMRL–Eis  within1%starting  from16-dim.   Similarly,  Figure  3\nshowcases the comparison of learned representation quality through 1-NN accuracy on ImageNet-1K\n(trainset with 1.3M samples as the database and validation set with 50K samples as the queries).\nMatryoshka Representationsare up to2%more accurate than their fixed-feature counterparts for\nthe lower-dimensions while being as accurate elsewhere. 1-NN accuracy is an excellent proxy, at no\nadditional training cost, to gauge the utility of learned representations in the downstream tasks.\nWe also evaluate the quality of the representations from training ViT-B/16 on JFT-300M alongside the\nViT-B/16 vision encoder of the ALIGN model – two web-scale setups. Due to the expensive nature of\nthese experiments, we only train the highest capacity fixed feature model and choose random features\nfor evaluation in lower-dimensions. Web-scale is a compelling setting forMRLdue to its relatively\ninexpensive training overhead while providing multifidelity representations for downstream tasks.\nFigure 4, evaluated with 1-NN on ImageNet-1K, shows that all theMRLmodels for JFT and ALIGN\nare highly accurate while providing an excellent cost-vs-accuracy trade-off at lower-dimensions.\nThese experiments show thatMRLseamlessly scales to large-scale models and web-scale datasets\nwhile providing the otherwise prohibitively expensive multi-granularity in the process.  We also\nhave similar observations when pretraining BERT; please see Appendix D.2 for more details.  Our\nexperiments also show that post-hoc compression (SVD), linear probe on random features, and\nsub-net style slimmable networks drastically lose accuracy compared toMRLas the representation\nsize decreases.  Finally, Figure 5 shows that, whileMRLexplicitly optimizesO(log(d))nested\nrepresentations – removing theO(d)dependence [73] –, the coarse-to-fine grained information is\ninterpolated across allddimensions providing highest flexibility for adaptive deployment.\n5",
    "12244896\n192384768\nRepresentation Size\n20\n40\n60\n80\n1-NN Accuracy (%)\nJFT MRL\nALIGN MRL\nJFT MRL-E\nJFT Rand.\nALIGN Rand.\nFigure  4:  ImageNet-1K  1-NN  accuracy  for\nViT-B/16 models trained on JFT-300M & as\npart  of  ALIGN.MRLscales  seamlessly  to\nweb-scale with minimal training overhead.\n8\n163264\n128256512\n10242048\nRepresentation Size\n50\n60\n70\n1-NN Accuracy (%)\nViT-ALIGN\nViT-JFT\nRN50-IN1K\nViT-ALIGN-Int\nViT-JFT-Int\nRN50-IN1K-Int\nFigure  5:   Despite  optimizingMRLonly  for\nO(log(d))dimensions  for  ResNet50  and  ViT-\nB/16 models; the accuracy in the intermediate\ndimensions shows interpolating behaviour.\n4.2.1    Adaptive Classification\nThe flexibility and coarse-to-fine granularity withinMatryoshka Representationsallows model\ncascades [90] for Adaptive Classification (AC) [28]. Unlike standard model cascades [95],MRLdoes\nnot require multiple expensive neural network forward passes. To perform AC with anMRLtrained\nmodel, we learn thresholds on the maximum softmax probability [33] for each nested classifier on\na holdout validation set.  We then use these thresholds to decide when to transition to the higher\ndimensional representation (e.g8→16→32) of theMRLmodel.  Appendix D.1 discusses the\nimplementation and learning of thresholds for cascades used for adaptive classification in detail.\nFigure 6 shows the comparison between cascadedMRLrepresentations (MRL–AC) and indepen-\ndently trained fixed feature (FF) models on ImageNet-1K with ResNet50. We computed the expected\nrepresentation size forMRL–AC based on the final dimensionality used in the cascade. We observed\nthatMRL–AC was as accurate,76.30%, as a 512-dimensional FF model but required an expected\ndimensionality of∼37while being only0.8%lower than the 2048-dimensional FF baseline. Note\nthat allMRL–AC models are significantly more accurate than the FF baselines at comparable repre-\nsentation sizes.MRL–AC uses up to∼14×smaller representation size for the same accuracy which\naffords computational efficiency as the label space grows [89]. Lastly, our results withMRL–AC\nindicate that instances and classes vary in difficulty which we analyze in Section 5 and Appendix J.\n4.3    Retrieval\nNearest neighbour search with learned representations powers a plethora of retrieval and search appli-\ncations [15,91,11,66]. In this section, we discuss the image retrieval performance of the pretrained\nResNet50 models (Section 4.1) on two large-scale datasets ImageNet-1K [76] and ImageNet-4K.\nImageNet-1K has a database size of∼1.3M and a query set of 50K samples uniformly spanning\n1000 classes. We also introduce ImageNet-4K which has a database size of∼4.2M and query set of\n∼200K samples uniformly spanning 4202 classes (see Appendix B for details). A single forward pass\non ResNet50 costs 4 GFLOPs while exact retrieval costs 2.6 GFLOPs per query for ImageNet-1K.\nAlthough retrieval overhead is40%of the total cost, retrieval cost grows linearly with the size of\nthe database.  ImageNet-4K presents a retrieval benchmark where the exact search cost becomes\nthe computational bottleneck (8.6GFLOPs per query). In both these settings, the memory and disk\nusage are also often bottlenecked by the large databases. However, in most real-world applications\nexact search,O(dN), is replaced with an approximate nearest neighbor search (ANNS) method like\nHNSW [62],O(dlog(N)), with minimal accuracy drop at the cost of additional memory overhead.\nThe goal of image retrieval is to find images that belong to the same class as the query using\nrepresentations obtained from a pretrained model. In this section, we compare retrieval performance\nusing mean Average Precision @ 10 (mAP@10) which comprehensively captures the setup of\nrelevant image retrieval at scale.  We measure the cost per query using exact search in MFLOPs.\nAll embeddings are unit normalized and retrieved using the L2 distance metric. Lastly, we report\n6",
    "14x smaller \nrepresentation size\nFigure  6:    Adaptive  classification  onMRL\nResNet50 using cascades results in14×smaller\nrepresentation size for the same level of accuracy\non ImageNet-1K (∼37vs512dims for76.3%).\n8\n163264\n128256512\n10242048\nRepresentation Size\n40\n45\n50\n55\n60\n65\nmAP@10 (%)\nMRL\nMRL-E\nFF\nSVD\nSlim. Net\nRand. FS\nFigure  7:   mAP@10for  Image  Retrieval  on\nImageNet-1K with ResNet50.MRLconsistently\nproduces better retrieval performance over the\nbaselines across all the representation sizes.\nan extensive set of metrics spanning mAP@kand P@kfork={10,25,50,100}and real-world\nwall-clock times for exact search and HNSW. See Appendices E and F for more details.\nFigure 7 compares the mAP@10performance of ResNet50 representations on ImageNet-1K across\ndimensionalities forMRL,MRL–E, FF, slimmable networks along with post-hoc compression\nof vectors using SVD and random feature selection.Matryoshka Representationsare often the\nmost accurate while being up to3%better than the FF baselines. Similar to classification, post-hoc\ncompression and slimmable network baselines suffer from significant drop-off in retrieval mAP@10\nwith≤256dimensions. Appendix E discusses the mAP@10of the same models on ImageNet-4K.\nMRLmodels  are  capable  of  performing  accurate  retrieval  at  various  granularities  without  the\nadditional  expense  of  multiple  model  forward  passes  for  the  web-scale  databases.   FF  models\nalso generate independent databases which become prohibitively expense to store and switch in\nbetween.Matryoshka Representationsenable adaptive retrieval (AR) which alleviates the need\nto use full-capacity representations,d= 2048, for all data and downstream tasks.  Lastly, all the\nvector compression techniques [60,45] used as part of the ANNS pipelines are complimentary to\nMatryoshka Representationsand can further improve the efficiency-vs-accuracy trade-off.\n4.3.1    Adaptive Retrieval\nWe benchmarkMRLin the adaptive retrieval setting (AR) [50]. For a given query image, we obtained\na shortlist,K= 200, of images from the database using a lower-dimensional representation, e.g.\nD\ns\n= 16followed by reranking with a higher capacity representation, e.g.D\nr\n= 2048. In real-world\nscenarios where top ranking performance is the key objective, measured with mAP@kwhere k\ncovers a limited yet crucial real-estate, AR provides significant compute and memory gains over\nsingle-shot retrieval with representations of fixed dimensionality. Finally, the most expensive part\nof AR, as with any retrieval pipeline, is the nearest neighbour search for shortlisting. For example,\neven naive re-ranking of 200 images with 2048 dimensions only costs 400 KFLOPs. While we report\nexact search cost per query for all AR experiments, the shortlisting component of the pipeline can\nbe sped-up using ANNS (HNSW). Appendix I has a detailed discussion on compute cost for exact\nsearch, memory overhead of HNSW indices and wall-clock times for both implementations. We note\nthat using HNSW with 32 neighbours for shortlisting does not decrease accuracy during retrieval.\nFigure    8    showcases    the    compute-vs-accuracy    trade-off    for    adaptive    retrieval    using\nMatryoshka Representationscompared  to  single-shot  using  fixed  features  with  ResNet50\non ImageNet-1K. We observed that all AR settings lied above the Pareto frontier of single-shot\nretrieval with varying representation sizes.  In particular for ImageNet-1K, we show that the AR\nmodel withD\ns\n= 16&D\nr\n= 2048is as accurate as single-shot retrieval withd= 2048while being\n∼128×more efficient in theory and∼14×faster in practice (compared using HNSW on the same\nhardware).  We show similar trends with ImageNet-4K, but note that we requireD\ns\n= 64given\nthe increased difficulty of the dataset. This results in∼32×and∼6×theoretical and in-practice\nspeedups respectively. Lastly, whileK= 200works well for our adaptive retrieval experiments, we\nablated over the shortlist sizekin Appendix K.2 and found that the accuracy gains stopped after a\n7",
    "128x\ttheoretical\tspeed-up\n14x\treal-world\tspeed-up\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\nD\ns\nD\nr\n6x\treal-world\tspeed-up\n32x\ttheoretical\tspeed-up\n(a) ImageNet-1K(b) ImageNet-4K\nFigure 8:  The trade-off between mAP@10vs MFLOPs/Query for Adaptive Retrieval (AR) on\nImageNet-1K (left) and ImageNet-4K (right). Every combination ofD\ns\n&D\nr\nfalls above the Pareto\nline (orange dots) of single-shot retrieval with a fixed representation size while having configurations\nthat are as accurate while being up to14×faster in real-world deployment. Funnel retrieval is almost\nas accurate as the baseline while alleviating some of the parameter choices of Adaptive Retrieval.\npoint, further strengthening the use-case forMatryoshka Representation Learningand adaptive\nretrieval.\nEven with adaptive retrieval, it is hard to determine the choice ofD\ns\n&D\nr\n. In order to alleviate this\nissue to an extent, we proposeFunnel Retrieval, a consistent cascade for adaptive retrieval. Funnel\nthins out the initial shortlist by a repeated re-ranking and shortlisting with a series of increasing\ncapacity representations.  Funnel halves the shortlist size and doubles the representation size at\nevery step of re-ranking. For example on ImageNet-1K, a funnel with the shortlist progression of\n200→100→50→25→10with the cascade of16→32→64→128→256→2048\nrepresentation sizes withinMatryoshka Representationis as accurate as the single-shot 2048-dim\nretrieval while being∼128×more efficient theoretically (see Appendix F for more results).  All\nthese results showcase the potential ofMRLand AR for large-scale multi-stage search systems [15].\n5    Further Analysis and Ablations\nRobustness.We evaluate the robustness of theMRLmodels trained on ImageNet-1K on out-of-\ndomain datasets, ImageNetV2/R/A/Sketch [72,34,35,94], and compare them to the FF baselines.\nTable 17 in Appendix H demonstrates thatMatryoshka Representationsfor classification are at\nleast as robust as the original representation while improving the performance on ImageNet-A by\n0.6%– a20%relative improvement. We also study the robustness in the context of retrieval by using\nImageNetV2 as the query set for ImageNet-1K database. Table 9 in Appendix E shows thatMRL\nmodels have more robust retrieval compared to the FF baselines by having up to3%higher mAP@10\nperformance. This observation also suggests the need for further investigation into robustness using\nnearest neighbour based classification and retrieval instead of the standard linear probing setup. We\nalso find that the zero-shot robustness of ALIGN-MRL(Table 18 in Appendix H) agrees with the\nobservations made by Wortsman et al.[96]. Lastly, Table 6 in Appendix D.2 shows thatMRLalso\nimproves the cosine similarity span between positive and random image-text pairs.\nFew-shot and Long-tail Learning.We exhaustively evaluated few-shot learning onMRLmodels\nusing nearest class mean [79].  Table 15 in Appendix G shows that that representations learned\nthroughMRLperform comparably to FF representations across varying shots and number of classes.\nMatryoshka Representationsrealize a unique pattern while evaluating on FLUID [92], a long-tail\nsequential learning framework. We observed thatMRLprovides up to2%accuracy higher on novel\nclasses in the tail of the distribution, without sacrificing accuracy on other classes (Table 16 in\nAppendix G). Additionally we find the accuracy between low-dimensional and high-dimensional\nrepresentations is marginal for pretrain classes. We hypothesize that the higher-dimensional represen-\ntations are required to differentiate the classes when few training examples of each are known. This\nresults provides further evidence that different tasks require varying capacity based on their difficulty.\nDisagreement across Dimensions.The information packing inMatryoshka Representations\noften results in gradual increase of accuracy with increase in capacity. However, we observed that\n8",
    "(a)\n(b)\n(c)\nFigure 9:  Grad-CAM [80] progression of predictions inMRLmodel across8,16,32and2048\ndimensions. (a)8-dimensional representation confuses due to presence of other relevant objects (with\na larger field of view) in the scene and predicts “shower cap” ; (b)8-dim model confuses within\nthe same super-class of “boa” ; (c)8and16-dim models incorrectly focus on the eyes of the doll\n(\"sunglasses\") and not the \"sweatshirt\" which is correctly in focus at higher dimensions;MRLfails\ngracefully in these scenarios and shows potential use cases of disagreement across dimensions.\nthis trend was not ubiquitous and certain instances and classes were more accurate when evaluated\nwith lower-dimensions (Figure 12 in Appendix J). With perfect routing of instances to appropriate\ndimension,MRLcan gain up to4.6%classification accuracy. At the same time, the low-dimensional\nmodels are less accurate either due to confusion within the same superclass [24] of the ImageNet\nhierarchy or presence of multiple objects of interest.  Figure 9 showcases 2 such examples for8-\ndimensional representation. These results along with Appendix J put forward the potential forMRL\nto be a systematic framework for analyzing the utility and efficiency of information bottlenecks.\nSuperclass Accuracy.As the information bottleneck becomes smaller, the overall accuracy on\nfine-grained classes decreases rapidly (Figure 3). However, the drop-off is not as significant when\nevaluated at a superclass level (Table 24 in Appendix J). Figure 10 presents that this phenomenon\n8\n163264\n128256512\n10242048\nRepresentation Size\n84\n86\n88\n90\nTop-1 Accuracy (%)\nMRL\nFF\nFigure 10: 31-way ImageNet-1K superclass clas-\nsification across representation size forMRL&\nFF models showing the capture of underlying\nhierarchy through tight information bottlenecks.\n8\n163264\n128256512\n10242048\nRepresentation Size\n65\n70\n75\n80\n85\n90\n95\nTop-1 Accuracy (%)\nmeasuring device\nbuilding\ngarment\ntool\nnourishment\nprotective covering\nvessel\noscine\nFigure  11:    Diverse  per-superclass  accuracy\ntrends across representation sizes for ResNet50-\nMRLon ImageNet-1K.\n9",
    "occurs with bothMRLand FF models;MRLis more accurate across dimensions. This shows that\ntight information bottlenecks while not highly accurate for fine-grained classification, do capture\nrequired semantic information for coarser classification that could be leveraged for adaptive routing\nfor retrieval and classification. Mutifidelity ofMatryoshka Representationnaturally captures the\nunderlying hierarchy of the class labels with one single model.  Lastly, Figure 11 showcases the\naccuracy trends per superclass withMRL.  The utility of additional dimensions in distinguishing\na  class  from  others  within  the  same  superclass  is  evident  for  “garment”  which  has  up  to  11%\nimprovement for 8→16 dimensional representation transition. We also observed that superclasses\nsuch as “oscine (songbird)” had a clear visual distinction between the object and background and\nthus predictions using 8 dimensions also led to a good inter-class separability within the superclass.\n5.1    Ablations\nTable 26 in Appendix K presents thatMatryoshka Representationscan be enabled within off-the-\nshelf pretrained models with inexpensive partial finetuning thus paving a way for ubiquitous adoption\nofMRL.  At the same time, Table 27 in Appendix C indicates that with optimal weighting of the\nnested losses we could improve accuracy of lower-dimensions representations without accuracy\nloss. Tables 28 and 29 in Appendix C ablate over the choice of initial granularity and spacing of the\ngranularites. Table 28 reaffirms the design choice to shun extremely low dimensions that have poor\nclassification accuracy as initial granularity forMRLwhile Table 29 confirms the effectiveness of\nlogarthmic granularity spacing inspired from the behaviour of accuracy saturation across dimensions\nover uniform. Lastly, Tables 30 and 31 in Appendix K.2 show that the retrieval performance saturates\nafter a certain shortlist dimension and length depending on the complexity of the dataset.\n6    Discussion and Conclusions\nThe results in Section 5.1 reveal interesting weaknesses ofMRLthat would be logical directions\nfor future work.  (1) Optimizing the weightings of the nested losses to obtain a Pareto optimal\naccuracy-vs-efficiency trade-off – a potential solution could emerge from adaptive loss balancing\naspects of anytime neural networks [41].  (2) Using different losses at various fidelities aimed at\nsolving a specific aspect of adaptive deployment – e.g. high recall for8-dimension and robustness\nfor2048-dimension.  (3) Learning a search data-structure, like differentiable k-d tree, on top of\nMatryoshka Representationto enable dataset and representation aware retrieval. (4) Finally, the\njoint optimization of multi-objectiveMRLcombined with end-to-end learnable search data-structure\nto have data-driven adaptive large-scale retrieval for web-scale search applications.\nIn conclusion, we presentedMatryoshka Representation Learning(MRL), a flexible represen-\ntation learning approach that encodes information at multiple granularities in a single embedding\nvector.  This enables theMRLto adapt to a downstream task’s statistical complexity as well as\nthe available compute resources.  We demonstrate thatMRLcan be used for large-scale adaptive\nclassification as well as adaptive retrieval. On standard benchmarks,MRLmatches the accuracy of\nthe fixed-feature baseline despite using14×smaller representation size on average. Furthermore, the\nMatryoshka Representationbased adaptive shortlisting and re-ranking system ensures comparable\nmAP@10to the baseline while being128×cheaper in FLOPs and14×faster in wall-clock time.\nFinally, most of the efficiency techniques for model inference and vector search are complementary\ntoMRLfurther assisting in deployment at the compute-extreme environments.\nAcknowledgments\nWe are grateful to Srinadh Bhojanapalli, Lovish Madaan, Raghav Somani, Ludwig Schmidt, and\nVenkata Sailesh Sanampudi for helpful discussions and feedback. Aditya Kusupati also thanks Tom\nDuerig and Rahul Sukthankar for their support. Part of the paper’s large-scale experimentation is\nsupported through a research GCP credit award from Google Cloud and Google Research. Gantavya\nBhatt is supported in part by the CONIX Research Center, one of six centers in JUMP, a Semicon-\nductor Research Corporation (SRC) program sponsored by DARPA. Sham Kakade acknowledges\nfunding from the NSF award CCF-1703574 and ONR N00014-22-1-2377. Ali Farhadi acknowledges\nfunding from the NSF awards IIS 1652052, IIS 17303166, DARPA N66001-19-2-4031, DARPA\nW911NF-15-1-0543 and gifts from Allen Institute for Artificial Intelligence.\n10",
    "References\n[1]M. Abadi, A. Agarwal, P. Barham, E. Brevdo, Z. Chen, C. Citro, G. S. Corrado, A. Davis,\nJ. Dean, M. Devin, S. Ghemawat, I. Goodfellow, A. Harp, G. Irving, M. Isard, Y. Jia, R. Joze-\nfowicz,  L. Kaiser,  M. Kudlur,  J. Levenberg,  D. Mané,  R. Monga,  S. Moore,  D. Murray,\nC. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever, K. Talwar, P. Tucker, V. Vanhoucke,\nV. Vasudevan,  F. Viégas,  O. Vinyals,  P.  Warden,  M. Wattenberg,  M.  Wicke,  Y. Yu,  and\nX. Zheng. TensorFlow: Large-scale machine learning on heterogeneous systems, 2015. URL\nhttps://www.tensorflow.org/. Software available from tensorflow.org.\n[2]A. Barbu, D. Mayo, J. Alverio, W. Luo, C. Wang, D. Gutfreund, J. Tenenbaum, and B. Katz.\nObjectnet: A large-scale bias-controlled dataset for pushing the limits of object recognition\nmodels.Advances in neural information processing systems, 32, 2019.\n[3]S. Bengio, J. Weston, and D. Grangier.  Label embedding trees for large multi-class tasks.\nAdvances in Neural Information Processing Systems, 23, 2010.\n[4]Y. Bengio.   Deep learning of representations for unsupervised and transfer learning.   In\nProceedings of ICML workshop on unsupervised and transfer learning, pages 17–36. JMLR\nWorkshop and Conference Proceedings, 2012.\n[5]\nJ. L. Bentley.   K-d trees for semidynamic point sets.   InProceedings of the sixth annual\nsymposium on Computational geometry, pages 187–197, 1990.\n[6]\nA. Beygelzimer, S. Kakade, and J. Langford. Cover trees for nearest neighbor. InProceedings\nof the 23rd international conference on Machine learning, pages 97–104, 2006.\n[7]S. Brin and L. Page. The anatomy of a large-scale hypertextual web search engine.Computer\nnetworks and ISDN systems, 30(1-7):107–117, 1998.\n[8]T. Brown,  B. Mann,  N. Ryder,  M. Subbiah,  J. D. Kaplan,  P. Dhariwal,  A. Neelakantan,\nP. Shyam, G. Sastry, A. Askell, et al.  Language models are few-shot learners.Advances in\nneural information processing systems, 33:1877–1901, 2020.\n[9]H. Cai, C. Gan, T. Wang, Z. Zhang, and S. Han. Once-for-all: Train one network and specialize\nit for efficient deployment.arXiv preprint arXiv:1908.09791, 2019.\n[10]W.-C. Chang, F. X. Yu, Y.-W. Chang, Y. Yang, and S. Kumar. Pre-training tasks for embedding-\nbased large-scale retrieval.arXiv preprint arXiv:2002.03932, 2020.\n[11]W.-C.  Chang,  D.  Jiang,  H.-F.  Yu,  C.  H.  Teo,  J.  Zhang,  K.  Zhong,  K.  Kolluri,  Q.  Hu,\nN. Shandilya, V. Ievgrafov, et al.  Extreme multi-label learning for semantic matching in\nproduct search. InProceedings of the 27th ACM SIGKDD Conference on Knowledge Discov-\nery & Data Mining, pages 2643–2651, 2021.\n[12]T. Chen, S. Kornblith, M. Norouzi, and G. Hinton. A simple framework for contrastive learning\nof visual representations. InInternational conference on machine learning, pages 1597–1607.\nPMLR, 2020.\n[13]\nY. Chen, Z. Liu, H. Xu, T. Darrell, and X. Wang.  Meta-baseline:  exploring simple meta-\nlearning for few-shot learning. InProceedings of the IEEE/CVF International Conference on\nComputer Vision, pages 9062–9071, 2021.\n[14]M. Datar, N. Immorlica, P. Indyk, and V. S. Mirrokni. Locality-sensitive hashing scheme based\non p-stable distributions. InProceedings of the twentieth annual symposium on Computational\ngeometry, pages 253–262, 2004.\n[15]J. Dean. Challenges in building large-scale information retrieval systems. InKeynote of the\n2nd ACM International Conference on Web Search and Data Mining (WSDM), volume 10,\n2009.\n[16]\nJ. Deng,  W. Dong,  R. Socher,  L.-J. Li,  K. Li,  and L. Fei-Fei.   Imagenet:  A large-scale\nhierarchical  image  database.   In2009  IEEE  conference  on  computer  vision  and  pattern\nrecognition, pages 248–255. Ieee, 2009.\n11",
    "[17]J. Deng, A. C. Berg, and L. Fei-Fei.  Hierarchical semantic indexing for large scale image\nretrieval. InCVPR 2011, pages 785–792. IEEE, 2011.\n[18]\nK. Desai and J. Johnson. Virtex: Learning visual representations from textual annotations. In\nProceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages\n11162–11173, 2021.\n[19]J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova. Bert: Pre-training of deep bidirectional\ntransformers for language understanding.arXiv preprint arXiv:1810.04805, 2018.\n[20]\nT. G. Dietterich and G. Bakiri.  Solving multiclass learning problems via error-correcting\noutput codes.Journal of artificial intelligence research, 2:263–286, 1994.\n[21]S. K. Divvala, A. Farhadi, and C. Guestrin.  Learning everything about anything:  Webly-\nsupervised visual concept learning.  InProceedings of the IEEE Conference on Computer\nVision and Pattern Recognition, pages 3270–3277, 2014.\n[22]A. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. De-\nhghani, M. Minderer, G. Heigold, S. Gelly, et al. An image is worth 16x16 words: Transformers\nfor image recognition at scale.arXiv preprint arXiv:2010.11929, 2020.\n[23]J. J. Engelsma, A. K. Jain, and V. N. Boddeti. Hers: Homomorphically encrypted representation\nsearch.IEEE Transactions on Biometrics, Behavior, and Identity Science, 4(3):349–360, 2022.\n[24]L. Engstrom, A. Ilyas, H. Salman, S. Santurkar, and D. Tsipras. Robustness (python library),\n2019. URLhttps://github.com/MadryLab/robustness.\n[25]\nA.  Gholami,  S.  Kim,  Z.  Dong,  Z.  Yao,  M.  W.  Mahoney,  and  K.  Keutzer.   A  survey  of\nquantization methods for efficient neural network inference.arXiv preprint arXiv:2103.13630,\n2021.\n[26]S. Gong, V. N. Boddeti, and A. K. Jain. On the intrinsic dimensionality of image representations.\nInProceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition,\npages 3987–3996, 2019.\n[27]M. Gutmann and A. Hyvärinen. Noise-contrastive estimation: A new estimation principle for\nunnormalized statistical models.  InProceedings of the thirteenth international conference\non artificial intelligence and statistics, pages 297–304. JMLR Workshop and Conference\nProceedings, 2010.\n[28]M. G. Harris and C. D. Giachritsis.   Coarse-grained information dominates fine-grained\ninformation in judgments of time-to-contact from retinal flow.Vision research, 40(6):601–611,\n2000.\n[29]K. He, X. Zhang, S. Ren, and J. Sun.   Deep residual learning for image recognition.   In\nProceedings of the IEEE conference on computer vision and pattern recognition, pages 770–\n778, 2016.\n[30]K. He, H. Fan, Y. Wu, S. Xie, and R. Girshick. Momentum contrast for unsupervised visual\nrepresentation learning. InProceedings of the IEEE/CVF conference on computer vision and\npattern recognition, pages 9729–9738, 2020.\n[31]K. He, X. Chen, S. Xie, Y. Li, P. Dollár, and R. Girshick. Masked autoencoders are scalable\nvision learners.arXiv preprint arXiv:2111.06377, 2021.\n[32]J. Hegdé. Time course of visual perception: coarse-to-fine processing and beyond.Progress in\nneurobiology, 84(4):405–439, 2008.\n[33]D. Hendrycks and K. Gimpel. A baseline for detecting misclassified and out-of-distribution\nexamples in neural networks.arXiv preprint arXiv:1610.02136, 2016.\n[34]D. Hendrycks,  S. Basart,  N. Mu,  S. Kadavath,  F. Wang,  E. Dorundo,  R. Desai,  T. Zhu,\nS. Parajuli,  M. Guo,  et al.   The many faces of robustness:  A critical analysis of out-of-\ndistribution generalization.  InProceedings of the IEEE/CVF International Conference on\nComputer Vision, pages 8340–8349, 2021.\n12",
    "[35]D. Hendrycks, K. Zhao, S. Basart, J. Steinhardt, and D. Song. Natural adversarial examples.\nInProceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition,\npages 15262–15271, 2021.\n[36]\nS. Hooker, A. Courville, G. Clark, Y. Dauphin, and A. Frome.  What do compressed deep\nneural networks forget?arXiv preprint arXiv:1911.05248, 2019.\n[37]S. Hooker, N. Moorosi, G. Clark, S. Bengio, and E. Denton. Characterising bias in compressed\nmodels.arXiv preprint arXiv:2010.03058, 2020.\n[38]H. Hotelling. Analysis of a complex of statistical variables into principal components.Journal\nof educational psychology, 24(6):417, 1933.\n[39]\nA. G. Howard, M. Zhu, B. Chen, D. Kalenichenko, W. Wang, T. Weyand, M. Andreetto, and\nH. Adam. Mobilenets: Efficient convolutional neural networks for mobile vision applications.\narXiv preprint arXiv:1704.04861, 2017.\n[40]J. Howard and S. Ruder. Universal language model fine-tuning for text classification.arXiv\npreprint arXiv:1801.06146, 2018.\n[41]H. Hu, D. Dey, M. Hebert, and J. A. Bagnell. Learning anytime predictions in neural networks\nvia adaptive loss balancing. InProceedings of the AAAI Conference on Artificial Intelligence,\nvolume 33, pages 3812–3821, 2019.\n[42]\nP. Indyk and R. Motwani.   Approximate nearest neighbors:  towards removing the curse\nof dimensionality.   InProceedings of the thirtieth annual ACM symposium on Theory of\ncomputing, pages 604–613, 1998.\n[43]H. Jain, V. Balasubramanian, B. Chunduri, and M. Varma.  Slice:  Scalable linear extreme\nclassifiers trained on 100 million labels for related searches.  InProceedings of the Twelfth\nACM International Conference on Web Search and Data Mining, pages 528–536, 2019.\n[44]\nS. Jayaram Subramanya, F. Devvrit, H. V. Simhadri, R. Krishnawamy, and R. Kadekodi.\nDiskann: Fast accurate billion-point nearest neighbor search on a single node.Advances in\nNeural Information Processing Systems, 32, 2019.\n[45]\nH. Jegou, M. Douze, and C. Schmid. Product quantization for nearest neighbor search.IEEE\ntransactions on pattern analysis and machine intelligence, 33(1):117–128, 2010.\n[46]C. Jia, Y. Yang, Y. Xia, Y.-T. Chen, Z. Parekh, H. Pham, Q. Le, Y.-H. Sung, Z. Li, and T. Duerig.\nScaling up visual and vision-language representation learning with noisy text supervision. In\nInternational Conference on Machine Learning, pages 4904–4916. PMLR, 2021.\n[47]J. Johnson,  M. Douze,  and H. Jégou.   Billion-scale similarity search with GPUs.IEEE\nTransactions on Big Data, 7(3):535–547, 2019.\n[48]\nW. B. Johnson.  Extensions of lipschitz mappings into a hilbert space.Contemp. Math., 26:\n189–206, 1984.\n[49]N. P. Jouppi, C. Young, N. Patil, D. Patterson, G. Agrawal, R. Bajwa, S. Bates, S. Bhatia,\nN. Boden, A. Borchers, et al. In-datacenter performance analysis of a tensor processing unit.\nInProceedings of the 44th annual international symposium on computer architecture, pages\n1–12, 2017.\n[50]T.  C.  Kaz  Sato.Vertex  ai  matching  engine.Microsoft  AI  Blog,   2021.URL\nhttps://cloud.google.com/blog/topics/developers-practitioners/\nfind-anything-blazingly-fast-googles-vector-search-technology.\n[51]A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet classification with deep convolutional\nneural networks.Advances in neural information processing systems, 25, 2012.\n[52]\nB. Kulis, P. Jain, and K. Grauman. Fast similarity search for learned metrics.IEEE Transactions\non Pattern Analysis and Machine Intelligence, 31(12):2143–2157, 2009.\n13",
    "[53]A. Kusupati, M. Singh, K. Bhatia, A. Kumar, P. Jain, and M. Varma. Fastgrnn: A fast, accurate,\nstable and tiny kilobyte sized gated recurrent neural network.Advances in Neural Information\nProcessing Systems, 31, 2018.\n[54]\nA. Kusupati, V. Ramanujan, R. Somani, M. Wortsman, P. Jain, S. Kakade, and A. Farhadi.\nSoft threshold weight reparameterization for learnable sparsity. InInternational Conference\non Machine Learning, pages 5544–5555. PMLR, 2020.\n[55]A. Kusupati,  M. Wallingford,  V. Ramanujan,  R. Somani,  J. S. Park,  K. Pillutla,  P. Jain,\nS. Kakade, and A. Farhadi. Llc: Accurate, multi-purpose learnt low-dimensional binary codes.\nAdvances in Neural Information Processing Systems, 34, 2021.\n[56]\nG. Leclerc, A. Ilyas, L. Engstrom, S. M. Park, H. Salman, and A. Madry.   ffcv.https:\n//github.com/libffcv/ffcv/, 2022. commit 607d117.\n[57]  Y. LeCun, Y. Bengio, and G. Hinton. Deep learning.nature, 521(7553):436–444, 2015.\n[58]S. Lee, S. Purushwalkam Shiva Prakash, M. Cogswell, V. Ranjan, D. Crandall, and D. Batra.\nStochastic multiple choice learning for training diverse deep ensembles.Advances in Neural\nInformation Processing Systems, 29, 2016.\n[59]C. Li, H. Farkhoor, R. Liu, and J. Yosinski.  Measuring the intrinsic dimension of objective\nlandscapes.arXiv preprint arXiv:1804.08838, 2018.\n[60]Y. Linde, A. Buzo, and R. Gray. An algorithm for vector quantizer design.IEEE Transactions\non communications, 28(1):84–95, 1980.\n[61]\nI.  Loshchilov  and  F.  Hutter.Decoupled  weight  decay  regularization.arXiv  preprint\narXiv:1711.05101, 2017.\n[62]Y. A. Malkov and D. A. Yashunin. Efficient and robust approximate nearest neighbor search\nusing hierarchical navigable small world graphs.IEEE transactions on pattern analysis and\nmachine intelligence, 42(4):824–836, 2018.\n[63]J. Masci, U. Meier, D. Cire ̧san, and J. Schmidhuber. Stacked convolutional auto-encoders for\nhierarchical feature extraction. InInternational conference on artificial neural networks, pages\n52–59. Springer, 2011.\n[64]P. Mitra, C. Murthy, and S. K. Pal.  Unsupervised feature selection using feature similarity.\nIEEE transactions on pattern analysis and machine intelligence, 24(3):301–312, 2002.\n[65]V. Nanda, T. Speicher, J. P. Dickerson, S. Feizi, K. P. Gummadi, and A. Weller.  Diffused\nredundancy in pre-trained representations.arXiv preprint arXiv:2306.00183, 2023.\n[66]P. Nayak. Understanding searches better than ever before.Google AI Blog, 2019. URLhttps:\n//blog.google/products/search/search-language-understanding-bert/.\n[67]\nA.  Paszke,  S.  Gross,  F.  Massa,  A.  Lerer,  J.  Bradbury,  G.  Chanan,  T.  Killeen,  Z.  Lin,\nN.  Gimelshein,  L.  Antiga,  et  al.   Pytorch:  An  imperative  style,  high-performance  deep\nlearning library.Advances in neural information processing systems, 32, 2019.\n[68]M. E. Peters, M. Neumann, M. Iyyer, M. Gardner, C. Clark, K. Lee, and L. Zettlemoyer.\nDeep contextualized word representations.  InProceedings of the 2018 Conference of the\nNorth American Chapter of the Association for Computational Linguistics: Human Language\nTechnologies, Volume 1 (Long Papers), pages 2227–2237, New Orleans, Louisiana, June\n2018. Association for Computational Linguistics. doi: 10.18653/v1/N18-1202. URLhttps:\n//aclanthology.org/N18-1202.\n[69]Y. Prabhu, A. Kusupati, N. Gupta, and M. Varma.  Extreme regression for dynamic search\nadvertising.  InProceedings of the 13th International Conference on Web Search and Data\nMining, pages 456–464, 2020.\n[70]A. Radford, K. Narasimhan, T. Salimans, and I. Sutskever. Improving language understand-\ning by generative pre-training.OpenAI Blog, 2018.  URLhttps://openai.com/blog/\nlanguage-unsupervised/.\n14",
    "[71]A. Radford, J. W. Kim, C. Hallacy, A. Ramesh, G. Goh, S. Agarwal, G. Sastry, A. Askell,\nP. Mishkin, J. Clark, et al.  Learning transferable visual models from natural language su-\npervision.   InInternational Conference on Machine Learning, pages 8748–8763. PMLR,\n2021.\n[72]B. Recht, R. Roelofs, L. Schmidt, and V. Shankar.   Do imagenet classifiers generalize to\nimagenet?   InInternational Conference on Machine Learning, pages 5389–5400. PMLR,\n2019.\n[73]  O. Rippel, M. Gelbart, and R. Adams. Learning ordered representations with nested dropout.\nInInternational Conference on Machine Learning, pages 1746–1754. PMLR, 2014.\n[74]  J. Rissanen. Modeling by shortest data description.Automatica, 14(5):465–471, 1978.\n[75]\nS. Ruder, M. E. Peters, S. Swayamdipta, and T. Wolf. Transfer learning in natural language\nprocessing.  InProceedings of the 2019 conference of the North American chapter of the\nassociation for computational linguistics: Tutorials, pages 15–18, 2019.\n[76]O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma, Z. Huang, A. Karpathy,\nA. Khosla, M. Bernstein, et al. Imagenet large scale visual recognition challenge.International\njournal of computer vision, 115(3):211–252, 2015.\n[77]R. Salakhutdinov and G. Hinton. Learning a nonlinear embedding by preserving class neigh-\nbourhood structure. InArtificial Intelligence and Statistics, pages 412–419. PMLR, 2007.\n[78]R. Salakhutdinov and G. Hinton.  Semantic hashing.International Journal of Approximate\nReasoning, 50(7):969–978, 2009.\n[79]\nJ. S. Sánchez, F. Pla, and F. J. Ferri.  On the use of neighbourhood-based non-parametric\nclassifiers.Pattern Recognition Letters, 18(11-13):1179–1186, 1997.\n[80]R. R. Selvaraju, M. Cogswell, A. Das, R. Vedantam, D. Parikh, and D. Batra.  Grad-cam:\nVisual explanations from deep networks via gradient-based localization. InProceedings of the\nIEEE international conference on computer vision, pages 618–626, 2017.\n[81]N. Shazeer and M. Stern. Adafactor: Adaptive learning rates with sublinear memory cost. In\nInternational Conference on Machine Learning, pages 4596–4604. PMLR, 2018.\n[82]K. Simonyan and A. Zisserman.  Very deep convolutional networks for large-scale image\nrecognition.arXiv preprint arXiv:1409.1556, 2014.\n[83]L. N. Smith.   Cyclical learning rates for training neural networks.   In2017 IEEE winter\nconference on applications of computer vision (WACV), pages 464–472. IEEE, 2017.\n[84]D. Soudry, E. Hoffer, M. S. Nacson, S. Gunasekar, and N. Srebro. The implicit bias of gradient\ndescent on separable data.The Journal of Machine Learning Research, 19(1):2822–2878,\n2018.\n[85]C. Sun, A. Shrivastava, S. Singh, and A. Gupta. Revisiting unreasonable effectiveness of data\nin deep learning era. InProceedings of the IEEE international conference on computer vision,\npages 843–852, 2017.\n[86]I. Sutskever, J. Martens, G. Dahl, and G. Hinton.  On the importance of initialization and\nmomentum in deep learning. InInternational conference on machine learning, pages 1139–\n1147. PMLR, 2013.\n[87]M. Tan and Q. Le. Efficientnet: Rethinking model scaling for convolutional neural networks.\nInInternational conference on machine learning, pages 6105–6114. PMLR, 2019.\n[88]\nL. Van Der Maaten, E. Postma, J. Van den Herik, et al. Dimensionality reduction: a comparative.\nJ Mach Learn Res, 10(66-71):13, 2009.\n[89]  M. Varma. Extreme classification.Communications of the ACM, 62(11):44–45, 2019.\n15",
    "[90]P. Viola and M. Jones. Rapid object detection using a boosted cascade of simple features. In\nProceedings of the 2001 IEEE computer society conference on computer vision and pattern\nrecognition. CVPR 2001, volume 1, pages I–I. Ieee, 2001.\n[91]C. Waldburger. As search needs evolve, microsoft makes ai tools for better search available\nto researchers and developers.Microsoft AI Blog, 2019. URLhttps://blogs.microsoft.\ncom/ai/bing-vector-search/.\n[92]M. Wallingford, A. Kusupati, K. Alizadeh-Vahid, A. Walsman, A. Kembhavi, and A. Farhadi.\nAre we overfitting to experimental setups in recognition?arXiv preprint arXiv:2007.02519,\n2020.\n[93]\nM. Wallingford, H. Li, A. Achille, A. Ravichandran, C. Fowlkes, R. Bhotika, and S. Soatto.\nTask adaptive parameter sharing for multi-task learning.arXiv preprint arXiv:2203.16708,\n2022.\n[94]\nH. Wang, S. Ge, Z. Lipton, and E. P. Xing. Learning robust global representations by penalizing\nlocal predictive power. InAdvances in Neural Information Processing Systems, pages 10506–\n10518, 2019.\n[95]\nX. Wang, D. Kondratyuk, K. M. Kitani, Y. Movshovitz-Attias, and E. Eban. Multiple networks\nare more efficient than one:  Fast and accurate models via ensembles and cascades.arXiv\npreprint arXiv:2012.01988, 2020.\n[96]M. Wortsman, G. Ilharco, M. Li, J. W. Kim, H. Hajishirzi, A. Farhadi, H. Namkoong, and\nL. Schmidt. Robust fine-tuning of zero-shot models.arXiv preprint arXiv:2109.01903, 2021.\n[97]Z. Wu,  Y. Xiong,  S. Yu,  and D. Lin.   Unsupervised feature learning via non-parametric\ninstance-level discrimination.arXiv preprint arXiv:1805.01978, 2018.\n[98]  J. Yosinski, J. Clune, Y. Bengio, and H. Lipson. How transferable are features in deep neural\nnetworks?Advances in neural information processing systems, 27, 2014.\n[99]\nH.-F. Yu, K. Zhong, J. Zhang, W.-C. Chang, and I. S. Dhillon. Pecos: Prediction for enormous\nand correlated output spaces.Journal of Machine Learning Research, 23(98):1–32, 2022.\n[100]J. Yu, L. Yang, N. Xu, J. Yang, and T. Huang.  Slimmable neural networks.arXiv preprint\narXiv:1812.08928, 2018.\n[101]R. Zellers, J. Lu, X. Lu, Y. Yu, Y. Zhao, M. Salehi, A. Kusupati, J. Hessel, A. Farhadi, and\nY. Choi.  Merlot reserve:  Neural script knowledge through vision and language and sound.\narXiv preprint arXiv:2201.02639, 2022.\n[102]Y. Zhu, R. Kiros, R. Zemel, R. Salakhutdinov, R. Urtasun, A. Torralba, and S. Fidler. Aligning\nbooks and movies: Towards story-like visual explanations by watching movies and reading\nbooks. InProceedings of the IEEE international conference on computer vision, pages 19–27,\n2015.\n16",
    "Checklist\n1.  For all authors...\n(a)Do the main claims made in the abstract and introduction accurately reflect the paper’s\ncontributions and scope? [Yes]\n(b)  Did you describe the limitations of your work? [Yes] See Section 6\n(c)Did you discuss any potential negative societal impacts of your work? [N/A] Our work\ndoes not have any additional negative societal impact on top of the existing impact of\nrepresentation learning. However, a study on the trade-off between representation size\nand the tendency to encode biases is an interesting future direction along the lines of\nexisting literature [36, 37]. A part of this is already presented in Section 5.\n(d)Have you read the ethics review guidelines and ensured that your paper conforms to\nthem? [Yes]\n2.  If you are including theoretical results...\n(a)  Did you state the full set of assumptions of all theoretical results? [N/A]\n(b)  Did you include complete proofs of all theoretical results? [N/A]\n3.  If you ran experiments...\n(a)Did you include the code, data, and instructions needed to reproduce the main ex-\nperimental results (either in the supplemental material or as a URL)? [Yes] See sup-\nplemental material and Appendix A. All the code and public models will be open\nsourced.\n(b)Did you specify all the training details (e.g., data splits, hyperparameters, how they\nwere chosen)? [Yes] See Section 4 and Appendix C.\n(c)Did you report error bars (e.g., with respect to the random seed after running experi-\nments multiple times)? [No] We benchmarked on large-scale datasets like ImageNet-\n1K, JFT-300M and ALIGN data with models like ResNet and ViT making it extremely\nexpensive to run things multiple times.\n(d)Did you include the total amount of compute and the type of resources used (e.g., type\nof GPUs, internal cluster, or cloud provider)? [Yes] See Appendix C and Appendix I.\n4.  If you are using existing assets (e.g., code, data, models) or curating/releasing new assets...\n(a)  If your work uses existing assets, did you cite the creators? [Yes]\n(b)Did you mention the license of the assets? [No] All the non-proprietary datasets and\ncode used are public under MIT, BSD or CC licenses.\n(c)Did you include any new assets either in the supplemental material or as a URL? [Yes]\nWe created a new subset of ImageNet-21K for downstream evaluation of retrieval\nperformance at scale. See Section 4.3 and Appendix B\n(d)\nDid you discuss whether and how consent was obtained from people whose data you’re\nusing/curating? [N/A]\n(e)\nDid you discuss whether the data you are using/curating contains personally identifiable\ninformation or offensive content? [N/A]\n5.  If you used crowdsourcing or conducted research with human subjects...\n(a)\nDid you include the full text of instructions given to participants and screenshots, if\napplicable? [N/A]\n(b)Did you describe any potential participant risks, with links to Institutional Review\nBoard (IRB) approvals, if applicable? [N/A]\n(c)Did you include the estimated hourly wage paid to participants and the total amount\nspent on participant compensation? [N/A]\n17",
    "Contents\n1    Introduction1\n2    Related Work3\n3\nMatryoshka Representation Learning3\n4    Applications4\n4.1Representation Learning   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .4\n4.2Classification   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .5\n4.2.1Adaptive Classification  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .6\n4.3Retrieval .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .6\n4.3.1Adaptive Retrieval   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .7\n5    Further Analysis and Ablations8\n5.1Ablations   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .10\n6    Discussion and Conclusions10\nA   Code forMatryoshka Representation Learning\n(MRL)19\nB   Datasets20\nCMatryoshka Representation LearningModel Training20\nD   Classification Results21\nD.1   Adaptive Classification (MRL–AC)   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .21\nD.2   JFT, ALIGN and BERT  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .22\nE   Image Retrieval22\nF   Adaptive Retrieval24\nG   Few-shot and Sample Efficiency25\nH   Robustness Experiments27\nIIn Practice Costs27\nJ    Analysis of Model Disagreement29\nK   Ablation Studies32\nK.1MRLTraining Paradigm  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .32\nK.2   Retrieval .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .33\n18",
    "A    Code forMatryoshka Representation Learning(MRL)\nWe use Alg 1 and 2 provided below to train supervised ResNet50–MRLmodels on ImageNet-1K.\nWe provide this code as a template to extendMRLto any domain.\nAlgorithm 1Pytorch code forMatryoshkaCross-Entropy Loss\nclass Matryoshka_CE_Loss(nn.Module):\ndef __init__(self, relative_importance, **kwargs):\nsuper(Matryoshka_CE_Loss, self).__init__()\nself.criterion = nn.CrossEntropyLoss(**kwargs)\nself.relative_importance = relative_importance # usually set\nto all ones\ndef forward(self, output, target):\nloss=0\nfor i in range(len(output)):\nloss+= self.relative_importance[i] * self.criterion(output[\ni], target)\nreturn loss\nAlgorithm 2Pytorch code forMRLLinear Layer\nclass MRL_Linear_Layer(nn.Module):\ndef __init__(self, nesting_list: List, num_classes=1000, efficient=\nFalse, **kwargs):\nsuper(MRL_Linear_Layer, self).__init__()\nself.nesting_list=nesting_list # set of m in M (Eq. 1)\nself.num_classes=num_classes\nself.is_efficient=efficient # flag for MRL-E\nif not is_efficient:\nfor i, num_feat in enumerate(self.nesting_list):\nsetattr(self, f\"nesting_classifier_{i}\", nn.Linear(\nnum_feat, self.num_classes, **kwargs))\nelse:\nsetattr(self, \"nesting_classifier_0\", nn.Linear(self.\nnesting_list[-1], self.num_classes, **kwargs)) #\nInstantiating one nn.Linear layer for MRL-E\ndef forward(self, x):\nnesting_logits = ()\nfor i, num_feat in enumerate(self.nesting_list):\nif(self.is_efficient):\nefficient_logit = torch.matmul(x[:, :num_feat],\n(self.nesting_classifier_0.weight[:, :\nnum_feat]).t())\nelse:\nnesting_logits.append(getattr(self, f\"\nnesting_classifier_{i}\")(x[:, :num_feat]))\nif(self.is_efficient):\nnesting_logits.append(efficient_logit)\nreturn nesting_logits\n19",
    "B    Datasets\nImageNet-1K[76] contains 1,281,167 labeled train images, and 50,000 labelled validation images\nacross 1,000 classes. The images were transformed with standard procedures detailed by FFCV [56].\nImageNet-4Kdataset was constructed by selecting 4,202 classes, non-overlapping with ImageNet-\n1K, from ImageNet-21K [16] with 1,050 or more examples. The train set contains 1,000 examples and\nthe query/validation set contains 50 examples per class totalling to∼4.2M and∼200K respectively.\nWe will release the list of images curated together to construct ImageNet-4K.\nJFT-300M[85] is a large-scale multi-label dataset with 300M images labelled across 18,291 cate-\ngories.\nALIGN[46] utilizes a large scale noisy image-text dataset containing 1.8B image-text pairs.\nImageNet Robustness DatasetsWe experimented on the following datasets to examine the robust-\nness ofMRLmodels:\nImageNetV2[72] is a collection of 10K images sampled a decade after the original construction of\nImageNet [16]. ImageNetV2 contains 10 examples each from the 1,000 classes of ImageNet-1K.\nImageNet-A[35]  contains  7.5K  real-world  adversarially  filtered  images  from  200  ImageNet-\n1K classes.\nImageNet-R[34] contains 30K artistic image renditions for 200 of the original ImageNet-1K classes.\nImageNet-Sketch[94] contains 50K sketches, evenly distributed over all 1,000 ImageNet-1K classes.\nObjectNet[2] contains 50K images across 313 object classes, each containing∼160 images each.\nCMatryoshka Representation LearningModel Training\nWe trained all ResNet50–MRLmodels using the efficient dataloaders of FFCV [56]. We utilized the\nrn50_40_epochs.yamlconfiguration file of FFCV to train allMRLmodels defined below:\n•MRL: ResNet50 model with the fc layer replaced byMRL_Linear_Layer(efficient=False)\n•MRL–E\n: ResNet50 model with the fc layer replaced byMRL_Linear_Layer(efficient=True)\n•\nFF–k:  ResNet50 model with the fc layer replaced bytorch.nn.Linear(k, num_classes),\nwhere k∈[8,16,32,64,128,256,512,1024,2048]. We will henceforth refer to these models as\nsimply FF, with the k value denoting representation size.\nWe trained all ResNet50 models with a learning rate of0.475with a cyclic learning rate schedule [83].\nThis was after appropriate scaling (0.25×) of the learning rate specified in the configuration file to\naccommodate for 2xA100 NVIDIA GPUs available for training, compared to the 8xA100 GPUs\nutilized in the FFCV benchmarks. We trained with a batch size of 256 per GPU, momentum [86] of\n0.9, and an SGD optimizer with a weight decay of 1e-4.\nOur code (Appendix A) makes minimal modifications to the training pipeline provided by FFCV to\nlearnMatryoshka Representations.\nWe trained ViT-B/16 models for JFT-300M on a 8x8 cloud TPU pod [49] using Tensorflow [1] with a\nbatchsize of 128 and trained for 300K steps. Similarly, ALIGN models were trained using Tensorflow\non 8x8 cloud TPU pod for 1M steps with a batchsize of 64 per TPU. Both these models were trained\nwith adafactor optimizer [81] with a linear learning rate decay starting at 1e-3.\nLastly, we trained a BERT-Base model on English Wikipedia and BookCorpus. We trained our models\nin Tensorflow using a 4x4 cloud TPU pod with a total batchsize of 1024.  We used AdamW [61]\noptimizer with a linear learning rate decay starting at 1e-4 and trained for 450K steps.\nIn each configuration/case, if the final representation was normalized in the FF implementation,MRL\nmodels adopted the same for each nested dimension for a fair comparison.\n20",
    "Table 1: Top-1 classification accuracy (%) for ResNet50MRLand baseline models on ImageNet-1K.\nRep. SizeRand. LPSVDFFSlim. NetMRL  MRL–E\n84.562.3465.290.4266.6356.66\n1611.297.1772.850.9673.5371.94\n3227.2120.4674.602.2775.0374.48\n6449.4748.1075.275.5975.8275.35\n12865.7067.2475.2914.1576.3075.80\n25672.4374.5975.7138.4276.4776.22\n51274.9476.7876.1869.8076.6576.36\n102476.1076.8776.6374.6176.7676.48\n204876.87–76.8776.2676.8076.51\nD    Classification Results\nWe show the top-1 classification accuracy of ResNet50–MRLmodels on ImageNet-1K in Table 1\nand Figure 2. We compare the performance ofMRLmodels (MRL,MRL–E) to several baselines:\n•  FF: We utilize the FF-k models described in Appendix C fork∈{8,...2048}.\n•\nSVD: We performed a low rank approximation of the 1000-way classification layer of FF-2048,\nwith rank = 1000.\n•Rand. LP: We compared against a linear classifier fit on randomly selected features [30].\n•\nSlim. Net: We take pretrained slimmable neural networks [100] which are trained with a flexible\nwidth backbone (25%, 50%, 75% and full width). For each representation size, we consider the\nfirstkdimensions for classification.  Note that training of slimmable neural networks becomes\nunstable when trained below 25% width due to the hardness in optimization and low complexity of\nthe model.\nAt lower dimensions (d≤128),MRLoutperforms all baselines significantly, which indicates that\npretrained models lack the multifidelity ofMatryoshka Representationsand are incapable of fitting\nan accurate linear classifier at low representation sizes.\nWe compared the performance ofMRLmodels at various representation sizes via 1-nearest neighbors\n(1-NN) image classification accuracy on ImageNet-1K in Table 2 and Figure 3. We provide detailed\ninformation regarding the k-NN search pipeline in Appendix E. We compared against a baseline\nof attempting to enforce nesting to a FF-2048 model by 1) Random Feature Selection (Rand. FS):\nconsidering the firstmdimensions of FF-2048 for NN lookup, and 2) FF+SVD: performing SVD\non the FF-2048 representations at the specified representation size, 3) FF+JL: performing random\nprojection according to the Johnson-Lindenstrauss lemma [48] on the FF-2048 representations at\nthe specified representation size. We also compared against the 1-NN accuracy of slimmable neural\nnets [100] as an additional baseline. We observed these baseline models to perform very poorly at\nlower dimensions, as they were not explicitly trained to learnMatryoshka Representations.\nTable 2: 1-NN accuracy (%) on ImageNet-1K for various ResNet50 models.\nRep. SizeRand. FSSVDJLFFSlimmableMRL  MRL–E\n82.3619.140.1158.931.0062.1957.45\n1612.0646.020.0966.775.1267.9167.05\n3232.9160.780.0668.8416.9569.4668.6\n64\n49.9167.040.0569.4135.6070.1769.61\n12860.9169.630.0669.3551.1670.5270.12\n25665.7570.670.0469.7260.6170.6270.36\n51268.7771.060.0370.1865.8270.8270.74\n102470.4171.22-70.3467.1970.8971.07\n204871.1971.21-71.1966.1070.9771.21\nD.1    Adaptive Classification (MRL–AC)\nIn an attempt to use the smallest representation that works well for classification for every image in\nthe ImageNet-1K validation set, we learned a policy to increase the representation size fromm\ni\nto\n21",
    "Table 3:  Threshold-based adaptive classification performance of ResNet50MRLon a 40K sized\nheld-out subset of the ImageNet-1K validation set. Results are averaged over 30 random held-out\nsubsets.\nExpected Rep. SizeAccuracy\n13.43±0.8173.79±0.10\n18.32±1.3675.25±0.11\n25.87±2.4176.05±0.15\n36.26±4.7876.28±0.16\n48.00±8.2476.43±0.18\n64.39±12.5576.53±0.19\n90.22±20.8876.55±0.20\n118.85±33.3776.56±0.20\nm\ni+1\nusing a 10K sized subset of the ImageNet-1K validation set. This policy is based on whether the\nprediction confidencep\ni\nusing representation sizem\ni\nexceeds a learned thresholdt\n∗\ni\n. Ifp\ni\n≥t\n∗\ni\n, we\nused predictions from representation sizem\ni\notherwise, we increased to representation sizem\ni+1\n. To\nlearn the optimal thresholdt\n∗\ni\n, we performed a grid search between 0 and 1 (100 samples). For each\nthresholdt\nk\n, we computed the classification accuracy over our 10K image subset. We sett\n∗\ni\nequal\nto the smallest thresholdt\nk\nthat gave the best accuracy. We use this procedure to obtain thresholds\nfor successive models, i.e.,{t\n∗\nj\n|j∈{8,16,32,64,...,2048}}. To improve reliability of threshold\nbased greedy policy, we use test time augmentation which has been used successfully in the past [82].\nFor inference, we used the remaining held-out 40K samples from the ImageNet-1K validation set. We\nbegan with smallest sized representation (m= 8) and compared the computed prediction confidence\np\n8\nto learned optimal thresholdt\n∗\n8\n.   Ifp\n8\n≤t\n∗\n8\n,  then we increasedm= 16,  and repeated this\nprocedure untilm=d= 2048. To compute the expected dimensions, we performed early stopping\natm={16,32,64,...2048}and computed the expectation using the distribution of representation\nsizes. As shown in Table 3 and Figure 6, we observed that in expectation, we only needed a∼37\nsized representation to achieve76.3%classification accuracy on ImageNet-1K, which was roughly\n14×smaller than the FF–512 baseline. Even if we computed the expectation as a weighted average\nover the cumulative sum of representation sizes{8,24,56,...}, due to the nature of multiple linear\nheads forMRL, we ended up with an expected size of62that still provided a roughly8.2×efficient\nrepresentation than the FF–512 baseline.  However,MRL–Ealleviates this extra compute with a\nminimal drop in accuracy.\nD.2    JFT, ALIGN and BERT\nWe  examine  the  k-NN  classification  accuracy  of  learnedMatryoshka Representationsvia\nALIGN–MRLand  JFT-ViT–MRLin  Table  4.    For  ALIGN  [46],  we  observed  that  learning\nMatryoshka Representationsvia  ALIGN–MRLimproved  classification  accuracy  at  nearly  all\ndimensions when compared to ALIGN. We observed a similar trend when training ViT-B/16 [22]\nfor  JFT-300M  [85]  classification,  where  learningMatryoshka RepresentationsviaMRLand\nMRL–Eon top of JFT-ViT improved classification accuracy for nearly all dimensions, and signif-\nicantly  for  lower  ones.   This  demonstrates  that  training  to  learnMatryoshka Representations\nis  feasible  and  extendable  even  for  extremely  large  scale  datasets.   We  also  demonstrate  that\nMatryoshka Representationsare learned at interpolated dimensions for both ALIGN and JFT-\nViT, as shown in Table 5, despite not being trained explicitly at these dimensions. Lastly, Table 6\nshows thatMRLtraining leads to a increase in the cosine similarity span between positive and\nrandom image-text pairs.\nWe also evaluated the capability ofMatryoshka Representationsto extend to other natural language\nprocessing via masked language modeling (MLM) with BERT [19], whose results are tabulated\nin Table 7. Without any hyper-parameter tuning, we observedMatryoshka Representationsto be\nwithin0.5%of FF representations for BERT MLM validation accuracy. This is a promising initial\nresult that could help with large-scale adaptive document retrieval using BERT–MRL.\nE    Image Retrieval\nWe evaluated the strength ofMatryoshka Representationsvia image retrieval on ImageNet-1K (the\ntraining distribution), as well as on out-of-domain datasets ImageNetV2 and ImageNet-4K for all\n22",
    "Table 4: ViT-B/16 and ViT-B/16-MRLtop-1 and top-5 k-NN accuracy (%) for ALIGN and JFT. Top-1\nentries whereMRL–EandMRLoutperform baselines are bolded for both ALIGN and JFT-ViT.\nRep. Size\nALIGNALIGN-MRLJFT-ViTJFT-ViT-MRLJFT-ViT-MRL–E\nTop-1Top-5Top-1Top-5Top-1Top-5Top-1Top-5Top-1Top-5\n1211.9028.0543.5767.3627.0748.5753.6175.3051.5473.94\n2433.3555.5856.4478.1948.6470.2062.8081.5162.4081.36\n48\n51.3273.1562.3382.3063.5881.8067.2484.3766.8983.80\n9661.8281.9765.7284.6168.5685.1369.7485.8668.8085.13\n19266.7185.2767.0085.3671.3286.2171.3486.6270.4186.01\n38467.6585.7067.7085.7371.6786.9871.7387.0871.1886.46\n76868.0086.1067.8585.8572.1087.2071.8586.9271.3186.62\nTable 5: Examining top-1 and top-5 k-NN accuracy (%) at interpolated hidden dimensions for ALIGN\nand JFT. This indicates thatMRLis able to scale classification accuracy as hidden dimensions increase\neven at dimensions that were not explicitly considered during training.\nInterpolated\nRep. Size\nALIGN-MRLJFT-ViT-MRL\nTop-1Top-5Top-1Top-5\n1649.0672.2658.3578.55\n3258.6479.9664.9882.89\n6463.9083.3968.1984.85\n12866.6385.0070.3586.24\n256\n67.1085.3071.5786.77\n51267.6485.7271.5586.67\nMRLResNet50 models. We generated the database and query sets, containingNandQsamples\nrespectively, with a standard PyTorch [67] forward pass on each dataset. We specify the representation\nsize  at  which  we  retrieve  a  shortlist  of  k-nearest  neighbors  (k-NN)  byD\ns\n.   The  database  is  a\nthus a [N,D\ns\n] array,  the query set is a [Q,D\ns\n] array,  and the neighbors set is a [Q,  k] array.\nFor metrics, we utilized corrected mean average precision (mAP@k) [55] and precision (P@k):\nP@k=\ncorrect_pred\nk\nwherecorrect_predis the average number of retrieved NN with the correct\nlabel over the entire query set using a shortlist of lengthk.\nWe performed retrieval with FAISS [47], a library for efficient similarity search. To obtain a shortlist\nof k-NN, we built an index to search the database.  We performed an exhaustive NN search with\nthe L2 distance metric withfaiss.IndexFlatL2, as well as an approximate NN search (ANNS)\nvia HNSW [47] withfaiss.IndexHNSWFlat.  We used HNSW withM= 32unless otherwise\nmentioned, and henceforth referred to as HNSW32. The exact search index was moved to the GPU\nfor fast k-NN search computation, whereas the HNSW index was kept on the CPU as it currently\nlacks GPU support. We show the wall clock times for building the index as well as the index size\nin Table 20. We observed exact search to have a smaller index size which was faster to build when\ncompared to HNSW, which trades off a larger index footprint for fast NN search (discussed in more\ndetail in Appendix K). The database and query vectors are normalized withfaiss.normalize_L2\nbefore building the index and performing search.\nRetrieval performance on ImageNet-1K,i.e.the training distribution, is shown in Table  8.MRLout-\nperforms FF models for nearly all representation size for both top-1 and mAP@10, and especially\nat low representation size (D\ns\n≤32).MRL–Eloses out to FF significantly only atD\ns\n= 8.  This\nindicates that training ResNet50 models via theMRLtraining paradigm improves retrieval at low\nrepresentation size over models explicitly trained at those representation size (FF-8...2048).\nWe  carried  out  all  retrieval  experiments  atD\ns\n∈ {8,16,32,64,128,256,512,1024,2048},  as\nthese  were  the  representation  sizes  which  were  a  part  of  thenesting_listat  which  losses\nwere  added  during  training,  as  seen  in  Algorithm  1,  Appendix  A.  To  examine  whetherMRL\nis able to learnMatryoshka Representationsat dimensions in between the representation size\nfor  which  it  was  trained,  we  also  tabulate  the  performance  ofMRLat  interpolatedD\ns\n∈\n{12,24,48,96,192,384,768,1536}asMRL–Interpolated andMRL–E–Interpolated (see Table 8).\nWe observed that performance scaled nearly monotonically between the original representation\n23",
    "Table 6: Cosine similarity between embeddings\nAvg. Cosine SimilarityALIGNALIGN-MRL\nPositive Text to Image0.270.49\nRandom Text to Image8e-3-4e-03\nRandom Image to Image0.100.08\nRandom Text to Text0.220.07\nTable 7: Masked Language Modelling (MLM) accuracy(%) of FF andMRLmodels on the validation\nset.\nRep. SizeBERT-FFBERT-MRL\n1260.1259.92\n2462.4962.05\n48\n63.8563.40\n9664.3264.15\n19264.7064.58\n38465.0364.81\n76865.5465.00\nsize and the interpolated representation size as we increaseD\ns\n, which demonstrates thatMRLis\nable to learnMatryoshka Representationsat nearly all representation sizem∈[8,2048]despite\noptimizing only for|M|nested representation sizes.\nWe examined the robustness ofMRLfor retrieval on out-of-domain datasets ImageNetV2 and\nImageNet-4K, as shown in Table 9 and Table 10 respectively. On ImageNetV2, we observed thatMRL\noutperformed FF at allD\ns\non top-1 Accuracy and mAP@10, andMRL–Eoutperformed FF  at all\nD\ns\nexceptD\ns\n= 8. This demonstrates the robustness of the learnedMatryoshka Representations\nfor out-of-domain image retrieval.\nF    Adaptive Retrieval\nThe time complexity of retrieving a shortlist of k-NN often scales asO(d), whered=D\ns\n, for a\nfixed k andN. We thus will have a theoretical256×higher cost forD\ns\n= 2048overD\ns\n= 8. We\ndiscuss search complexity in more detail in Appendix I. In an attempt to replicate performance at\nhigherD\ns\nwhile using less FLOPs, we perform adaptive retrieval via retrieving a k-NN shortlist with\nrepresentation sizeD\ns\n, and then re-ranking the shortlist with representations of sizeD\nr\n. Adaptive\nretrieval for a shortlist lengthk= 200is shown in Table 11 for ImageNet-1K, and in Table 12 for\nImageNet-4K. On ImageNet-1K, we are able to achieve comparable performance to retrieval with\nD\ns\n= 2048(from Table 8) withD\ns\n= 16at128×less MFLOPs/Query (used interchangeably with\nMFLOPs). Similarly, on ImageNet-4K, we are able to achieve comparable performance to retrieval\nwithD\ns\n= 2048(from Table 10) withD\ns\n= 64on ImageNet-1K and ImageNet-4K, at32×less\nMFLOPs. This demonstrates the value of intelligent routing techniques which utilize appropriately\nsizedMatryoshka Representationsfor retrieval.\n24",
    "Table 8: Retrieve a shortlist of 200-NN withD\ns\nsized representations on ImageNet-1K via exact\nsearch with L2 distance metric. Top-1 and mAP@10 entries (%) whereMRL–EandMRLoutperform\nFF  at their respective representation sizes are bolded.\nModelD\ns\nMFlopsTop-1Top-5Top-10mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\nFF\n81058.9375.7680.2553.4252.2951.8451.5759.3259.2859.2559.21\n162066.7780.8884.4061.6360.5159.9859.6266.7666.5866.4366.27\n324168.8482.5886.1463.3562.0861.3660.7668.4368.1367.8367.48\n648269.4183.5687.3363.2661.6460.6359.6768.4967.9167.3866.74\n12816469.3584.2388.2462.3060.1658.7357.2967.8466.8365.9664.92\n25632869.7284.7188.5461.4758.8557.0255.1367.1965.8264.6463.24\n51265670.1885.0488.9161.3758.4156.2653.9867.1265.4964.0762.35\n1024131270.3485.3889.1961.1357.8755.4752.9066.9365.0863.4361.45\n2048262471.1985.6689.1762.9060.0657.9955.7668.4666.965.5263.83\nMRL–E\n81057.3974.1879.1651.8050.4149.6048.8657.5057.1656.8156.36\n162067.0881.3885.1561.6060.3659.6659.0466.7966.5366.2465.87\n324168.6282.9286.4463.3461.9761.1460.3968.4968.0667.6567.17\n648269.5683.4986.8563.8462.3361.4360.5768.9368.467.9667.38\n12816470.1383.6387.0764.1562.5861.6160.7069.1968.6268.1167.50\n25632870.3983.887.2864.3562.7661.7660.8269.3668.7968.2667.63\n51265670.7483.9187.3364.6963.0562.0661.1469.6369.0068.5067.88\n1024131271.0584.1387.4664.8563.2262.1961.2669.7869.1668.6067.99\n2048262471.1784.2787.6764.9963.3362.2961.3369.9069.2468.6868.05\nMRL–E\nInterpolated\n121564.2579.2183.2958.8357.5056.7156.0264.1063.7863.4263.02\n243168.2882.3185.8962.7561.4160.6259.9267.8967.4967.1166.69\n486169.2083.1586.6763.5862.1261.2360.4268.7168.1967.7567.22\n9612370.0583.6387.1164.0462.4661.5260.6369.1068.5168.0467.45\n19224670.3683.7287.2164.2662.6561.6560.7269.2668.6768.1567.53\n38449270.5483.8887.2864.5562.9461.9361.0169.5168.9268.4067.78\n76898470.9684.0587.4464.7963.1562.1561.2269.7269.1068.5667.95\n1536196871.1984.1787.5764.9463.2962.2661.3269.8569.2168.6668.04\nMRL\n81062.1977.0581.3456.7455.4754.7654.1262.0661.8161.5461.17\n162067.9181.4485.0062.9461.7961.1660.6467.9367.7167.4867.20\n324169.4683.0186.3064.2162.9662.2261.5869.1868.8768.5468.17\n648270.1783.5386.9564.6963.3362.5361.8069.6769.2568.8968.42\n12816470.5283.9887.2564.9463.5062.6361.8369.9369.4469.0268.50\n25632870.6284.1787.3865.0463.5662.6661.8170.0269.5269.0768.50\n51265670.8284.3187.5565.1463.5762.6261.7370.1269.5369.0468.45\n1024131270.8984.4487.6865.1663.5862.6061.6870.1469.5469.0168.41\n2048262470.9784.4187.7465.2063.5762.5661.6070.1869.5268.9868.35\nMRL\nInterpolated\n121565.8980.0483.6860.8459.6658.9858.3765.9465.7265.4565.08\n243168.7682.4885.8763.6462.4261.7461.1368.6468.3568.0767.71\n486169.9683.4086.6564.5863.262.4261.7269.5369.1068.7568.32\n9612370.4083.8387.0464.8663.4662.6261.8469.8269.3868.9868.48\n19224670.6484.0987.3765.0063.5362.6661.8369.9869.4969.0568.50\n38449270.6984.2587.4165.0963.5662.6461.7670.0569.5169.0468.46\n76898470.8484.4087.6365.1663.5962.6261.7170.1469.5569.0368.44\n1536196870.8884.3987.7165.1863.5962.5861.6470.1669.5468.9968.38\nFunnel Retrieval.We also designed a simple cascade policy which we call funnel retrieval to\nsuccessively improve and refine the k-NN shortlist at increasingD\ns\n. This was an attempt to remove\nthe dependence on manual choice ofD\ns\n&D\nr\n. We retrieved a shortlist atD\ns\nand then re-ranked the\nshortlist five times while simultaneously increasingD\nr\n(rerank cascade) and decreasing the shortlist\nlength (shortlist cascade), which resembles a funnel structure. We tabulate the performance of funnel\nretrieval in various configurations in Table 13 on ImageNet-1K, and in Table 14 on ImageNet-4K.\nWith funnel retrieval on ImageNet-1K, we were able to achieve top-1 accuracy within0.1%of\nretrieval withD\ns\n= 2048(as in Table 8) with a funnel withD\ns\n= 16, with128×less MFLOPs.\nSimilarly, we are able to achieve equivalent top-1 accuracy within0.15%of retrieval atD\ns\n= 2048\n(as in Table 10) with funnel retrieval atD\ns\n= 32on ImageNet-4K, with64×less MFLOPs. This\ndemonstrates that with funnel retrieval, we can emulate the performance of retrieval withD\ns\n= 2048\nwith a fraction of the MFLOPs.\nG    Few-shot and Sample Efficiency\nWe comparedMRL,MRL–E, and FF on various benchmarks to observe the effect of representation\nsize on sample efficiency. We used Nearest Class Means [79] for classification which has been shown\nto be effective in the few-shot regime [13].\nImageNetV2.Representations are evaluated on ImageNetV2 with the n-shot k-way setup. Ima-\ngeNetV2 is a dataset traditionally used to evaluate the robustness of models to natural distribution\nshifts.  For our experiments we evaluate accuracy of the model givennexamples from the Ima-\ngeNetV2 distribution.  We benchmark representations in the traditional small-scale (10-way) and\n25",
    "Table 9:  Retrieve a shortlist of 200-NN withD\ns\nsized representations on ImageNetV2 via exact\nsearch with L2 distance metric. Top-1 and mAP@10 entries (%) whereMRL–Eoutperforms FF  are\nbolded.MRLoutperforms FF at allD\ns\nand is thus not bolded.\nConfigD\ns\nMFLOPsTop-1Top-5Top-10mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\nFF\n81048.7964.7069.7243.0441.8941.4241.1748.4348.2748.2548.19\n162055.0869.5074.0849.6348.5348.0647.7554.7654.6454.5354.39\n324156.6971.1076.4751.1149.8549.1748.6556.2355.9655.7155.42\n648257.3772.7177.4851.2849.7548.8547.9956.6556.1455.7155.15\n12816457.1773.3178.6450.0748.0946.7945.5855.7554.8954.1253.28\n25632857.0974.0479.2449.1146.6644.9943.3555.0253.7752.7451.53\n51265657.1273.9179.3248.9546.2544.3742.4254.8853.4952.2950.83\n1024131257.5374.1779.5548.2745.4143.3641.2654.3152.8451.4949.87\n2048262457.8474.5979.4549.9947.4745.6643.8755.8954.6353.4552.12\nMRL–E\n81047.0562.5367.6040.7939.4738.7838.1646.0345.7745.5445.17\n162055.7370.5474.8649.8648.5747.8447.2654.9754.7154.4454.10\n324157.3371.6176.6451.2649.9249.0948.4256.4656.1155.7055.30\n648257.9072.5577.4451.8950.2949.3448.5357.0656.4555.9755.43\n12816457.7372.7977.2852.0250.3849.4948.6257.1356.5856.1555.58\n25632858.2272.7777.6752.1650.6149.6748.8157.3056.7956.3355.77\n51265658.4673.0077.8852.5250.9750.0249.1657.6557.1056.6456.08\n1024131258.7173.2978.0052.7051.1350.1749.3057.8357.2656.7756.20\n2048262458.8673.1778.0052.8851.2550.2649.3657.9557.3556.8556.25\nMRL\n81050.4165.5670.2745.5144.3843.7143.1750.5550.4450.1749.91\n162056.6470.1974.6150.9849.7649.1648.6955.9055.6655.5255.29\n324157.9671.8876.4152.0650.7850.0949.5457.1856.8356.5756.27\n648258.9472.7477.1752.6551.2450.4449.7657.7257.2956.9456.52\n12816459.1373.0777.4952.9451.4250.5349.7458.0057.4757.0556.55\n25632859.1873.6477.7552.9651.4550.5249.7058.0157.5357.0656.54\n51265659.4073.8577.9753.0151.3950.4649.6158.1157.4957.0456.48\n1024131259.1173.7777.9252.9851.3750.4049.5458.1357.5157.0056.45\n2048262459.6373.8477.9752.9651.3450.3449.4458.0757.4856.9556.36\nTable 10: Retrieve a shortlist of 200-NN withD\ns\nsized representations on ImageNet-4K  via exact\nsearch with L2 distance metric.MRL–Eand FF  models are omitted for clarity and compute/infer-\nence time costs. All entries are in %.\nConfigD\ns\nMFLOPsTop-1Top-5Top-10mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\nMRL\n83410.6026.2335.575.324.293.763.369.138.778.468.13\n166716.7436.9147.288.646.835.845.0513.8212.7912.0413.27\n3213421.5443.7554.1111.368.887.476.3117.2515.6714.4713.27\n6426925.0047.9758.2513.3810.408.677.2319.6817.6416.1414.65\n12853827.2750.3560.4714.7711.479.537.9121.2518.9517.2615.59\n256107628.5351.9561.9015.6612.1910.128.3822.2819.8118.0116.22\n512215129.4653.0362.8116.2912.7010.558.7222.9620.4218.5416.68\n1024430330.2353.7263.4516.7613.0810.868.9723.4820.8818.9317.00\n2048860630.8754.3264.0217.2013.4311.149.1923.9721.2819.2817.30\nMRL-\nInterpolated\n125014.0432.5642.717.165.704.924.3211.8111.0810.529.94\n2410119.4940.8251.2610.177.986.755.7515.7614.4313.4212.40\n4820223.5146.2356.5612.499.728.136.8118.6216.7515.3914.04\n9640326.2549.3259.4814.1511.009.157.6120.5518.3616.7815.17\n19280727.9451.3261.3215.2911.899.888.1821.8619.4617.7115.96\n384161429.0352.5362.4515.9912.4610.358.5622.6420.1418.2916.47\n768322729.8753.3663.1316.5412.9010.718.8523.2320.6718.7516.85\n1536645430.5254.0263.7916.9913.2711.019.0823.7321.0919.1217.16\nlarge-scale (1000-way) setting. We evaluate forn∈1,3,5,7,9with 9 being the maximum value for\nnbecause there are 10 images per class.\nWe observed thatMRLhad equal performance to FF across all representation sizes and shot numbers.\nWe also found that for bothMRLand FF, as the shot number decreased, the required representa-\ntion size to reach optimal accuracy decreased (Table 15).  For example, we observed that 1-shot\nperformance at32representation size had equal accuracy to2048representation size.\nFLUID.For the long-tailed setting we evaluatedMRLon the FLUID benchmark [92] which\ncontains  a  mixture  of  pretrain  and  new  classes.   Table  16  shows  the  evaluation  of  the  learned\nrepresentation on FLUID. We observed thatMRLprovided up to 2% higher accuracy on novel\nclasses in the tail of the distribution, without sacrificing accuracy on other classes. Additionally we\nfound the accuracy between low-dimensional and high-dimensional representations was marginal for\npretrain classes. For example, the 64-dimensionalMRLperformed∼1%lower in accuracy compared\nto the 2048-dimensional counterpart on pretrain-head classes (84.46% vs 85.60%). However for novel-\ntail classes the gap was far larger (6.22% vs 12.88%). We hypothesize that the higher-dimensional\nrepresentations are required to differentiate the classes when few training examples of each are known.\n26",
    "Table 11: Retrieve a shortlist of k-NN withD\ns\nsized representations on ImageNet-1K withMRLrep-\nresentations, and then re-order the neighbors shortlist with L2 distances usingD\nr\nsized representations.\nTop-1 and mAP@10 entries (%) that are within0.1%of the maximum value achievable without\nreranking onMRLrepresentations, as seen in Table 8, are bolded.\nShortlist Length = 200\nD\ns\nD\nr\nMFLOPsTop-1mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\n8\n16\n10\n68.2163.3562.2561.7061.1968.3268.1467.9667.65\n3269.4264.1262.8162.0361.3269.0468.6368.2267.71\n6470.0564.4663.0362.1461.2969.3768.8368.3267.66\n12870.3464.6863.1662.2161.2769.5968.9668.3867.65\n25670.4064.7763.2162.2361.2669.6669.0268.4167.65\n51270.6064.8663.2262.2161.2269.7469.0268.3967.62\n102470.7164.8863.2362.2061.2069.7669.0168.3967.60\n204870.8164.9063.2262.1761.1669.7768.9968.3667.57\n16\n32\n21\n69.4764.2763.0462.3661.7569.2168.9068.5868.12\n6470.1664.7463.4262.6661.9469.6669.2268.8168.22\n12870.5265.0063.6062.7761.9869.9169.3668.8968.24\n25670.5565.1063.6762.8262.0169.9869.4368.9268.25\n51270.7465.2163.7062.8362.0070.0869.4368.9268.24\n102470.8365.2363.7262.8361.9970.0869.4568.9268.23\n204870.9065.2763.7362.8261.9770.1069.4468.9068.21\n32\n64\n41\n70.1664.6963.3562.5761.9369.6869.2668.9268.51\n12870.5264.9763.5462.7362.0469.9569.4769.0668.59\n25670.6365.0763.6362.7962.0770.0469.5569.1268.61\n51270.8265.1763.6662.8062.0670.1169.5769.1268.60\n102470.8965.2063.6862.8062.0470.1569.5969.1268.59\n204870.9765.2463.7062.7962.0270.1969.5969.1068.56\n64\n128\n82\n70.5164.9463.5062.6461.8869.9469.4469.0268.54\n25670.6365.0463.5762.6961.9170.0269.5269.0868.57\n51270.8365.1463.5962.6761.8770.1269.5469.0668.54\n102470.8965.1663.5962.6561.8570.1569.5469.0568.52\n204870.9765.2063.5962.6361.8270.1869.5369.0368.49\n128\n256\n164\n70.6365.0463.5662.6661.8270.0269.5269.0768.51\n51270.8265.1463.5862.6361.7770.1169.5469.0468.47\n102470.8965.1663.5862.6061.7370.1469.5469.0268.45\n204870.9765.2063.5762.5761.6870.1869.5268.9968.41\n256\n512\n328\n70.8265.1463.5762.6261.7470.1269.5369.0468.45\n102470.8865.1663.5862.6061.6970.1469.5469.0168.41\n204870.9765.2063.5662.5661.6270.1869.5268.9868.37\n512\n1024\n656\n70.9065.1663.5862.6061.6870.1469.5469.0168.41\n204870.9865.2063.5762.5661.6070.1869.5268.9868.35\n10242048131270.9765.2063.5762.5661.6070.1869.5268.9868.35\nThese results provide further evidence that different tasks require varying capacity based on their\ndifficulty.\nH    Robustness Experiments\nWe evaluated the robustness ofMRLmodels on out-of-domain datasets (ImageNetV2/R/A/Sketch)\nand compared them to the FF baseline.  Each of these datasets is described in Appendix B. The\nresults in Table 17 demonstrate that learningMatryoshka Representationsdoes not hurt out-of-\ndomain generalization relative to FF models, andMatryoshka Representationsin fact improve\nthe performance on ImageNet-A. For a ALIGN–MRLmodel, we examine the the robustness via\nzero-shot retrieval on out-of-domain datasets, including ObjectNet, in Table 18.\nI    In Practice Costs\nAll approximate NN search experiments via HNSW32 were run on an Intel Xeon 2.20GHz CPU with\n24 cores. All exact search experiments were run with CUDA 11.0 on 2xA100-SXM4 NVIDIA GPUs\nwith 40G RAM each.\nMRLmodels.AsMRLmakes minimal modifications to the ResNet50 model in the final fc layer\nvia multiple heads for representations at various scales, it has only an 8MB storage overhead when\ncompared to a standard ResNet50 model.MRL–Ehas no storage overhead as it has a shared head\nfor logits at the final fc layer.\nRetrievalExact search has a search time complexity ofO(dkN), and HNSW has a search time\ncomplexity ofO(dklog(N)), whereNis the database size,dis the representation size, andkis the\n27",
    "Table 12:Retrieve a shortlist of k-NN withD\ns\nsized representations on ImageNet-4K withMRLrepresentations,\nand then re-order the neighbors shortlist with L2 distances usingD\nr\nsized representations. Top-1 and mAP@10\nentries (%) that are within0.1%of the maximum value achievable without reranking onMRLrepresentations,\nas seen in Table 10, are bolded.\nShortlist Length = 200\nD\ns\nD\nr\nMFLOPsTop-1mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\n8\n16\n34\n16.848.706.885.885.0813.8612.8011.9811.10\n3220.7310.668.196.775.6116.1814.3913.0211.61\n6423.1111.919.037.366.0017.5615.3413.6711.99\n12824.6312.719.597.766.2518.4215.9414.0812.22\n25625.513.249.968.036.4219.0016.3514.3612.37\n51226.0713.5910.218.206.5319.3716.6214.5412.46\n102426.5213.8510.408.346.6119.6516.8014.6812.53\n204826.9414.1110.578.456.6819.9216.9814.7912.58\n16\n32\n67\n21.4411.248.727.266.0217.0215.3013.9212.41\n6424.3612.789.757.966.4318.7216.4114.6312.74\n12826.0813.7010.398.396.6919.6817.0715.0512.94\n25626.9914.2710.798.676.8520.2717.4815.3113.07\n51227.6014.6611.068.866.9720.6717.7515.5013.16\n102428.1214.9411.268.997.0520.9617.9515.6213.22\n204828.5615.2111.439.117.1221.2318.1315.7313.27\n32\n64\n134\n24.9913.3510.358.597.0919.6117.5215.9214.21\n12827.1714.6111.279.267.5120.9918.5216.6214.59\n25628.3315.3711.839.677.7721.8019.1217.0514.81\n51229.1215.8812.209.947.9322.3319.5117.3214.94\n102429.7816.2512.4710.138.0522.7119.7917.515.03\n204830.3316.5912.7210.308.1623.0720.0517.6615.11\n64\n128\n269\n27.2714.7611.479.517.8521.2518.9217.2015.40\n25628.5415.6412.1510.058.2122.2419.7117.8115.76\n51229.4516.2512.6210.408.4422.8820.2418.2015.97\n102430.1916.6912.9610.668.6023.3520.6118.4616.10\n204830.8117.1013.2710.888.7423.7920.9318.6916.21\n128\n256\n538\n28.5415.6612.1910.128.3622.2819.8118.0016.16\n51229.4516.2912.6910.538.6622.9620.4118.5016.48\n102430.2216.7613.0710.838.8623.4720.8418.8316.68\n204830.8617.1913.4111.099.0323.9521.2219.1216.84\n256\n512\n1076\n29.4516.2912.7010.558.7122.9720.4218.5416.66\n102430.2116.7613.0810.868.9523.4820.8718.9216.94\n204830.8517.2013.4311.149.1523.9721.2719.2617.16\n512\n1024\n2152\n30.2216.7613.0810.868.9723.4820.8818.9317.00\n204830.8717.2013.4311.149.1923.9721.2819.2817.28\n10242048430330.8717.2013.4311.159.1923.9721.2819.2817.29\nTable 13: Retrieve a shortlist of k-NN withD\ns\nsized representations on ImageNet-1K withMRL.\nThis shortlist is then reranked with funnel retrieval, which uses a rerank cascade with a one-to-\none mapping with a monotonically decreasing shortlist length as shown in the shortlist cascade.\nTop-1 and mAP@10 entries (%) within0.1%of the maximum achievable without reranking on\nMRLrepresentations, as seen in Table 8, are bolded.\nD\ns\nRerank CascadeShortlist CascadeMFLOPsTop-1Top-5Top-10mAP@10P@10\n816→32→64→128→2048\n200→100→50→25→1010.2870.2282.6385.4964.0668.65\n400→200→50→25→1010.2970.4683.1386.0864.4369.10\n800→400→200→50→1010.3170.5883.5486.5364.6269.37\n1632→64→128→256→2048\n200→100→50→25→1020.5470.9083.9686.8565.1969.97\n400→200→50→25→1020.5670.9584.0587.0465.1870.00\n800→400→200→50→1020.6170.9684.1887.2265.1470.01\n3264→128→256→512→2048\n200→100→50→25→1041.0770.9684.3287.4765.2170.11\n400→200→50→25→1041.0970.9784.3287.4765.1970.11\n800→400→200→50→1041.2070.9784.3687.5365.1870.11\nshortlist length. To examine real-world performance, we tabulated wall clock search time for every\nquery in the ImageNet-1K and ImageNet-4K validation sets over all representation sizesdin Table 19\nfor both Exact Search and HNSW32, and ablated wall clock query time over shortlist lengthkon the\nImageNet-1K validation set in Table 21. The wall clock time to build the index and the index size is\nalso shown in Table 20.\n28",
    "Table 14: Retrieve a shortlist of k-NN withD\ns\nsized representations on ImageNet-4K withMRL.\nThis shortlist is then reranked with funnel retrieval, which uses a rerank cascade with a one-to-\none mapping with a monotonically decreasing shortlist length as shown in the shortlist cascade.\nTop-1 and mAP@10 entries (%) within0.15%of the maximum achievable without reranking on\nMRLrepresentations, as seen in Table 10, are bolded.\nD\ns\nRerank CascadeShortlist CascadeMFLOPsTop-1Top-5Top-10mAP@10P@10\n816→32→64→128→2048\n200→100→50→25→1033.6526.2046.4554.1212.7917.85\n400→200→50→25→1033.6626.5547.0254.7213.0218.15\n800→400→200→50→1033.6826.8347.5455.3513.2418.44\n1632→64→128→256→2048\n200→100→50→25→1067.2829.5151.4459.5615.2721.03\n400→200→50→25→1067.2929.6651.7159.8815.4221.22\n800→400→200→50→1067.3429.7952.0060.2515.5521.41\n3264→128→256→512→2048\n200→100→50→25→10134.5430.6453.5262.1616.4522.64\n400→200→50→25→10134.5630.6953.6562.3116.5122.73\n800→400→200→50→10134.6630.7253.7862.4316.5522.79\n64128→256→512→1024→2048\n200→100→50→25→10269.0530.8154.0663.1516.8723.34\n400→200→50→25→10269.1030.8454.2063.3116.9223.42\n800→400→200→50→10269.3130.8754.2763.4216.9523.46\nTable 15: Few-shot accuracy (%) on ImageNetV2 for 1000-way classification.MRLperforms equally\nto FF across all shots and representation sizes. We also observed that accuracy saturated at a lower\ndimension for lower shot numbers. E.g. for 1-shot, 32-dim performed comparably to 2048-dim.\nRep. SizeMethod1-Shot3-Shot5-Shot7-Shot9-Shot\n8\nFF35.4145.7349.2350.8951.72\nMRL35.3745.6949.2550.8551.73\n16\nFF40.8853.9657.3658.7259.39\nMRL40.9053.9457.3758.6559.29\n32\nFF41.4154.8858.2859.6360.40\nMRL41.4054.9158.3059.6560.45\n64\nFF41.2554.8358.2959.8260.61\nMRL41.2854.8058.3259.7760.69\n128\nFF41.3654.9058.5060.0560.90\nMRL41.3854.9558.5060.0660.83\n256\nFF41.3654.9058.5060.0560.90\nMRL41.3854.9558.5060.0660.83\n512\nFF41.3655.0558.7060.1961.02\nMRL41.3455.1458.7860.4061.18\n1024\nFF41.3255.2058.8560.4661.38\nMRL41.3155.2458.8660.4261.34\n2048\nFF41.1855.0958.7760.3861.34\nMRL41.1655.1058.7760.4061.28\nJ    Analysis of Model Disagreement\nClass TrendsDoes increasing representation size necessarily help improve classification per-\nformance across all classes in ImageNet-1K?We studied this question by examining trends in\nperformance with increasing representation size fromd= 8,...2048. ForMRLmodels, we observed\nthat244classes showed a monotonic improvement in performance with increasingd,177classes\nfirst improved but then observed a slight dip (one or two misclassifications per class),49classes\nshowed a decline first and then an improvement, and the remaining classes did not show a clear\ntrend. When we repeated this experiment with independently trained FF models, we noticed that950\nclasses did not show a clear trend. This motivated us to leverage the disagreement as well as gradual\nimprovement of accuracy at different representation sizes by trainingMatryoshka Representations.\nFigure 12 showcases the progression of relative per-class accuracy distribution compared to the\n29",
    "Table 16: Accuracy (%) categories indicates whether classes were present during ImageNet pretraining\nand head/tail indicates classes that have greater/less than 50 examples in the streaming test set. We\nobserved thatMRLperformed better than the baseline on novel tail classes by∼2%on average.\nRep. SizeMethod\nPretrain\n- Head (>50)\nNovel\n- Head (>50)\nPretrain\n- Tail (<50)\nNovel\n- Tail (<50)\nMean Per Class\nAcc.\nAcc.\n8\nFF68.0411.3033.180.3616.2928.47\nMRL71.7510.7038.290.1917.1529.34\nMRL–E57.406.2523.140.0411.7822.81\n16\nFF80.7419.1263.292.7825.6537.61\nMRL81.7917.9061.391.9524.7337.59\nMRL–E79.089.1560.330.0820.4530.24\n32\nFF83.6724.3066.664.2328.8642.40\nMRL83.4623.2665.823.7528.1641.90\nMRL–E81.4210.4768.010.2322.3132.17\n64\nFF84.1227.4968.205.1730.6445.18\nMRL84.4627.6167.596.2231.0345.35\nMRL–E82.5713.2370.180.5223.8334.74\n128\nFF84.8729.9668.795.5431.8447.06\nMRL84.8830.8668.588.4133.2347.79\nMRL–E82.7618.9364.462.2225.7539.19\n256\nFF84.7732.7869.967.2133.6549.15\nMRL85.1032.9169.399.9934.7449.39\nMRL–E82.9622.6364.553.5927.6441.96\n512\nFF85.6235.2770.279.0535.4251.14\nMRL85.6234.6770.2411.4336.1150.79\nMRL–E82.8625.6264.344.9929.2244.20\n1024\nFF86.3037.4971.1210.9237.1452.88\nMRL85.6435.8870.0212.1936.8051.58\nMRL–E83.0327.7864.586.3230.5745.71\n2048\nFF86.4037.0971.7410.7737.0452.67\nMRL85.6036.8370.3412.8837.4652.18\nMRL–E83.0129.9965.377.6031.9747.16\nTable 17: Top-1 classification accuracy (%) on out-of-domain datasets (ImageNet-V2/R/A/Sketch) to\nexamine robustness ofMatryoshka Representation Learning. Note that these results are without\nany fine tuning on these datasets.\nImageNet-V1ImageNet-V2ImageNet-RImageNet-AImageNet-Sketch\nRep. SizeFFMRL–E  MRLFFMRL–E  MRLFFMRL–E  MRLFFMRL–E  MRLFFMRL–E  MRL\n865.8656.9267.4654.0547.4055.5924.6022.9823.572.923.633.3917.7315.0717.98\n1673.1072.3873.8060.5260.4861.7128.5128.4528.853.003.553.5921.7020.3821.77\n3274.6874.8075.2662.2462.2363.0531.2830.7931.472.603.653.5722.0321.8722.48\n6475.4575.4876.1763.5163.1563.9932.9632.1333.392.873.993.7622.1322.5623.43\n12875.4776.0576.4663.6763.5264.6933.9333.4834.542.813.713.7322.7322.7323.70\n256\n75.7876.3176.6664.1363.8064.7134.8033.9134.852.773.653.6022.6322.8823.59\n51276.3076.4876.8264.1164.0964.7835.5334.2034.972.373.573.5923.4122.8923.67\n102476.7476.6076.9364.4364.2064.9536.0634.2234.992.533.563.6823.4422.9823.72\n204877.1076.6576.9564.6964.1764.9337.1034.2935.072.933.493.5924.0523.0123.70\nMatryoshka Representation Learning-2048 dimensional model.  This also showed that some in-\nstances and classes could benefit from lower-dimensional representations.\nDiscussion of Oracle AccuracyBased on our observed model disagreements for different rep-\nresentation sizesd, we defined an optimaloracleaccuracy [58] forMRL. We labeled an image as\ncorrectly predicted if classification using any representation size was correct.  The percentage of\ntotal samples of ImageNet-1K that were firstly correctly predicted using each representation sizedis\nshown in Table 22. This defined an upper bound on the performance ofMRLmodels, as18.46%\nof the ImageNet-1K validation set were incorrectly predicted∀d∈{8,16,...,2048}. We show the\noracle performance onMRLmodels for ImageNet-1K/V2/A/R/Sketch datasets in Table 23.\nIn an attempt to derive an optimal routing policy to emulate oracle accuracy,  we designed the\nadaptive classification via cascading method as discussed in Appendix D.1. This led to an interesting\n30",
    "Table 18: Zero-shot top-1 image classification accuracy (%) of a ALIGN-MRLmodel on ImageNet-\nV1/V2/R/A and ObjectNet.\nRep. SizeV1V2ARObjectNet\n1230.5723.9814.5924.2425.52\n2445.6437.7122.7546.4035.89\n48\n53.8446.1628.8860.7142.76\n9658.3151.3433.2170.1245.20\n19260.9553.5636.1074.4148.24\n38462.0654.7737.9576.5149.10\n76862.2655.1537.8476.7349.26\nBaseline66.3959.5739.9780.4951.60\nTable 19: Retrieval k-NN wall clock search times (s) over the entire validation (query) set of ImageNet-\n1K and ImageNet-4K, containing 50K and 200K samples respectively.\nRep. Size\nImageNet-1KImageNet-4K\nExactL2HNSW32ExactL2HNSW32\n80.600.1435.701.17\n160.570.1836.161.65\n32\n0.600.2036.771.75\n640.660.2427.882.21\n128\n0.860.3230.104.15\n2561.290.4634.973.39\n512\n2.170.6846.974.83\n10243.891.0570.597.14\n20487.312.05117.7813.43\nTable 20: FAISS [47] index size and build times for exact k-NN search with L2 Distance metric and\napproximate k-NN search with HNSW32 [62].\nRep. Size\nExact SearchHNSW32\nImageNet-1KImageNet-4KImageNet-1KImageNet-4K\nIndex Size\n(MB)\nIndex Build\nTime (s)\nIndex Size\n(MB)\nIndex Build\nTime (s)\nIndex Size\n(MB)\nIndex Build\nTime (s)\nIndex Size\n(MB)\nIndex Build\nTime (s)\n8400.041310.333814.87124824.04\n16800.082630.274216.15137933.31\n321600.165250.525016.80164237.41\n643200.3810511.056618.31216747.23\n1286410.6421012.1098111.73321889.87\n256\n12811.2742024.20162217.705319102.84\n51225622.5284048.39290327.959521158.47\n1024\n51255.101680817.20546544.0217925236.30\n20481024910.363361641.051059086.1534733468.18\nTable 21: Retrieval k-NN wall clock search times (s) over entire validation (query) set of ImageNet-\n1K over various shortlist lengthsk.\nIndexk = 50k = 100k = 200k = 500k = 1000k = 2048\nExact L20.44060.46050.57360.60601.27812.7047\nHNSW320.11930.14550.18330.21450.23330.2670\nobservation on the expected dimensionality for76.30%top-1 classification accuracy being just\nd∼37. We leave the design and learning of a more optimal policy for future work.\nGrad-CAM  ExamplesWe  analyzed  the  nature  of  model  disagreement  across  representation\nsizes withMRLmodels with the help of Grad-CAM visualization [80].  We observed there were\ncertain classes in ImageNet-1K such as \"tools\", \"vegetables\" and \"meat cutting knife\" which were\noccasionally located around multiple objects and a cluttered environment.  In such scenarios, we\nobserved that smaller representation size models would often get confused due to other objects and fail\nto extract the object of interest which generated the correct label. We also observed a different nature\n31",
    "Figure 12: Progression of relative per-class accuracy vsMRL-2048. As the dimensionality increases,\nthe spread shrinks while the class marked (x) (Madagascar cat) loses accuracy.\nTable 22:  Percentage of ImageNet-1K validation set that is first correctly predicted using each\nrepresentation sized.  We note that18.46%of the samples cannot be correctly predicted by any\nrepresentation size. The remaining81.54%constitutes the oracle accuracy.\nRep. Size816326412825651210242048\nAlways\nWrong\nCorrectly\nPredicted\n67.468.782.581.350.640.310.200.120.0618.46\nof disagreement arising when the models got confused within the same superclass.  For example,\nImageNet-1K has multiple \"snake\" classes, and models often confuse a snake image for an incorrect\nspecies of snake.\nSuperclass PerformanceWe created a 30 superclass subset of the validation set based on wordnet\nhierarchy (Table 24) to quantify the performance ofMRLmodel on ImageNet-1K superclasses.\nTable 25 quantifies the performance with different representation size.\nK    Ablation Studies\nK.1MRLTraining Paradigm\nMatryoshka Representations\nvia Finetuning.To observe if nesting can be induced in models that\nwere not explicitly trained with nesting from scratch, we loaded a pretrained FF-2048 ResNet50 model\nand initialized a newMRLlayer, as defined in Algorithm 2, Appendix C. We then unfroze different\nlayers of the backbone to observe how much non-linearity in the form of unfrozen conv layers needed\nto be present to enforce nesting into a pretrained FF model. A description of these layers can be found\nin the ResNet50 architecture [29]. All models were finetuned with the FFCV pipeline, with same\ntraining configuration as in the end-to-end training aside from changing lr= 0.1and epochs= 10. We\nobserved that finetuning the linear layer alone was insufficient to learnMatryoshka Representations\nat lower dimensionalities. Adding more and more non-linear conv+ReLU layers steadily improved\nclassification accuracy ofd= 8from5%to60%after finetuning, which was only6%less than\ntrainingMRLend-to-end for 40 epochs. This difference was successively less pronounced as we\nincreased dimensionality pastd= 64, to within1.5%for all larger dimensionalities. The full results\nof this ablation can be seen in Table 26.\nRelative Importance.We performed an ablation ofMRLover the relative importance,c\nm\n, of\ndifferent nesting dimensionsm∈M, as defined in Sec. 3. In an attempt to improve performance at\nlower dimensionalities, we boosted the relative importancec\nm\nof training loss at lower dimensions as\nin Eq. 1 with two models,MRL-8boost andMRL-8+16boost. TheMRL-8boost model hadc\nm∈M\n=\n[2,1,1,1,1,1,1,1,1]and theMRL-8+16boost model hadc\nm∈M\n= [2,1.5,1,1,1,1,1,1,1].  The\nrelative importance listc\nm∈M\nhad a 1-to-1 correspondence with nesting dimension setM.   In\nTable 27, we observed thatMRL-8boost improves top-1 accuracy by3%atd= 8, and also improves\ntop-1  accuracy  of  all  representation  scales  from  16  to  256  overMRL,  while  only  hurting  the\nperformance at 512 to 2048 representation scales by a maximum of 0.1%.  This suggests that the\nrelative importancec\nm\ncan be tuned/set for optimal accuracy for allm∈ M, but we leave this\nextension for future work.\n32",
    "Table 23: Oracle classification accuracy of various evaluation datasets for ResNet50–MRLmodel\ntrained on ImageNet-1K.\nTop-1ImageNetV1ImageNetV2ImageNet-AImageNet-RImageNet-Sketch\nFF–204876.964.93.635.123.7\nMRL–Oracle\n81.570.68.739.828.9\nTable 24: 30 Superclasses in ImageNet-1K corresponding to the performance in Table 25.\ninsectmotor vehicleartiodactylvegetablegame equipment\nterrierserpentmachinemeasuring devicesheepdog\nprotective coveringsporting dogvessel, watercraftbuildinglizard\ngarmenthoundmonkeyhome appliancewind instrument\nvesselfishnourishmentelectronic equipmentoscine\nfurniturewading birdtoolcaninemechanism\nTable 25: Performance ofMRLmodel on 31-way classification (1 extra class is for reject token) on\nImageNet-1K superclasses.\nRep. Size816326412825651210242048\nMRL85.5788.6789.4889.8289.9790.1190.1890.2290.21\nMatryoshka Representationsat Arbitrary Granularities.To trainMRL, we used nested di-\nmensions at logarithmic granularitiesM={8,16,...,1024,2048}as detailed in Section 3.  We\nmade this choice for two empirically-driven reasons: a) The accuracy improvement with increasing\nrepresentation size was more logarithmic than linear (as shown by FF models in Figure 2). This indi-\ncated that optimizing for granularities increasing in a non-logarithmic fashion would be sub-optimal\nboth for maximum performance and expected efficiency; b) If we havemarbitrary granularities,\nthe expected cost of the linear classifier to trainMRLscales asO(L∗(m\n2\n))while logarithmic\ngranularities result inO(L∗2log(d))space and compute costs.\nTo demonstrate this effect, we learnedMatryoshka Representationswith uniform (MRL-Uniform)\nnesting  dimensionsm∈ M={8,212,416,620,824,1028,1232,1436,1640,1844,2048}.\nWe   evaluated   this   model   at   the   standard   (MRL-log)   dimensionsm∈ M=\n{8,16,32,64,128,256,512,1024,2048}for ease of comparison to reported numbers using 1-NN ac-\ncuracy (%). As shown in Table 29, we observed that while performance interpolated,MRL-Uniform\nsuffered at low dimensions as the logarithmic spacing ofMRL-logresulted in tighter packing of\ninformation in these initial dimensions.  The higher nesting dimensions ofMRL-Uniformdid not\nhelp in significant accuracy improvement due to accuracy saturation, which is often logarithmic in\nrepresentation size as shown by FF models. Note that the slight improvement at dimensions higher\nthan 512 forMRL-Uniformis due to multiple granularities around them compared to just three for\nMRL-log, which are not useful in practice for efficiency.\nLower Dimensionality.We experimented with trainingMRLwith smaller nesting dimension than\nm= 8, as shown in Table 28, with two models: MRL-4 and MRL-6.  We found that using lower\nthan 8-dimensions to trainMRL, i.e.m\n0\n∈ {4,6}for MRL-4 and MRL-6 respectively, did not\naffect the top-1 accuracy of other granularities significantly.  However, granularities smaller than\n8-dimensions had very low accuracy and were often unusable for deployment along with additional\ntraining difficulty. We also observed a small dip in accuracy at higher dimensions which we attribute\nto the joint loss that now also included the harder optimization of the smallest dimension. Lastly, we\nhypothesize the dimensionality of 8 is an empirically validated design choice due to the considerable\naccuracy it provided along with the ease of training.\nK.2    Retrieval\nAdaptive Retrieval.To examine the effect of increasing shortlist lengths on search time,  we\nperformed a reranking ablation over shortlist lengths forD\ns\n= 16 andD\nr\n= 2048 over ImageNet-1K  in\nTable 30, and over ImageNet-4K in Table 31. We observed that using a larger shortlistksaturated\nImageNet-1K performance atk=200. But using larger shortlists untilk= 2048, the maximum value\n33",
    "Table 26: Top-1 classification accuracy (%) on ImageNet-1K of various ResNet50 models which\nare finetuned on pretrained FF-2048 model. We observed that adding more non-linearities is able to\ninduce nesting to a reasonable extent even if the model was not pretrained with nesting in mind.\nRep. Sizefc\n4.2 conv3,\nfc\n4.2 conv2,\nconv3, fc\n4.2 full,\nfc\nAll (MRL)\n85.1536.1154.7860.0266.63\n16\n13.7958.4267.2670.1073.53\n3232.5267.8171.6272.8475.03\n6452.6672.4273.6174.2975.82\n12864.6074.4174.6775.0376.30\n25669.2975.3075.2375.3876.47\n51270.5175.9675.4775.6476.65\n102470.1976.1875.7075.7576.76\n204869.7276.4475.9675.9776.80\nTable 27: An ablation over boosting training loss at lower nesting dimensions, with top-1 and top-5\naccuracy (%). The models are described in Appendix K.1.\nModelMRLMRL-8boostMRL-8+16boost\nRep. SizeTop-1Top-5Top-1Top-5Top-1Top-5\n866.6384.6669.5386.1969.2485.96\n1673.5389.5273.8689.4473.9189.55\n32\n75.0391.3175.2891.2175.1091.14\n6475.8292.2775.8492.2275.6792.06\n12876.3092.8276.2892.7476.0792.52\n25676.4793.0276.4892.9776.2292.72\n51276.6593.1376.5693.0976.3592.85\n102476.7693.2276.7193.2176.3992.98\n204876.8093.3276.7693.2876.5293.05\nTable 28: An ablation over training with smaller\nnesting dimensionalities in terms of Top-1 accu-\nracy (%).  MRL-4 and MRL-6 are variations of\nthe original model (MRL-8) withm\n0\n∈ {4,6},\nwherem∈Mis part of the nesting_list as seen\nin Alg 2.\nRep. SizeMRL-4MRL-6MRL-8\n427.25--\n6-58.71-\n8\n66.8667.5566.63\n1673.3673.1073.53\n3274.8274.4975.03\n6475.5175.3275.82\n128\n75.9375.6176.30\n25676.0875.8276.47\n51276.3175.9376.65\n102476.3876.0476.76\n2048\n76.4376.1276.80\nTable 29: An ablation over trainingMRLwith\nnesting list at uniformly distributed granulari-\nties.  Entries in theMRL-Uniform column are\nevaluated at logarithmic dimensions for a fair\ncomparison toMRL-Log (standardMRL) with\n1-NN accuracy (%).\nRep. SizeMRL-LogMRL-Uniform\n862.1958.44\n16\n67.9161.11\n3269.4663.82\n6470.1766.44\n12870.5268.71\n256\n70.6270.06\n51270.8270.98\n102470.8971.37\n204870.9771.44\nsupported by the FAISS framework, steadily improved performance on ImageNet-4K. This is likely\ndue to the increased database size, but could also indicate a correlation with ImageNet-4K being\nslightly out-of-distribution making the task at hand harder.\n34",
    "Table 30: Adaptive retrieval ablation over shortlist lengthkforD\ns\n= 16,D\nr\n= 2048on ImageNet-\n1K  with exact search. Entries with the highest P@1 and mAP@10 across allkare in bold.\nShortlist\nLength\nP@1mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\n10070.8865.1963.6262.5961.2469.9669.2468.5367.20\n20070.9065.2763.7362.8261.9770.1069.4468.9068.21\n40070.9465.2663.7162.8162.0370.1569.5169.0268.47\n80070.9665.2363.6462.6961.8570.1669.5269.0268.45\n160070.9665.2063.5862.5861.6670.1669.568.9768.36\n204870.9765.2063.5762.5861.6470.1669.568.9768.35\nTable 31: Adaptive retrieval ablation over shortlist lengthkforD\ns\n= 16,D\nr\n= 2048on ImageNet-\n4K with exact search.\nShortlist\nLength\nP@1mAP@10mAP@25mAP@50mAP@100P@10P@25P@50P@100\n10027.7014.3810.628.266.0720.1216.8714.2911.26\n20028.5615.2111.439.117.1221.2318.1315.7313.27\n400\n29.3415.8312.069.767.7922.0819.0916.8314.54\n80029.8616.3012.5310.238.2622.7219.8317.6515.45\n160030.2416.6312.8610.568.6023.1820.3618.2316.11\n2048\n30.3516.7312.9610.658.6923.3120.5018.4016.30\n35"
  ]
}
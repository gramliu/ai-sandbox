{
  "key": "NV6767IC",
  "url": "http://arxiv.org/pdf/2305.10601",
  "metadata": {
    "title": "Error",
    "abstract": "incorrect id format for 2305.10601.pdf",
    "published": "ttp://arxiv.org/api/errors#incorrect_id_format_for_2305.10601.pdf</id>\n    <title>Error</title>\n    <summary>incorrect id format for 2305.10601.pdf</summary>\n    <updated>2024-05-04T00:00:00-04:00</updated>\n    <link href=\"http://arxiv.org/api/errors#incorrect_id_format_for_2305.10601.pdf\" rel=\"alternate\" type=\"text/html\"/>\n    <author>\n      <name>arXiv api core</name>\n    </author>\n "
  },
  "text": [
    "Tree of Thoughts: Deliberate Problem Solving\nwith Large Language Models\nShunyu Yao\nPrinceton University\nDian Yu\nGoogle DeepMind\nJeffrey Zhao\nGoogle DeepMind\nIzhak Shafran\nGoogle DeepMind\nThomas L. Griffiths\nPrinceton University\nYuan Cao\nGoogle DeepMind\nKarthik Narasimhan\nPrinceton University\nAbstract\nLanguage models are increasingly being deployed for general problem solving\nacross a wide range of tasks, but are still confined to token-level, left-to-right\ndecision-making processes during inference.  This means they can fall short in\ntasks that require exploration, strategic lookahead, or where initial decisions play\na pivotal role. To surmount these challenges, we introduce a new framework for\nlanguage model inference, “Tree of Thoughts” (ToT), which generalizes over the\npopular “Chain of Thought” approach to prompting language models, and enables\nexploration over coherent units of text (“thoughts”) that serve as intermediate steps\ntoward problem solving. ToT allows LMs to perform deliberate decision making\nby considering multiple different reasoning paths and self-evaluating choices to\ndecide the next course of action, as well as looking ahead or backtracking when\nnecessary to make global choices. Our experiments show that ToT significantly\nenhances language models’ problem-solving abilities on three novel tasks requiring\nnon-trivial planning or search: Game of 24, Creative Writing, and Mini Crosswords.\nFor instance, in Game of 24, while GPT-4 with chain-of-thought prompting only\nsolved 4% of tasks, our method achieved a success rate of 74%. Code repo with all\nprompts:https://github.com/princeton-nlp/tree-of-thought-llm.\n1    Introduction\nOriginally designed to generate text, scaled-up versions of language models (LMs) such as GPT [25,\n26,1,23] and PaLM [5] have been shown to be increasingly capable of performing an ever wider\nrange of tasks requiring mathematical, symbolic, commonsense, and knowledge reasoning.  It is\nperhaps surprising that underlying all this progress is still the original autoregressive mechanism for\ngenerating text, which makes token-level decisions one by one and in a left-to-right fashion. Is such\na simple mechanism sufficient for a LM to be built toward a general problem solver? If not, what\nproblems would challenge the current paradigm, and what should be alternative mechanisms?\nThe literature on human cognition provides some clues to answer these questions. Research on “dual\nprocess” models suggests that people have two modes in which they engage with decisions – a fast,\nautomatic, unconscious mode (“System 1”) and a slow, deliberate, conscious mode (“System 2”)\n[30,31,16,15].  These two modes have previously been connected to a variety of mathematical\nmodels used in machine learning. For example, research on reinforcement learning in humans and\nother animals has explored the circumstances under which they engage in associative “model free”\nlearning or more deliberative “model based” planning [7]. The simple associative token-level choices\nof LMs are also reminiscent of “System 1”, and thus might benefit from augmentation by a more\ndeliberate “System 2” planning process that (1) maintains and explores diverse alternatives for current\n37th Conference on Neural Information Processing Systems (NeurIPS 2023).\narXiv:2305.10601v2  [cs.CL]  3 Dec 2023",
    "GĮŔũƜ\njũƜŔũƜ\nGĮŔũƜ\njũƜŔũƜ\nʱÊʲˤGjʱæʲˤ\u001dĵÉ\nGĮŔũƜ\nˤjũƜŔũƜ\nʱçʲˤ\u001dĵÉˁ\u001d\nʟʟʟʟ\naÊĠĵŗƓŤƆˤsĵŤò\nGĮŔũƜ\nˤjũƜŔũƜ\nʱíʲˤÉĵÉˤʱĵũŗŝʲ\nʟʟ\nʟʟ\nʟʟ\nˤˤʝˤƛĎĵũĈĎƜ\n)L[\u0003FRORU\u0003\u000bE\\\u0003<XTLDQ\f\n0DUN\u0003GLIIHUHQFH\u0003E\\\u0003FRORU\nGĮŔũƜ\njũƜŔũƜ\nGĮŔũƜ\njũƜŔũƜ\nGĮŔũƜ\nˤjũƜŔũƜ\nʱçʲˤòĦƙˤ\u001dĵĮŝƓŝŤòĮçƆˤ\nƀƓƜĎˤ\u001dĵÉˤʱ\u001dĵÉˁ\u001dʲ\naÊĠĵŗƓŤƆˤsĵŤò\nGĮŔũƜ\nˤjũƜŔũƜ\nʱíʲˤÉŗòòˤĵƙˤĎĵũĈĎŤŝˤʱÉĵÉʲ\nʟʟ\nʟʟ\nʟʟʟʟʟʟ\nˤˤƛĎĵũĈĎƜ\nʱçʲˤ\u001dĎÊđĮˤĵƙˤĎĵũĈĎƜˤ\nŗĵĭŔƜđĮĈˤʱ\u001dĵÉʲ\nʱÊʲˤGĮŔũƜˁjũƜŔũƜˤ\nŗĵĭŔƜđĮĈˤʱGjʲ\nFigure 1: Schematic illustrating various approaches to problem solving with LLMs. Each rectangle\nbox represents athought, which is a coherent language sequence that serves as an intermediate\nstep toward problem solving. See concrete examples of how thoughts are generated, evaluated, and\nsearched in Figures 2,4,6.\nchoices instead of just picking one, and (2) evaluates its current status and actively looks ahead or\nbacktracks to make more global decisions.\nTo design such a planning process, we return to the origins of artificial intelligence (and cognitive\nscience), drawing inspiration from the planning processes explored by Newell, Shaw, and Simon\nstarting in the 1950s [21,22]. Newell and colleagues characterized problem solving [21] as search\nthrough a combinatorial problem space, represented as a tree. We thus propose the Tree of Thoughts\n(ToT) framework for general problem solving with language models. As Figure 1 illustrates, while\nexisting methods (detailed below) sample continuous language sequences for problem solving, ToT\nactively maintains a tree of thoughts, where eachthoughtis a coherent language sequence that serves\nas an intermediate step toward problem solving (Table 1). Such a high-level semantic unit allows the\nLM to self-evaluate the progress different intermediate thoughts make towards solving the problem\nthrough a deliberate reasoning process that is also instantiated in language (Figures 2,4,6).  This\nimplementation of search heuristics via LM self-evaluation and deliberation is novel, as previous\nsearch  heuristics  are  either  programmed  or  learned.   Finally,  we  combine  this  language-based\ncapability to generate and evaluate diverse thoughts with search algorithms, such as breadth-first\nsearch (BFS) or depth-first search (DFS), which allow systematic exploration of the tree of thoughts\nwith lookahead and backtracking.\nEmpirically, we propose three new problems that challenge existing LM inference methods even with\nthe state-of-the-art language model, GPT-4 [23]:  Game of 24, Creative Writing, and Crosswords\n(Table 1). These tasks require deductive, mathematical, commonsense, lexical reasoning abilities,\nand a way to incorporate systematic planning or search. We show ToT obtains superior results on\nall three tasks by being general and flexible enough to support different levels of thoughts, different\nways to generate and evaluate thoughts, and different search algorithms that adapt to the nature of\ndifferent problems.  We also analyze how such choices affect model performances via systematic\nablations and discuss future directions to better train and use LMs.\n2    Background\nWe first formalize some existing methods that use large language models for problem-solving,\nwhich our approach is inspired by and later compared with. We usep\nθ\nto denote a pre-trained LM\nwith parametersθ, andlowercase lettersx,y,z,s,···to denote a language sequence, i.e.x=\n(x[1],···,x[n])\nwhere eachx[i]is a token, so thatp\nθ\n(x) =\nQ\nn\ni=1\np\nθ\n(x[i]|x[1...i])\n. We use uppercase\nlettersS,···to denote a collection of language sequences.\nInput-output (IO) promptingis the most common way to turn a problem inputxinto output\nywith LM:y∼p\nθ\n(y|prompt\nIO\n(x)), whereprompt\nIO\n(x)wraps inputxwith task instructions\nand/or few-shot input-output examples. For simplicity, let us denotep\nprompt\nθ\n(output|input) =\np\nθ\n(output|prompt(input)), so that IO prompting can be formulated asy∼p\nIO\nθ\n(y|x).\n2",
    "Chain-of-thought (CoT) prompting[38] was proposed to address cases where the mapping of\ninputxto outputyis non-trivial (e.g. whenxis a math question andyis the final numerical answer).\nThe key idea is to introduce a chain ofthoughtsz\n1\n,···,z\nn\nto bridgexandy, where eachz\ni\nis a\ncoherent language sequence that serves as a meaningful intermediate step toward problem solving\n(e.g.z\ni\ncould be an intermediate equation for math QA). To solve problems with CoT, each thought\nz\ni\n∼p\nCoT\nθ\n(z\ni\n|x,z\n1···i−1\n)is sampled sequentially,  then the outputy∼p\nCoT\nθ\n(y|x,z\n1···n\n).   In\npractice,[z\n1···n\n,y]∼p\nCoT\nθ\n(z\n1···n\n,y|x)is sampled as a continuous language sequence,  and the\ndecompositionof thoughts (e.g. is eachz\ni\na phrase, a sentence, or a paragraph) is left ambiguous.\nSelf-consistency with CoT (CoT-SC)[36] is an ensemble approach that sampleski.i.d. chains\nof thought:[z\n(i)\n1···n\n,y\n(i)\n]∼p\nCoT\nθ\n(z\n1···n\n,y|x) (i= 1···k)\n, then returns the most frequent output:\narg max\ny\n#{i|y\n(i)\n=y}.  CoT-SC improves upon CoT, because there are generally different\nthought processes for the same problem (e.g. different ways to prove the same theorem), and the\noutput decision can be more faithful by exploring a richer set of thoughts.  However, within each\nchain there is no local exploration of different thought steps, and the “most frequent” heuristic only\napplies when the output space is limited (e.g. multi-choice QA).\n3    Tree of Thoughts: Deliberate Problem Solving with LM\nA genuine problem-solving processinvolves the repeated use of available informa-\ntion to initiate exploration, which discloses, in turn, more information until a way\nto attain the solution is finally discovered.—— Newell et al. [21]\nResearch on human problem-solving suggests that people search through a combinatorial problem-\nspace – a tree where the nodes represent partial solutions, and the branches correspond to operators\nthat modify them [21,22]. Which branch to take is determined by heuristics that help to navigate the\nproblem-space and guide the problem-solver towards a solution. This perspective highlights two key\nshortcomings of existing approaches that use LMs to solve general problems: 1) Locally, they do not\nexploredifferentcontinuations within a thought process – the branches of the tree. 2) Globally, they\ndo not incorporate any type of planning, lookahead, or backtracking to help evaluate these different\noptions – the kind of heuristic-guided search that seems characteristic of human problem-solving.\nTo address these shortcomings, we introduceTree of Thoughts (ToT), a paradigm that allows LMs to\nexplore multiple reasoning paths over thoughts (Figure 1(c)). ToT frames any problem as a search\nover a tree, where each node is astates= [x,z\n1···i\n]representing a partial solution with the input and\nthe sequence of thoughts so far. A specific instantiation of ToT involves answering four questions:\n1.  How todecomposethe intermediate process into thought steps; 2.  How togeneratepotential\nthoughts from each state; 3. How to heuristicallyevaluatestates; 4. Whatsearchalgorithm to use.\n1. Thought decomposition.While CoT samples thoughts coherently without explicit decomposition,\nToT leverages problem properties to design and decompose intermediate thought steps. As Table 1\nshows, depending on different problems, a thought could be a couple of words (Crosswords), a line of\nequation (Game of 24), or a whole paragraph of writing plan (Creative Writing). In general, a thought\nshould be “small” enough so that LMs can generate promising and diverse samples (e.g. generating\na whole book is usually too “big” to be coherent), yet “big” enough so that LMs can evaluate its\nprospect toward problem solving (e.g. generating one token is usually too “small” to evaluate).\n2. Thought generatorG(p\nθ\n,s,k).Given a tree states= [x,z\n1···i\n], we consider two strategies to\ngeneratekcandidates for the next thought step:\n(a)Samplei.i.d. thoughts  from  a  CoT  prompt  (Creative  Writing,  Figure  4):z\n(j)\n∼\np\nCoT\nθ\n(z\ni+1\n|s) =p\nCoT\nθ\n(z\ni+1\n|x,z\n1···i\n) (j= 1···k).  This works better when the thought\nspace is rich (e.g. each thought is a paragraph), and i.i.d. samples lead to diversity;\n(b)Proposethoughts sequentially using a “propose prompt” (Game of 24, Figure 2; Crosswords,\nFigure 6):[z\n(1)\n,···,z\n(k)\n]∼p\npropose\nθ\n(z\n(1···k)\ni+1\n|s).  This works better when the thought\nspace is more constrained (e.g. each thought is just a word or a line), so proposing different\nthoughts in the same context avoids duplication.\n3. State evaluatorV(p\nθ\n,S).Given a frontier of different states, the state evaluator evaluates the\nprogress they make towards solving the problem, serving as aheuristicfor the search algorithm\nto determine which states to keep exploring and in which order.  While heuristics are a standard\napproach to solving search problems, they are typically either programmed (e.g. DeepBlue [3]) or\n3",
    "learned (e.g. AlphaGo [29]). We propose a third alternative, by using the LM to deliberately reason\nabout states.  When applicable, such a deliberate heuristic can be more flexible than programmed\nrules, and more sample-efficient than learned models. Similar to the thought generator, we consider\ntwo strategies to evaluate states either independently or together:\n(a)Valueeach  state  independently:V(p\nθ\n,S)(s)∼p\nvalue\nθ\n(v|s)∀s∈S,  where  a  value\nprompt reasons about the statesto generate a scalar valuev(e.g. 1-10) or a classifica-\ntion (e.g. sure/likely/impossible) that could be heuristically turned into a value. The basis\nof such evaluative reasoning can vary across problems and thought steps. In this work, we\nexplore evaluation via fewlookaheadsimulations (e.g. quickly confirm that 5, 5, 14 can\nreach 24 via 5 + 5 + 14, or “hotl” can mean “inn” via filling “e” in “”) plus commonsense\n(e.g. 1 2 3 are too small to reach 24, or no word can start with “tzxc”). While the former\nmight promote “good” states, the latter could help eliminate “bad” states. Such valuations\ndo not need to be perfect, and only need to be approximately helpful for decision making.\n(b)Voteacross states:V(p\nθ\n,S)(s) =1[s=s\n∗\n], where a “good” states\n∗\n∼p\nvote\nθ\n(s\n∗\n|S)is\nvoted out based on deliberately comparing different states inSin a vote prompt.  When\nproblem success is harder to directly value (e.g. passage coherency), it is natural to to instead\ncompare different partial solutions and vote for the most promising one.  This is similar\nin spirit to a “step-wise” self-consistency strategy, i.e. cast “which state to explore” as a\nmulti-choice QA, and use LM samples to vote for it.\nFor both strategies, we could prompt the LM multiple times to aggregate the value or vote results to\ntrade time/resource/cost for more faithful/robust heuristics.\nAlgorithm 1ToT-BFS(x,p\nθ\n,G,k,V,T,b)\nRequire:Inputx, LMp\nθ\n, thought generatorG()\n& size limitk, states evaluatorV(), step limitT,\nbreadth limitb.\nS\n0\n←{x}\nfort= 1,···,Tdo\nS\n′\nt\n←{[s,z]|s∈S\nt−1\n,z\nt\n∈G(p\nθ\n,s,k)}\nV\nt\n←V(p\nθ\n,S\n′\nt\n)\nS\nt\n←arg max\nS⊂S\n′\nt\n,|S|=b\nP\ns∈S\nV\nt\n(s)\nend for\nreturnG(p\nθ\n,arg max\ns∈S\nT\nV\nT\n(s),1)\nAlgorithm 2ToT-DFS(s,t,p\nθ\n,G,k,V,T,v\nth\n)\nRequire:Current states, stept, LMp\nθ\n, thought\ngeneratorG()and size limitk, states evaluator\nV(), step limitT, thresholdv\nth\nift > Tthenrecord outputG(p\nθ\n,s,1)\nend if\nfors\n′\n∈G(p\nθ\n,s,k)do▷sorted candidates\nifV(p\nθ\n,{s\n′\n})(s)> v\nthres\nthen▷pruning\nDFS(s\n′\n,t+ 1)\nend if\nend for\n4.  Search algorithm.Finally, within the ToT framework, one can plug and play different search\nalgorithms depending on the tree structure. We explore two relatively simple search algorithms and\nleave more advanced ones (e.g. A* [11], MCTS [2]) for future work:\n(a)Breadth-first search (BFS)(Algorithm 1) maintains a set of thebmost promising states\nper step.  This is used for Game of 24 and Creative Writing where the tree depth is limit\n(T≤3), and initial thought steps can be evaluated and pruned to a small set (b≤5).\n(b)Depth-first search (DFS)(Algorithm 2) explores the most promising state first, until the\nfinal output is reached (t > T), or the state evaluator deems it impossible to solve the\nproblem from the currents(V(p\nθ\n,{s})(s)≤v\nth\nfor a value thresholdv\nth\n).  In the latter\ncase, the subtree fromsisprunedto trade exploration for exploitation. In both cases, DFS\nbacktracksto the parent state ofsto continue exploration.\nConceptually, ToT has several benefits as a method for general problem-solving with LMs: (1)Gener-\nality.IO, CoT, CoT-SC, and self-refinement can be seen as special cases of ToT (i.e. trees of limited\ndepth and breadth; Figure 1). (2)Modularity.The base LM, as well as the thought decomposition,\ngeneration, evaluation, and search procedures can all be varied independently.  (3)Adaptability.\nDifferent problem properties, LM capabilities, and resource constraints can be accommodated. (4)\nConvenience.No extra training is needed, just a pre-trained LM is sufficient. The next section will\nshow how these conceptual benefits translate to strong empirical performance in different problems.\n4    Experiments\nWe propose three tasks that are hard even when sampling from the state-of-the-art language model,\nGPT-4 [23], using standard IO prompting or chain-of-thought (CoT) prompting.  We show how\n4",
    "Game of 24Creative Writing5x5 Crosswords\nInput4 numbers (4 9 10 13)4 random sentences10 clues (h1. presented;..)\nOutputAn equation to reach 24\n(13-9)*(10-4)=24\nA passage of 4 paragraphs\nending in the 4 sentences\n5x5   letters:SHOWN;\nWIRRA; AVAIL; ...\nThoughts3 intermediate equations\n(13-9=4 (left 4,4,10); 10-\n4=6 (left 4,6); 4*6=24)\nA    short    writing    plan\n(1. Introduce a book that\nconnects...)\nWords to fill in for clues:\n(h1. shown; v5. naled; ...)\n#ToT steps315-10 (variable)\nTable 1: Task overview. Input, output, thought examples are in blue.\ndeliberate search in trees of thoughts (ToT) produces better results, and more importantly, interesting\nand promising new ways to use language models to solve problems requiring search or planning.\nUnless otherwise stated, we perform experiments using a Chat Completion mode GPT-4\n1\nwith a\nsampling temperature of 0.7.\n4.1    Game of 24\nGame of 24 is a mathematical reasoning challenge, where the goal is to use 4 numbers and basic\narithmetic operations (+-*/) to obtain 24. For example, given input “4 9 10 13”, a solution output\ncould be “(10 - 4) * (13 - 9) = 24”.\nʳĵĮòˤòƅÊĭŔĦòʴˤ\nGĮŔũƜʝˤʁˤʆˤɾɽˤɾʀ\nĵŝŝđæĦòˤĮòƅƜˤŝŤòŔŝʝˤˤˤ\n3URSRVH\u00033URPSW\nʁˤ̌ˤʆˤ̐ˤɾʀˤʱĦòƙƜʝˤɾɽˤɾʀˤɾʀʲ\nɾɽˤˊˤʁˤ̐ˤʃˤʱĦòƙƜʝˤʃˤʆˤɾʀʲ\nʳʛʛʛĭĵŗòˤĦđĮòŝʟʴ\n7KRXJKW\u0003*HQHUDWLRQ\n/0\n)sÊĦũÊŤòˤđƙˤĈƓsòĮˤĮũĭæòŗŝˤçÊĮˤ\nŗòÊçĎˤɿʁˤʱŝũŗòʫĦđģòĦƆʫđĭŔĵŝŝđæĦòʲ\nɾɽˤɾʁʝˤɾɽˤ̌ˤɾʁˤ̐ˤɿʁʛˤŝũŗò\nʳĭĵŗòˤòƅÊĭŔĦòŝʴ\nɾɽˤɾʀˤɾʀ\n9DOXH\u00033URPSW\nʱɾʀˤˊˤɾɽʲˤʦˤɾʀˤ̐ˤʀˤʦˤɾʀˤ̐ˤʀʆ\nɾɽˤ̌ˤɾʀˤ̌ˤɾʀˤ̐ˤʀʃ\nĎòŗòˤƓŝˤĮĵˤƀÊƆˤƘĵˤĵæŤÊđĮˤɿʁˤƀƓƜĎˤ\nƛĎòŝòˤĮũĭæòŗŝʛˤđĭŔĵŝŝđæĦò\n7KRXJKW\u0003(YDOXDWLRQ\nʱæʲ\nʱçʲ\n/0\nGĮŔũƜʝˤʁˤʆˤɾɽˤɾʀ\nʁ̌ʆ̐ɾʀ\nʱĦòƙƜʝˤɾɽˤɾʀˤɾʀʲ\nɾɽˁʁ̐ʃ\nʱĦòƙƜʝˤʃˤʆˤɾʀʲ\nʟʟ\nɾʀˁʃ̐ʄ\nʱĦòƙƜʝˤʄˤʆʲ\nɾʀˁʆ̐ʁ\nʱĦòƙƜʝˤʁˤʃʲ\nʟʟ\nʁʦʃ̐ɿʁ\nʱĦòƙƜʝˤɿʁʲ\nʁ̌ʃ̐ɾɽ\nʱĦòƙƜʝˤɾɽʲ\nʟʟ\nʱÊʲ\nʳĵĮòˤòƅÊĭŔĦòʴˤ\nGĮŔũƜʝˤʁˤʆˤɾɽˤɾʀ\nĵŝŝđæĦòˤĮòƅƜˤŝŤòŔŝʝˤˤˤ\n\u000bD\f\u00033URSRVH\u00033URPSW\nʁˤ̌ˤʆˤ̐ˤɾʀˤʱĦòƙƜʝˤɾɽˤɾʀˤɾʀʲ\nɾɽˤˊˤʁˤ̐ˤʃˤʱĦòƙƜʝˤʃˤʆˤɾʀʲ\nʳʛʛʛĭĵŗòˤĦđĮòŝʟʴ\n7KRXJKW\u0003*HQHUDWLRQ\n/0\n)sÊĦũÊŤòˤđƙˤĈƓsòĮˤĮũĭæòŗŝˤçÊĮˤ\nŗòÊçĎˤɿʁˤʱŝũŗòʫĦđģòĦƆʫđĭŔĵŝŝđæĦòʲ\nɾɽˤɾʁʝˤɾɽˤ̌ˤɾʁˤ̐ˤɿʁʛˤŝũŗò\nʳĭĵŗòˤòƅÊĭŔĦòŝʴ\nɾɽˤɾʀˤɾʀ\n\u000bE\f\u00039DOXH\u00033URPSW\nʱɾʀˤˊˤɾɽʲˤʦˤɾʀˤ̐ˤʀˤʦˤɾʀˤ̐ˤʀʆ\nɾɽˤ̌ˤɾʀˤ̌ˤɾʀˤ̐ˤʀʃˤĎòŗòˤƓŝˤĮĵˤƀÊƆˤ\nƘĵˤĵæŤÊđĮˤɿʁˤƀƓƜĎˤƛĎòŝòˤæƓĈˤ\nĮũĭæòŗŝʛˤđĭŔĵŝŝđæĦò\n7KRXJKW\u0003(YDOXDWLRQ\n/0\nGĮŔũƜʝˤʁˤʆˤɾɽˤɾʀ\nʁ̌ʆ̐ɾʀ\nʱĦòƙƜʝˤɾɽˤɾʀˤɾʀʲ\nɾɽˁʁ̐ʃ\nʱĦòƙƜʝˤʃˤʆˤɾʀʲ\nʟʟ\nɾʀˁʃ̐ʄ\nʱĦòƙƜʝˤʄˤʆʲ\nɾʀˁʆ̐ʁ\nʱĦòƙƜʝˤʁˤʃʲ\nʟʟ\nʁʦʃ̐ɿʁ\nʱĦòƙƜʝˤɿʁʲ\nʁ̌ʃ̐ɾɽ\nʱĦòƙƜʝˤɾɽʲ\nʟʟ\n)L[\u0003FRORU\u0003\u000bE\\\u0003<XTLDQ\f\n0DUN\u0003GLII\u0003SURPSW\u0003ZLWK\u0003FRORU\nFigure 2: ToT in a game of 24. The LM is prompted for (a) thought generation and (b) valuation.\nTask Setup.We scrape data from 4nums.com, which has 1,362 games that are sorted from easy to\nhard by human solving time, and use a subset of relatively hard games indexed 901-1,000 for testing.\nFor each task, we consider the output as success if it is a valid equation that equals 24 and uses the\ninput numbers each exactly once. We report the success rate across 100 games as the metric.\nBaselines.We use a standard input-output (IO) prompt with 5 in-context examples. For chain-of-\nthought (CoT) prompting, we augment each input-output pair with 3 intermediate equations, each\noperating on two remaining numbers. For example, given input “4 9 10 13”, the thoughts could be\n“13 - 9 = 4 (left: 4 4 10); 10 - 4 = 6 (left: 4 6); 4 * 6 = 24 (left: 24)”. For each game, we sample IO\nand CoT prompting for 100 times for average performance. We also consider a CoT self-consistency\nbaseline, which takes the majority output from 100 CoT samples, and an iterative-refine approach on\ntop of an IO sample for at most10iterations. At each iteration, the LM is conditioned on all previous\nhistory to “reflect on your mistakes and generate a refined answer” if the output is incorrect. Note\nthat it uses groundtruth feedback signals about equation correctness.\nToT Setup.To frame Game of 24 into ToT, it is natural to decompose the thoughts into 3 steps,\neach an intermediate equation. As shown in Figure 2(a), at each tree node, we exact the remaining\nnumbers and prompt the LM to propose some possible next steps. The same “propose prompt” is\nused for all 3 thought steps, though it only has one example with 4 input numbers. We perform a\nbreadth-first search (BFS) in ToT, where at each step we keep the bestb= 5candidates. To perform\ndeliberate BFS in ToT, as shown in Figure 2(b), we prompt LM to evaluate each thought candidate as\n“sure/maybe/impossible” with regard to reaching 24. The aim is to promote correct partial solutions\nthat can be verdicted within few lookahead trials, and eliminate impossible partial solutions based on\n“too big/small” commonsense, and keep the rest “maybe”. We sample values3times for each thought.\n1\nExperiments were done between May 5-16, 2023.\n5",
    "MethodSuccess\nIO prompt7.3%\nCoT prompt4.0%\nCoT-SC(k=100)9.0%\nToT (ours)(b=1)45%\nToT (ours)(b=5)74%\nIO + Refine(k=10)27%\nIO(best of 100)33%\nCoT(best of 100)49%\nTable 2: Game of 24 Results.\n0255075100\n0.2\n0.4\n0.6\n(a) Success rate with nodes visited\nIO (best of k)\nCoT (best of k)\nToT (b=1...5)\n1234Correct\n0.0\n0.2\n0.4\n0.6\n(b) Samples failed at each step\nCoT\nToT (b=5)\nFigure 3: Game of 24 (a) scale analysis & (b) error analysis.\nResults.As shown in Table 2, IO, CoT, and CoT-SC prompting methods perform badly on the task,\nachieving only 7.3%, 4.0%, and 9.0% success rates. In contrast, ToT with a breadth ofb= 1already\nachieves a success rate of45%, whileb= 5achieves74%.  We also consider an oracle setup for\nIO/CoT, by calculating the success rate using best ofksamples(1≤k≤100). To compare IO/CoT\n(best of k) with ToT, we consider calculating the tree nodes visited per task in ToT acrossb= 1···5,\nand map the 5 success rates in Figure 3(a), treating IO/CoT (best ofk) as visitingknodes in a bandit.\nNot surprisingly, CoT scales better than IO, and best of 100 CoT samples achieve a success rate of\n49%, but still much worse than exploring more nodes in ToT (b >1).\nError analysis.Figure 3(b) breaks down at which step CoT and ToT samples fail the task, i.e. the\nthought (in CoT) or allbthoughts (in ToT) are invalid or impossible to reach 24. Notably, around\n60% of CoT samples already failed the task after generating the first step, or equivalently, the first\nthree words (e.g. “4 + 9”). This highlights the issues with direct left-to-right decoding.\n4.2    Creative writing\nNext, we invent a creative writing task where the input is 4 random sentences and the output should\nbe a coherent passage with 4 paragraphs that end in the 4 input sentences respectively. Such a task is\nopen-ended and exploratory, and challenges creative thinking as well as high-level planning.\nTask setup.We sample random sentences from randomwordgenerator.com to form 100 inputs, and\nthere is no groundtruth passage for each input constraint.  As we find that GPT-4 can follow the\ninput constraints most of the time, we focus on evaluating passage coherency in two ways: using a\nGPT-4 zero-shot prompt to provide a 1-10 scalar score, or using human judgments to compare pairs\nof outputs from different methods. For the former, we sample 5 scores and average them for each task\noutput, and we find these 5 scores usually consistent, with a standard deviation of around0.56on\naverage across outputs. For the latter, we employ a subset of the authors in a blind study to compare\nthe coherency of CoT vs. ToT generated passage pairs, where the order of passages is random flipped\nover 100 inputs.\nBaselines.Given the creative nature of the task, both IO and CoT prompts are zero-shot. While the\nformer prompts the LM to directly generate a coherent passage given input constraints, the latter\nprompts the LM to first make a brief plan then write the passage, i.e. the plan serves as the intermediate\nthought step.  We generate 10 IO and CoT samples per task.  We also consider an iterative-refine\n(k≤5) method on top of a random IO sample for each task, where the LM is conditioned on input\nconstraints and the last generated passage to decide if the passage is already “perfectly coherent”,\nand if not generate a refined one.\nToT setup.We build a ToT with depth 2 (and only 1 intermediate thought step) — the LM first\ngeneratesk= 5plans and votes for the best one (Figure 4), then similarly generatek= 5passages\nbased on the best plan then vote for the best one. Here the breadth limitb= 1, as only one choice is\nkept per step. A simple zero-shot vote prompt (“analyze choices below, then conclude which is most\npromising for the instruction”) is used to sample 5 votes at both steps.\nResults.Figure 5(a) shows average GPT-4 scores across 100 tasks, where ToT (7.56) is deemed to\ngenerate more coherent passages than IO (6.19) and CoT (6.93) on average. While such an automatic\nmetric might be noisy, Figure 5(b) confirms the finding by showing that humans prefer ToT over\nCoT in 41 out of 100 passage pairs, while only prefer CoT over ToT in 21 (other 38 pairs are found\n“similarly coherent”). Lastly, iterative-refine is more effective on this natural language task, where\n6",
    "μŗƓŤòˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòˤĵƙˤʁˤŝĎĵŗƜˤŔÊŗÊĈŗÊŔĎŝʛˤĎòˤòĮíˤŝòĮŤòĮçòˤĵƙˤòÊçĎˤŔÊŗÊĈŗÊŔĎˤĭũŝƜˤæòʝˤɾʛˤGƜˤƓŝĮ ̇ƛˤ\níđƙƙƓçũĦƜˤƘĵˤíĵˤÊˤĎÊĮíŝŤÊĮíˤđƙˤƆĵũˤĠũŝƜˤŝŤÊĮíˤĵĮˤƆĵũŗˤĎÊĮíŝʛˤɿʛˤGƜˤçÊũĈĎƜˤĎđĭˤĵƙƙˤĈũÊŗíˤƛĎÊƜˤŝŔÊçòˤŝĭòĦĦòíˤĵƙˤ\nŝòÊŗòíˤŝŤòÊģʛˤʀʛˤμĎòĮˤŝĎòˤíƓíĮ˒ƛˤĦđģòˤÊˤĈũƆˤƀĎĵˤƀÊŝˤƛŗƆđĮĈˤƘĵˤŔƓçģˤĎòŗˤũŔʜˤŝĎòˤŝŤÊŗŤòíˤũŝđĮĈˤŝƓĈĮˤĦÊĮĈũÊĈòʛˤʁʛˤ\n)ÊçĎˤŔòŗŝĵĮˤƀĎĵˤģĮĵƀŝˤƆĵũˤĎÊŝˤÊˤíđƙćòŗòĮƜˤŔòŗçòŔƜƓĵĮˤĵƙˤƀĎĵˤƆĵũˤÊŗòʛˤˤ\nɾʛˤGĮƜŗĵíũçòˤÊĮíˤòƅŔĦÊđĮˤƛĎòˤƘòçĎĮƓŖũòˤĵƙˤ\níĵđĮĈˤÊˤĎÊĮíŝŤÊĮíˤɿʛˤƀƓŤçĎˤƘĵˤÊˤŝŤĵŗƆˤÊæĵũƜˤ\nÊĮˤÊŝƜŗĵĮÊũƜ ̇ŝˤƚđŗŝƜˤƛđĭòˤđĮˤŝŔÊçòˤʀʛˤ#òŝçŗđæòˤ\nÊˤŝƓƜũÊƜƓĵĮˤƀĎòŗòˤÊˤƀĵĭÊĮˤũŝòŝˤŝƓĈĮˤ\nĦÊĮĈũÊĈòˤƘĵˤÊsĵƓíˤũĮƀÊĮŤòíˤÊƜŤòĮƜƓĵĮˤʁʛˤĎòˤ\nƚđĮÊĦˤŔÊŗÊĈŗÊŔĎˤòƅŔĦÊđĮŝˤĎĵƀˤòsòŗƆĵĮòˤĎÊŝˤ\níđƙćòŗòĮƜˤŔòŗçòŔƜƓĵĮŝˤĵƙˤĵƜĎòŗŝ\nɾʛˤGĮƜŗĵíũçƜƓĵĮˤƘĵˤÊĮˤũĮũŝũÊĦˤŝòĦƙˊĎòĦŔˤæĵĵģʜˤ\nĭòĮƜƓĵĮđĮĈˤÊˤĎÊĮíŝŤÊĮíˤÊŝˤÊˤĭòŤÊŔĎĵŗˤƗĵŗˤòĭæŗÊçđĮĈˤ\nçĎÊĦĦòĮĈòŝʛˤɿʛˤ#ƓŝçũŝŝˤƛĎòˤũĮòƅŔòçŤòíˤƛĎđĮĈŝˤĦòÊŗĮòíˤ\nƚŗĵĭˤÊŝƜŗĵĮÊũŤŝʜˤđĮçĦũíđĮĈˤƛĎòˤŝĭòĦĦˤĵƙˤŝŔÊçòʛˤʀʛˤ\n#òŝçŗđæòˤÊˤƀĵĭÊĮ ̇ŝˤçĦòsòŗˤƘÊçƜƓçˤƗĵŗˤÊsĵƓíđĮĈˤũĮƀÊĮŤòíˤ\nÊƜŤòĮƜƓĵĮˤÊƜˤÊˤæÊŗʛˤʁʛˤ\u001dĵĮŤòĭŔĦÊŤòˤĎĵƀˤíđƙćòŗòĮƜˤ\nŔòŗçòŔƜƓĵĮŝˤĵƙˤĵĮòŝòĦƙˤçÊĮˤŝĎÊŔòˤĵĮò ̇ŝˤƓíòĮƜƓŤƆʛ\nʱÊʲˤ\nGĮŔũƜ\nʱæʲˤ\nĦÊĮŝ\nʱʀˤĭĵŗòˤ\nĵĭƓƜŤòíʲ\nʱçʲˤ\n ́ĵŤòŝ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝʟˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤŗòŖũđŗòíˤ\nòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\nʱɽʫʂˤsĵŤòŝʲ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝʟˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤŗòŖũđŗòíˤ\nòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝʟˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤŗòŖũđŗòíˤ\nòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝʟˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤŗòŖũđŗòíˤ\nòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤʳʛʛʛʴˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤ\nŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\nʱʀʫʂˤsĵŤòŝʲ\nʟ\nɾɿ\nGĮŔũƜ\nĦÊĮˤɾ\nĦÊĮˤɿ\nʟʟ\nÊŝŝÊĈò\nɾ\nÊŝŝÊĈò\nɿ\nʟʟ\n)L[\u0003FRORU\u0003\u000bE\\\u0003<XTLDQ\f\nμŗƓŤòˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòˤĵƙˤʁˤŝĎĵŗƜˤŔÊŗÊĈŗÊŔĎŝʛˤĎòˤòĮíˤŝòĮŤòĮçòˤĵƙˤòÊçĎˤŔÊŗÊĈŗÊŔĎˤĭũŝƜˤæòʝˤɾʛˤGƜˤƓŝĮ ̇ƛˤ\níđƙƙƓçũĦƜˤƘĵˤíĵˤÊˤĎÊĮíŝŤÊĮíˤđƙˤƆĵũˤĠũŝƜˤŝŤÊĮíˤĵĮˤƆĵũŗˤĎÊĮíŝʛˤɿʛˤGƜˤçÊũĈĎƜˤĎđĭˤĵƙƙˤĈũÊŗíˤƛĎÊƜˤŝŔÊçòˤŝĭòĦĦòíˤĵƙˤ\nŝòÊŗòíˤŝŤòÊģʛˤʀʛˤμĎòĮˤŝĎòˤíƓíĮ˒ƛˤĦđģòˤÊˤĈũƆˤƀĎĵˤƀÊŝˤƛŗƆđĮĈˤƘĵˤŔƓçģˤĎòŗˤũŔʜˤŝĎòˤŝŤÊŗŤòíˤũŝđĮĈˤŝƓĈĮˤĦÊĮĈũÊĈòʛˤʁʛˤ\n)ÊçĎˤŔòŗŝĵĮˤƀĎĵˤģĮĵƀŝˤƆĵũˤĎÊŝˤÊˤíđƙćòŗòĮƜˤŔòŗçòŔƜƓĵĮˤĵƙˤƀĎĵˤƆĵũˤÊŗòʛˤˤ\nɾʛˤGĮƜŗĵíũçòˤÊĮíˤòƅŔĦÊđĮˤƛĎòˤƘòçĎĮƓŖũòˤ\nĵƙˤíĵđĮĈˤÊˤĎÊĮíŝŤÊĮíˤɿʛˤƀƓŤçĎˤƘĵˤÊˤ\nŝŤĵŗƆˤÊæĵũƜˤÊĮˤÊŝƜŗĵĮÊũƜ ̇ŝˤƚđŗŝƜˤƛđĭòˤđĮˤ\nŝŔÊçòˤʀʛˤ#òŝçŗđæòˤÊˤŝƓƜũÊƜƓĵĮˤƀĎòŗòˤÊˤ\nƀĵĭÊĮˤũŝòŝˤŝƓĈĮˤĦÊĮĈũÊĈòˤƘĵˤÊsĵƓíˤ\nũĮƀÊĮŤòíˤÊƜŤòĮƜƓĵĮˤʁʛˤĎòˤƚđĮÊĦˤ\nŔÊŗÊĈŗÊŔĎˤòƅŔĦÊđĮŝˤĎĵƀˤòsòŗƆĵĮòˤĎÊŝˤ\níđƙćòŗòĮƜˤŔòŗçòŔƜƓĵĮŝˤĵƙˤĵƜĎòŗŝ\nɾʛˤGĮƜŗĵíũçƜƓĵĮˤƘĵˤÊĮˤũĮũŝũÊĦˤŝòĦƙˊĎòĦŔˤæĵĵģʜˤ\nĭòĮƜƓĵĮđĮĈˤÊˤĎÊĮíŝŤÊĮíˤÊŝˤÊˤĭòŤÊŔĎĵŗˤƗĵŗˤ\nòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʛˤɿʛˤ#ƓŝçũŝŝˤƛĎòˤũĮòƅŔòçŤòíˤ\nƛĎđĮĈŝˤĦòÊŗĮòíˤƚŗĵĭˤÊŝƜŗĵĮÊũŤŝʜˤđĮçĦũíđĮĈˤƛĎòˤŝĭòĦĦˤĵƙˤ\nŝŔÊçòʛˤʀʛˤ#òŝçŗđæòˤÊˤƀĵĭÊĮ ̇ŝˤçĦòsòŗˤƘÊçƜƓçˤƗĵŗˤÊsĵƓíđĮĈˤ\nũĮƀÊĮŤòíˤÊƜŤòĮƜƓĵĮˤÊƜˤÊˤæÊŗʛˤʁʛˤ\u001dĵĮŤòĭŔĦÊŤòˤĎĵƀˤ\níđƙćòŗòĮƜˤŔòŗçòŔƜƓĵĮŝˤĵƙˤĵĮòŝòĦƙˤçÊĮˤŝĎÊŔòˤĵĮò ̇ŝˤ\nƓíòĮƜƓŤƆʛ\nʱÊʲˤ\nGĮŔũƜ\nʱæʲˤ\nĦÊĮŝ\nʱçʲˤ\n ́ĵŤòŝ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤʳʛʛʛʴˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤ\nŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\nGĮŔũƜ\nĦÊĮˤɾ\nˤĦÊĮˤɿˤˤ\nʟʟ\nÊŝŝÊĈò\nɾ\nÊŝŝÊĈò\nɿ\nʟʟ\nɽʫʂˤsĵŤòŝ\nĦÊĮˤɾˤˤˤ\nʟʛ\nʟʛ\nɾʟʛ\nɿʟ\nʟ\nʀʫʂˤsĵŤòŝ\nĦÊĮˤʀˁʂˤˤˤ\n8VH\u0003UHG\u0012JUHHQ\u0003WR\u0003VKRZ\u0003ILQDO\u0003FKRLFH\nĮʫʂˤsĵŤòŝ\nĦÊĮˤɿˤˤˤ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤʳʛʛʛʴˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤ\nŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤʳʛʛʛʴˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤ\nŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤʳʛʛʛʴˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤ\nŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\n\u0001ĮÊĦƆƏđĮĈˤòÊçĎˤçĎĵƓçòˤđĮˤíòŤÊƓĦʝˤˤ\u001dĎĵƓçòˤɾʜˤƀĎƓĦòˤđĮçĵŗŔĵŗÊƜđĮĈˤƛĎòˤŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝʜˤŝòòĭŝˤƘĵˤĦÊçģˤÊˤ\nçĦòÊŗˤçĵĮĮòçƜƓĵĮˤæòŤƀòòĮˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤʳʛʛʛʴˤ\u001dĎĵƓçòˤɿˤĵƙćòŗŝˤÊĮˤđĮŤòŗòŝƜđĮĈˤŔòŗŝŔòçƜƓsòˤæƆˤũŝđĮĈˤƛĎòˤ\nŗòŖũđŗòíˤòĮíˤŝòĮŤòĮçòŝˤƘĵˤŔŗòŝòĮƜˤÊˤŝòĦƙˊĎòĦŔˤæĵĵģ ̇ŝˤçĵĮŤòĮƜʛˤGƜˤçĵĮĮòçŤŝˤƛĎòˤŔÊŗÊĈŗÊŔĎŝˤƀƓƜĎˤƛĎòˤƛĎòĭòˤĵƙˤ\nŝòĦƙˊđĭŔŗĵsòĭòĮƜˤÊĮíˤòĭæŗÊçđĮĈˤçĎÊĦĦòĮĈòŝʜˤĭÊģđĮĈˤƗĵŗˤÊˤçĵĎòŗòĮƜˤŔÊŝŝÊĈòʛˤˤʳʛʛʛʴˤĎòˤæòŝƜˤçĎĵƓçòˤƓŝˤɿʛ\nFigure 4: A step of deliberate search in a randomly picked Creative Writing task. Given the input, the\nLM samples 5 different plans, then votes 5 times to decide which plan is best. The majority choice is\nused to consequently write the output passage with the same sample-vote procedure.\nIOCoTToTIO\n+refine\nToT\n+refine\n4\n6\n8\n(a) GPT-4 coherency scores\nCoT > ToTSimilarToT > CoT\n0\n10\n20\n30\n40\n21\n38\n41\n(b) Human coherency comparison\nFigure 5: Creative Writing results.\nMethodSuccess Rate (%)\nLetter Word  Game\nIO38.7140\nCoT\n40.6   15.61\nToT (ours)786020\n+best state82.4   67.535\n-prune65.4   41.55\n-backtrack\n54.6205\nTable 3: Mini Crosswords results.\nit improves IO coherency score from 6.19 to 7.67, and ToT coherency score from 7.56 to 7.91. We\nbelieve it could be thought of as a third approach to thought generation in the ToT framework, where\nnew thoughts can arise from refining old thoughts instead of i.i.d. or sequentially generated.\n4.3    Mini crosswords\nIn Game of 24 and Creative Writing, ToT is relatively shallow — at most 3 thought steps are needed\nto reach the final output. Here we explore5×5mini crosswords as a harder search problem involving\nnatural language.  Again, the goal is not just to solve the task, as more general crosswords can be\nreadily solved with specialized NLP pipelines [34] that leverages large-scale retrieval instead of LM.\nRather, we aim to explore the limit of LM as a general problem solver that explores its own thoughts\nand guides its own exploration with deliberate reasoning as heuristics.\nTask setup.We scrape data from GooBix, which contains 156 games of5×5mini crosswords. As\nwe observe adjacent games contain similar clues, we use 20 games with indices1,6,···,91,96for\ntesting, and games136,141,146,151,156for prompting. For each task, the input describes the 5\nhorizontal clues and 5 vertical clues, and the output should be a board of5×5 = 25letters to solve\nthe crosswords. For evaluation, we consider three levels of success: the portion of correct letters (25\nper game), words (10 per game), and games.\nBaselines.We provide 5 example input-output pairs in the IO prompt, and in the CoT prompt\nadditionally include intermediate words in the order h1..5 then v1..5.  We run each prompt for 10\nsamples and average the results.\nToT setup.We leverage a depth-first search (Algorithm 2) that keeps exploring the most promising\nsubsequent word clue until the state is no longer promising, then backtrack to the parent state to\nexplore alternative thoughts. To make search tractable, subsequent thoughts are constrained not to\nchange any filled words or letters, so that the ToT has at most 10 intermediate steps.  For thought\ngeneration, at each state we translate all existing thoughts (e.g. “h2.motor; h1.tasks” for the state\nin Figure 6(a)) into letter constraints for remaining clues (e.g. “v1.To heap: tm;...”) and prompt\na proposal prompt5times to come up with candidates for where and what to fill in the next word.\nImportantly, we also prompt the LM to give a confidence level for different thoughts, and aggregate\n7",
    ">\u000b\nY\u0016\u0011\u0003HORSH\n\u000f\u0003\u0016\u0011\u0015\f\u000f\u0003\u000b\nK\u0015\u0011\u0003YDOXH\n\u000f\u0003\u0015\u0011\u0013\f\u000f\u0003\u000b\nK\u0014\u0011\u0003SDUFK\n\u000f\u0003\n\u0014\u0011\u001c\f\u000f\u0003\u000b\nY\u0018\u0011\u0003FRYHW\n\u000f\u0003\u0013\u0011\u0019\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0013\u0014\f\u000f\u0003\u000b\nK\u0015\u0011\u0003\nPHULW\n\u000f\u0003\u0013\u0011\u0017\f\u000f\u0003\u000b\nY\u0014\u0011\u0003DOORZ\n\u000f\u0003\u0013\u0011\u0015\f\u000f\u0003\u000b\nY\u0015\u0011\u0003JULQG\n\u000f\u0003\u0013\u0011\u0014\f\u000f\u0003\n\u000b\nK\u0017\u0011\u0003OHSHU\n\u000f\u0003\u0013\u0011\u0014\f@\n\nY\u0016\u0011\u0003HORSH\n\n0XOWLSOH\u0003\nUXQV\n3DUVH\u000f\u0003ILOWHU\u0003RXW\u0003\nQRQ\u0010ILYH\u0010OHWWHU\u000f\u0003\nVFRUH\u000f\u0003DJJUHJDWH\n&KRRVH\u0003\n\u000bVRIW\u0003\nVHOI\u0010FRQVLVWHQF\\\"\f\n\u0014\u00110D[\n\u0015\u00110D[\u0003ZLWKRXW\u0003\nYLRODWH\n\u0016\u0011')6\nGĮŔũƜˤ\u001dĦũòŝ\nĎɿʛĭĵŤĵŗ\nĎɾʛƘÊŝģŝ\nĎʁʛŝÊĦĵĮ\nƘÊŝģŝ\nƘÊŝģŝ\nĎʁʛˤŝÊĦĵĮˤʱŝũŗòʲ\nsʂʛˤŝŗíŗƆˤʱĦĵƀʲ\nsʀʛˤŝƜŗđĮĈˤʱĎƓĈĎʲ\nʟʟ\n7KRXJKW\u00033URSRVDOV\nÊĈĈŗòĈÊŤò\nsʀʛˤŗòŤòĮƜƓĵũŝʞˤƚĦĵƀòŗƆʝˤˈˈˈˈˈˤŝũŗò\n6WDWH\u0003(YDOXDWRU\u0003\u000bRYHU\u0003HDFK\u0003FOXH\f\nsɾʛˤÉĵˤĎòÊŔʝˤƛĭˈŝˈˤʳʛʛʛʴˤđĭŔĵŝŝđæĦò\nsʂʛˤ#òŝƓççÊŤĵŗʞˤĭĵŗòˤíŗƆʝˤŝŗˈĮˈˤʳʛʛʛʴˤĭÊƆæò\nʟʟ\nʱæÊçģƜŗÊçģʲ\nĎʀʛĈŗÊĮí\nʟʟ\nʱŝũæƜŗòòˤŔŗũĮòíʲ\nĎʁʛˤŝÊĦĵĮ\nĎʀʛˤĈŗÊĮí\nsʀʛˤŝƜŗđĮĈ\nʟʟ\n')6\u0003\n2UGHU\nĎʁʛˤŝÊĦĵĮˤʱŝũŗòʲ\nsʂʛˤŝŗíŗƆˤʱĦĵƀʲ\nsʀʛˤŝƜŗđĮĈˤʱĎƓĈĎʲ\nʟʟ\n7KRXJKW\u00033URSRVDOV\nĎʁʛˤŝÊĦĵĮˤʱŝũŗòʲ\nsʂʛˤŝŗíŗƆˤʱĦĵƀʲ\nsʀʛˤŝƜŗđĮĈˤʱĎƓĈĎʲ\nʟʟ\n7KRXJKW\u00033URSRVDOV\nĎʁʛˤŝÊĦĵĮˤʱŝũŗòʲ\nsʂʛˤŝŗíŗƆˤʱĦĵƀʲ\nsʀʛˤŝƜŗđĮĈˤʱĎƓĈĎʲ\nʟʟ\n7KRXJKW\u00033URSRVDOV\nĎʁʛˤŝÊĦĵĮˤʱŝũŗòʲ\nsʂʛˤŝŗíŗƆˤʱĦĵƀʲ\nsʀʛˤŝƜŗđĮĈˤʱĎƓĈĎʲ\nʟʟ\n7KRXJKW\u00033URSRVDOV\nʱÊʲ\nʱæʲ\nƛˤÊˤŝˤģˤŝ\nĭˤĵˤƛˤĵˤŗ\nˈˤˈˤˈˤˈˤˈ\nŝˤÊˤĦˤĵˤĮ\nˈˤˈˤˈˤˈˤˈ\nFigure 6: In Mini Crosswords, (a) how thoughts are proposed and aggregated in a priority queue\nfor depth-first search (DFS), and (b) how a state is evaluated based on the possibility of filling in\neach remaining word clue, and pruned if any remaining clue is deemed not possible to fill by the LM.\nThen DFS backtracks to the parent state and explore the next promising thought for clue.\nthese across proposals to obtain a sorted list of next thoughts to explore (Figure 6(a)).  For state\nevaluations, we similarly translate each state into letter constraints for remaining clues, then evaluate\nfor each clue if it is possible to fill given the constraints. If any remaining clue is deemed “impossible”\nto fill in (e.g. “v1. To heap: tms”), then the exploration of the state’s subtree is pruned and DFS\nbacktracks to its parent to explore the next promising thought. We limit DFS search steps to 100, and\nsimply render the deepest explored state (the first explored one if multiple) into the final output.\nResults.As shown in Table 3, IO and CoT prompting methods perform poorly with a word-level\nsuccess rate less than16%, while ToT significantly improves all metrics, achieving a word-level\nsuccess rate of60%and solving 4 out of 20 games. Such an improvement is not surprising, given IO\nand CoT lack mechanisms to try different clues, make changes to decisions, or backtrack.\nOracle and ablation studies.When outputting from the oracle best DFS state (instead of the\nheuristically determined best state) per task, ToT performance is even higher and actually solves\n7/20 games (Table 3, “+best state”), indicating our simple output heuristics can be readily improved.\nInterestingly, sometimes when the crosswords game is actually solved, the state evaluator might still\ndeem some words as “impossible” and prune — possibly because5×5crosswords by design have\nsome rare or obselete words that GPT-4 cannot recognize\n2\n. Given the state evaluation as a pruning\nheuristic is imperfect, we also explore ablating the pruning, and find the performance generally worse\n(Table 3, “-prune”). However, it could actually find the correct solution for 4/20 games (though only\noutputting 1 via heuristic), 3 of which are games ToT+pruning cannot solve within 100 steps. Thus,\nbetter heuristics for DFS pruning are critical for problem solving in this case. Lastly, we confirm the\nimportance of backtracking by running an ablation that keeps filling the most promising clue for at\nmost 20 steps, allowing overwrites. This is similar to a “greedy” BFS search with breadth limit of\nb= 1, and performs poorly with a word level success of only20%(Table 3, “-backtrack”).\n5    Related Work\nPlanning and decision making.Smart planning and decision making are critical to achieving\npredefined goals. As they are trained on vast amount of world knowledge and human examples, LMs\nare known to have already absorbed rich commonsense that makes it possible to propose reasonable\nplans conditioned on problem setting and environmental states [12,42,37,13,35,41,40].  Our\nproposed ToT approach extends existing planning formulations by considering multiple potentially\nfeasible plans simultaneously at each problem-solving step, and proceeding with the most promising\nones. The integration between thought sampling and value feedback organically integrates planning\nand decision-making mechanisms, enabling effective search inside a solution tree. On the other hand,\ntraditional decision-making procedures usually require training dedicated reward and policy models\nas in reinforcement learning (for example CHAI [33]), whereas we use the LM itself to provide\nthe value estimates for decision making. RAP [9] is a concurrent work that treats language model\n2\nFor example, “agend” is an obsolete form of “agendum”, but GPT-4 deems it a typo for “agenda”. External\nretrieval or web interaction could augment LM for problem solving under knowledge uncertainty.\n8",
    "reasoning as planning with its internal world model, and proposes a MCTS-based method similar to\nToT. However, its tasks are simpler than ours, and its framework lacks the modularity to incorporate\ndifferent tree search algorithms.\nSelf-reflection.Using LLMs to assess the viability of their own predictions is becoming an in-\ncreasingly important procedure in problem solving.  [28,20,24] introduced the “self-reflection”\nmechanism, in which LMs provide feedback to their generation candidates. [4] improves LMs code\ngeneration accuracy by injecting feedback messages generated by the LM itself based on its code\nexecution results. Similarly, [17] also introduces “critic” or review steps over the actions and states,\ndeciding the next action to take in solving computer operation tasks.  Another recent work very\nrelevant to ours is “self-eval guided decoding”   [39].  Similar to our method, self-eval decoding\nalso follows a tree-search procedure with leaves sampled from stochastic beam search decoding,\nwhich are then evaluated by LLM itself with carefully prepared self-eval prompts. Their approach\nhowever, uses the PAL formulation  [8] which represents thoughts as codes, which makes it difficult\nto tackle challenging tasks like creative writing which we consider in this paper. Our Tree-of-Thought\nformulation is thus more versatile and handles challenging tasks on which GPT-4 only achieves very\nlow accuracy with standard prompts.\nProgram-guided LLM generation.Our proposal is also related to recent advancements that organize\nLM’s behavior with systematic procedures [14,44,6,43] or symbolic program guidance. For example,\nSchlag et al.[27]embeds LMs in an algorithmic search procedure to help solve problems like question\nanswering step-by-step, in which the search trees are expanded by relevant paragraphs that might\nprovide answers. This approach however differs from ours in that trees are expanded by sampling\nexternal paragraphs instead of the LM’s own thoughts, and there is no reflection or voting steps.\nAnother approach, LLM+P [18], goes one step further and delegates the actual planning process to a\nclassical planner.\nClassical search methods.Last but not least, our approach can be treated as a modern rendition\nof classical search methods for problem solving.  For example it can be considered as a heuristic\nsearch algorithm like A* [10], in which the heuristic at each search node is provided by the LM’s self-\nassessment. From this perspective, our method is also related to NeuroLogic A*esque decoding [19],\nwhich is inspired by A* search but introduces look-ahead heuristics that are efficient for LMs to\nimprove the beam-search or top-k sampling decoding.   This method however is constrained to\nsentence generation tasks, whereas our framework are designed for complex, multi-step problem\nsolving guarded by value feedback.\n6    Discussion\nLimitations and future directions.Deliberate search such as ToT might not be necessary for many\nexisting tasks that GPT-4 already excels at (see Appendix B.1), and as an initial step this work only\nexplores three relatively simple tasks that challenges GPT-4 (see Appendix B.2 for some GPT-3.5\nexperiment results) and calls of better search and planning abilities incorporated with LMs. However,\nas we begin to deploy LMs for more real-world decision making applications (e.g. coding, data\nanalysis, robotics, etc.), more complex tasks could emerge and present new opportunities to study\nthese research questions. Also, search methods like ToT requires more resources (e.g. GPT-4 API\ncost) than sampling methods in order to improve task performances, but the modular flexibility of\nToT allows users to customize such performance-cost tradeoffs, and ongoing open-source efforts [32]\nshould readily reduce such costs in the near future.  More details about cost and efficiency are in\nAppendix B.3. Lastly, this work focuses on using an off-the-shelf LM, and fine-tuning LMs using\na ToT-style high-level counterfactual decision making (e.g. deliberating over potential choices for\nthe next paragraph, instead of predicting the next token) might present opportunities to enhance the\nproblem-solving capabilities of LMs.\nConclusion.The associative “System 1” of LMs can be beneficially augmented by a “System 2”\nbased on searching a tree of possible paths to the solution to a problem.  The Tree of Thoughts\nframework provides a way to translate classical insights about problem-solving into actionable\nmethods for contemporary LMs.  At the same time, LMs address a weakness of these classical\nmethods, providing a way to solve complex problems that are not easily formalized, such as creative\nwriting. We see this intersection of LMs with classical approaches to AI as an exciting direction.\n9",
    "Broader Impact\nToT is a framework that empowers LMs to more autonomously and intelligently make decisions\nand solve problems.   While current tasks are limited to reasoning and search problems,  future\napplications involving interaction with external environments or humans could bring potential danger,\ne.g. facilitating harmful uses of LMs.  On the other hand, ToT also improves the interpretability\nof model decisions and the opportunity for human alignment, as the resulting representations are\nreadable, high-level language reasoning instead of implicit, low-level token values.\nAcknowledgements\nSY and KN acknowledge support from an Oracle Collaborative Research award and the National\nScience Foundation under Grant No. 2239363. Any opinions, findings, conclusions, or recommenda-\ntions expressed in this material are those of the author(s) and do not necessarily reflect the views of\nthe National Science Foundation. SY is also supported by the Harold W. Dodds Fellowship from\nPrinceton.\nReferences\n[1]T. Brown, B. Mann, N. Ryder, M. Subbiah, J. D. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam,\nG. Sastry,  A. Askell,  et al.   Language models are few-shot learners.Advances in neural\ninformation processing systems, 33:1877–1901, 2020.\n[2]\nC. Browne, E. J. Powley, D. Whitehouse, S. M. M. Lucas, P. I. Cowling, P. Rohlfshagen,\nS. Tavener, D. P. Liebana, S. Samothrakis, and S. Colton. A survey of monte carlo tree search\nmethods.IEEE Transactions on Computational Intelligence and AI in Games, 4:1–43, 2012.\n[3]M. Campbell, A. J. Hoane Jr, and F.-h. Hsu. Deep blue.Artificial intelligence, 134(1-2):57–83,\n2002.\n[4]X. Chen, M. Lin, N. Sch\n ̈\narli, and D. Zhou. Teaching large language models to self-debug, 2023.\n[5]A. Chowdhery, S. Narang, J. Devlin, M. Bosma, G. Mishra, A. Roberts, P. Barham, H. W.\nChung, C. Sutton, S. Gehrmann, et al. Palm: Scaling language modeling with pathways.arXiv\npreprint arXiv:2204.02311, 2022.\n[6]A. Creswell and M. Shanahan. Faithful reasoning using large language models.arXiv preprint\narXiv:2208.14271, 2022.\n[7]N. D. Daw, Y. Niv, and P. Dayan.   Uncertainty-based competition between prefrontal and\ndorsolateral striatal systems for behavioral control.Nature neuroscience, 8(12):1704–1711,\n2005.\n[8]\nL. Gao, A. Madaan, S. Zhou, U. Alon, P. Liu, Y. Yang, J. Callan, and G. Neubig. Pal: Program-\naided language models, 2023.\n[9]S. Hao, Y. Gu, H. Ma, J. J. Hong, Z. Wang, D. Z. Wang, and Z. Hu. Reasoning with language\nmodel is planning with world model.arXiv preprint arXiv:2305.14992, 2023.\n[10]P. E. Hart, N. J. Nilsson, and B. Raphael.  A formal basis for the heuristic determination of\nminimum cost paths.IEEE Transactions on Systems Science and Cybernetics, 4(2):100–107,\n1968. doi: 10.1109/TSSC.1968.300136.\n[11]\nP. E. Hart, N. J. Nilsson, and B. Raphael.  A formal basis for the heuristic determination of\nminimum cost paths.IEEE transactions on Systems Science and Cybernetics, 4(2):100–107,\n1968.\n[12]\nW. Huang, P. Abbeel, D. Pathak, and I. Mordatch.  Language models as zero-shot planners:\nExtracting actionable knowledge for embodied agents, 2022.\n[13]W. Huang, F. Xia, T. Xiao, H. Chan, J. Liang, P. Florence, A. Zeng, J. Tompson, I. Mordatch,\nY. Chebotar, et al.  Inner monologue:  Embodied reasoning through planning with language\nmodels.arXiv preprint arXiv:2207.05608, 2022.\n10",
    "[14]J. Jung, L. Qin, S. Welleck, F. Brahman, C. Bhagavatula, R. L. Bras, and Y. Choi.  Maieu-\ntic prompting:  Logically consistent reasoning with recursive explanations.arXiv preprint\narXiv:2205.11822, 2022.\n[15]  D. Kahneman.Thinking, fast and slow. Macmillan, 2011.\n[16]D. Kahneman, S. Frederick, et al. Representativeness revisited: Attribute substitution in intuitive\njudgment.Heuristics and biases: The psychology of intuitive judgment, 49(49-81):74, 2002.\n[17]  G. Kim, P. Baldi, and S. McAleer. Language models can solve computer tasks, 2023.\n[18]\nB. Liu, Y. Jiang, X. Zhang, Q. Liu, S. Zhang, J. Biswas, and P. Stone.  Llm+p: Empowering\nlarge language models with optimal planning proficiency, 2023.\n[19]X.  Lu,  S.  Welleck,  P.  West,  L.  Jiang,  J.  Kasai,  D.  Khashabi,  R.  L.  Bras,  L.  Qin,  Y.  Yu,\nR. Zellers, N. A. Smith, and Y. Choi. Neurologic a*esque decoding: Constrained text generation\nwith lookahead heuristics. InNorth American Chapter of the Association for Computational\nLinguistics, 2021.\n[20]\nA.  Madaan,  N.  Tandon,  P.  Gupta,  S.  Hallinan,  L.  Gao,  S.  Wiegreffe,  U.  Alon,  N.  Dziri,\nS. Prabhumoye, Y. Yang, S. Welleck, B. P. Majumder, S. Gupta, A. Yazdanbakhsh, and P. Clark.\nSelf-refine: Iterative refinement with self-feedback, 2023.\n[21]A. Newell, J. C. Shaw, and H. A. Simon. Report on a general problem solving program. InIFIP\ncongress, volume 256, page 64. Pittsburgh, PA, 1959.\n[22]  A. Newell, H. A. Simon, et al.Human problem solving. Prentice-Hall, 1972.\n[23]  OpenAI. Gpt-4 technical report.ArXiv, abs/2303.08774, 2023.\n[24]\nD. Paul, M. Ismayilzada, M. Peyrard, B. Borges, A. Bosselut, R. West, and B. Faltings. Refiner:\nReasoning feedback on intermediate representations, 2023.\n[25]A. Radford, K. Narasimhan, T. Salimans, I. Sutskever, et al. Improving language understanding\nby generative pre-training.OpenAI blog, 2018.\n[26]A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, I. Sutskever, et al.  Language models are\nunsupervised multitask learners.OpenAI blog, 1(8):9, 2019.\n[27]\nI. Schlag, S. Sukhbaatar, A. Celikyilmaz, W. tau Yih, J. Weston, J. Schmidhuber, and X. Li.\nLarge language model programs, 2023.\n[28]N. Shinn, B. Labash, and A. Gopinath. Reflexion: an autonomous agent with dynamic memory\nand self-reflection, 2023.\n[29]\nD. Silver, J. Schrittwieser, K. Simonyan, I. Antonoglou, A. Huang, A. Guez, T. Hubert, L. Baker,\nM. Lai, A. Bolton, et al.  Mastering the game of go without human knowledge.nature, 550\n(7676):354–359, 2017.\n[30]\nS. A. Sloman. The empirical case for two systems of reasoning.Psychological bulletin, 119(1):\n3, 1996.\n[31]\nK. E. Stanovich.Who is rational? Studies of individual differences in reasoning. Psychology\nPress, 1999.\n[32]H. Touvron, T. Lavril, G. Izacard, X. Martinet, M.-A. Lachaux, T. Lacroix, B. Rozi\n`\nere, N. Goyal,\nE. Hambro, F. Azhar, et al.  Llama:  Open and efficient foundation language models.arXiv\npreprint arXiv:2302.13971, 2023.\n[33]S. Verma, J. Fu, S. Yang, and S. Levine.  Chai: A chatbot ai for task-oriented dialogue with\noffline reinforcement learning. InProceedings of the 2022 Conference of the North American\nChapter of the Association for Computational Linguistics:  Human Language Technologies,\npages 4471–4491, 2022.\n11",
    "[34]E. Wallace, N. Tomlin, A. Xu, K. Yang, E. Pathak, M. Ginsberg, and D. Klein.  Automated\ncrossword solving.arXiv preprint arXiv:2205.09665, 2022.\n[35]L. Wang, W. Xu, Y. Lan, Z. Hu, Y. Lan, R. K.-W. Lee, and E.-P. Lim. Plan-and-solve prompting:\nImproving zero-shot chain-of-thought reasoning by large language models, 2023.\n[36]X. Wang, J. Wei, D. Schuurmans, Q. Le, E. Chi, and D. Zhou. Self-consistency improves chain\nof thought reasoning in language models.arXiv preprint arXiv:2203.11171, 2022.\n[37]Z. Wang, S. Cai, A. Liu, X. Ma, and Y. Liang. Describe, explain, plan and select: Interactive\nplanning with large language models enables open-world multi-task agents, 2023.\n[38]J. Wei, X. Wang, D. Schuurmans, M. Bosma, E. Chi, Q. Le, and D. Zhou.  Chain of thought\nprompting elicits reasoning in large language models.arXiv preprint arXiv:2201.11903, 2022.\n[39]Y. Xie, K. Kawaguchi, Y. Zhao, X. Zhao, M.-Y. Kan, J. He, and Q. Xie.   Decomposition\nenhances reasoning via self-evaluation guided decoding, 2023.\n[40]S. Yang, O. Nachum, Y. Du, J. Wei, P. Abbeel, and D. Schuurmans.  Foundation models for\ndecision making: Problems, methods, and opportunities, 2023.\n[41]S. Yao, J. Zhao, D. Yu, N. Du, I. Shafran, K. Narasimhan, and Y. Cao.  ReAct: Synergizing\nreasoning and acting in language models.arXiv preprint arXiv:2210.03629, 2022.\n[42]S. Zhang, Z. Chen, Y. Shen, M. Ding, J. B. Tenenbaum, and C. Gan.  Planning with large\nlanguage models for code generation. InThe Eleventh International Conference on Learning\nRepresentations, 2023. URLhttps://openreview.net/forum?id=Lr8cOOtYbfL.\n[43]D. Zhou, N. Sch\n ̈\narli, L. Hou, J. Wei, N. Scales, X. Wang, D. Schuurmans, C. Cui, O. Bousquet,\nQ. Le, et al.  Least-to-most prompting enables complex reasoning in large language models.\narXiv preprint arXiv:2205.10625, 2022.\n[44]X. Zhu, J. Wang, L. Zhang, Y. Zhang, R. Gan, J. Zhang, and Y. Yang.  Solving math word\nproblem via cooperative reasoning induced language models.arXiv preprint arXiv:2210.16257,\n2022.\n12",
    "A    Code, Prompts, Trajectories\nAll code is available athttps://github.com/princeton-nlp/tree-of-thought-llm.\nAll prompts are available athttps://github.com/princeton-nlp/tree-of-thought-llm/\ntree/master/src/tot/prompts.\nTrajectories are available athttps://github.com/princeton-nlp/tree-of-thought-llm/\ntree/master/logs.\nB    Additional Experiment Results\nGiven the motivation of exploring and extending the capability frontier of language models, our\nexperiments in the main paper have focused on a setup with the state-of-the-art language model\n(GPT-4), and three hard tasks invented to challenge it. Here, we report additional experiments with\nweaker LLM or easier tasks, and discuss cost and efficiency.\nGSM8KStrategyQA\nIO5173\nCoT8682\nToT9083\nTable 4: New tasks with\nzero-shot ToT and GPT-4.\nGPT-4GPT-3.5\nIO7.3%6%\nCoT4.0%3%\nToT74%19%\nTable 5: Game of 24 with\nGPT-4 vs GPT-3.5.\nGPT-4GPT-3.5\nIO6.194.47\nCoT6.935.16\nToT7.566.62\nTable 6: Creative Writing with\nGPT-4 vs. GPT-3.5.\nB.1    Extension to new tasks (GSM8k, StrategyQA) with zero-shot ToT\nWhile more common NLP tasks might be too easy for GPT-4 and do not require ToT (which is why\nwe considered harder new tasks), we believe applying ToT to new tasks could be straightforward.\nFor example, we implemented a simple and generic zero-shot ToT-BFS similar to creative writing\n(sample 5 problem solving strategies then vote for the best one; then sample 5 solutions based on the\nbest strategy then vote for the best one) for GSM8K and StrategyQA with few extra lines of code:\n# define the answer format of new tasks\ngsm8k_format = ‘\"the answer is n\" where n is a number’\nstrategyqa_format = ‘either \"the answer is yes\" or \"the answer is no\"’\n# define zero-shot io prompting\nstandard_prompt = ‘Answer the following question with {format}: {input}’\n# define thought format for zero-shot cot and zero-shot tot\ncot_prompt = ‘‘‘Answer the following question: {input}\nMake a strategy then write. Your output should be of the following format:\nStrategy:\nYour strategy about how to answer the question.\nAnswer:\nYour answer to the question. It should end with {format}.\n’’’\n# define zero-shot voting used for zero-shot tot\nvote_prompt = ‘‘‘Given an instruction and several choices,\ndecide which choice is most promising.\nAnalyze each choice in detail, then conclude in the last line\n\"The best choice is {s}\", where s the integer id of the choice.\n’’’\n13",
    "We evaluated on a subset of 100 random GSM8K test and StrategyQA dev questions.  As shown\nin Table 4 and as expected, ToT improves over CoT on both tasks (but only slightly, given GPT-4\n+ CoT is already very good on such tasks, and StrategyQA’s bottleneck is external knowledge, not\nreasoning).  Considering computational costs, it is more suitable to try smaller LLMs + ToT for\ntraditional NLP tasks, or GPT-4 + ToT for hard tasks that challenge GPT-4 + CoT’s reasoning.\nB.2    Extension to new LMs (GPT-3.5)\nTo understand how ToT works with other LLMs, we also ran GPT-3.5-turbo for Creative Writing\n(Table 6) and Game of 24 (Table 5). On both tasks, “ToT>CoT>IO” remains true for GPT-3.5. On\nCreative Writing, we find GPT-3.5+ToT outperform GPT-4+IO, and similar to GPT-4+CoT, which\nsuggests ToT could also work well on weaker language models.\nOn Game of 24 (we changed 1-shot proposal prompt to 3-shot to make it work), GPT-3.5+ToT’s\n19% is far worse than GPT-4+ToT’s 74%.  To further understand the importance of generation\nvs.  evaluation, we ran GPT-4 generation + GPT-3.5 evaluation (64%) and GPT-3.5 generation +\nGPT-4 evaluation (31%). This suggests the game’s bottleneck is thought generation, and different\ngeneration/evaluation language models might attain decent results while reducing costs.\nB.3    Cost and efficiency\nRunning ToT requires significantly more computations than IO or CoT prompting. For example, in\nGame of 24 (Table 7 below), solving a problem with ToT requires 5.5k completion tokens, close to\n100 CoT trials (6.7k tokens). But the performance of ToT is better than best of 100 independent CoT\ntrials.\nGame of 24Generate/Prompt tokensCost per caseSuccess\nIO (best of 100)1.8k / 1.0k$0.1333%\nCoT (best of 100)6.7k / 2.2k$0.4749%\nToT5.5k / 1.4k$0.7474%\nTable 7: Cost analysis on Game of 24.\nOn Creative Writing (Table 8 below), we found ToT takes around 5x completion tokens and money\ncost, which is intuitive asb= 5and most tokens are generated passages.\nCreative WritingGenerate/Prompt tokensCost per case\nIO0.9k / 0.4k$0.06\nCoT0.9k / 0.4k$0.07\nToT4k / 2.9k$0.32\nTable 8: Cost analysis on Game of 24.\nSo completing Game of 24 and Creative Writing’s main ToT experiments cost around0.74×100 +\n0.32×100 = 106\ndollars.  Crosswords’ DFS experiments should be also within100dollars.  In\ngeneral, cost and efficiency of ToT highly depend on the prompts and search algorithms used, and\ncould require 5-100 times more generated tokens than CoT. Some actionable insights:\n•We recommend using ToT on tasks requiring deliberate reasoning, on which CoT struggles.\n•Flexibility of ToT allows some performance-cost tradeoff, e.g., change beam size or vote\nnumber in BFS, few-shot vs.  zero-shot prompting, GPT-3.5 vs.  GPT-4, etc.  One could\nconfigure the setup based on some resource constraints or performance goal.\n•There is much space for improving efficiency, e.g., BFS could early stop when solution is\nfound, or trim down beam size to when some thoughts are ”impossible”.\n•We believe that more computation is indeed required in order for the model to achieve\nstronger intelligence, and this should not become a blocking issue as in the long run, (open-\nsource) LMs will become much cheaper and more efficient. It is also a great direction how\nto better train/finetune LMs for thought generation and/or evaluation.\n14"
  ]
}
{
  "key": "DCTMFCIV",
  "url": "http://arxiv.org/pdf/2308.08155",
  "metadata": {
    "title": "AutoGen: Enabling Next-Gen LLM Applications via Multi-Agent Conversation",
    "abstract": "AutoGen is an open-source framework that allows developers to build LLM\napplications via multiple agents that can converse with each other to\naccomplish tasks. AutoGen agents are customizable, conversable, and can operate\nin various modes that employ combinations of LLMs, human inputs, and tools.\nUsing AutoGen, developers can also flexibly define agent interaction behaviors.\nBoth natural language and computer code can be used to program flexible\nconversation patterns for different applications. AutoGen serves as a generic\ninfrastructure to build diverse applications of various complexities and LLM\ncapacities. Empirical studies demonstrate the effectiveness of the framework in\nmany example applications, with domains ranging from mathematics, coding,\nquestion answering, operations research, online decision-making, entertainment,\netc.",
    "published": "2023-08-16T05:57:52Z"
  },
  "text": [
    "AutoGen: Enabling Next-Gen LLM\nApplications via Multi-Agent Conversation\nQingyun Wu\n†\n, Gagan Bansal\n∗\n, Jieyu Zhang\n±\n, Yiran Wu\n†\n, Beibin Li\n∗\nErkang Zhu\n∗\n, Li Jiang\n∗\n, Xiaoyun Zhang\n∗\n, Shaokun Zhang\n†\n, Jiale Liu\n∓\nAhmed Awadallah\n∗\n, Ryen W. White\n∗\n, Doug Burger\n∗\n, Chi Wang\n∗1\n∗\nMicrosoft Research,\n†\nPennsylvania State University\n±\nUniversity of Washington,\n∓\nXidian University\nAgent Customization\nConversable agent\nFlexible Conversation Patterns\n...\n...\n...\n...\n...\n...\n...\nHierarchical chatJoint chat\nMulti-Agent Conversations\n...\nExecute the \nfollowing code...\nGot it! Here is the \nrevised code ...\nNo, please plot % \nchange!\nPlot a chart of \nMETA and TESLA \nstock price change \nYTD.\nOutput:\n$\nMonth\nOutput:\n%\nMonth\nError package \nyfinanceis not \ninstalled\nSorry! Please first \npip install yfinance\nand then execute \nthe code\nInstalling...\nExample Agent Chat\nFigure 1:AutoGenenables diverse LLM-based applications using multi-agent conversations. (Left)\nAutoGenagents are conversable, customizable, and can be based on LLMs, tools, humans, or even\na combination of them.  (Top-middle) Agents can converse to solve tasks.  (Right) They can form\na  chat,  potentially  with  humans  in  the  loop.   (Bottom-middle)  The  framework  supports  flexible\nconversation patterns.\nAbstract\nAutoGen\n2\nis an open-source framework that allows developers to build LLM ap-\nplications  via  multipleagentsthat  can  converse  with  each  other  to  accomplish\ntasks.AutoGenagents are customizable,conversable,  and can operate in vari-\nous modes that employ combinations of LLMs, human inputs, and tools.  Using\nAutoGen, developers can also flexibly define agent interaction behaviors.  Both\nnatural language and computer code can be used to program flexible conversation\npatterns for different applications.AutoGenserves as a generic framework for\nbuilding diverse applications of various complexities and LLM capacities.  Em-\npirical studies demonstrate the effectiveness of the framework in many example\napplications, with domains ranging from mathematics, coding, question answer-\ning, operations research, online decision-making, entertainment, etc.\n1\nCorresponding author. Email: auto-gen@outlook.com\n2\nhttps://github.com/microsoft/autogen\narXiv:2308.08155v2  [cs.AI]  3 Oct 2023",
    "1    Introduction\nLarge language models (LLMs) are becoming a crucial building block in developing powerfulagents\nthat utilize LLMs for reasoning, tool usage, and adapting to new observations (Yao et al., 2022; Xi\net al., 2023; Wang et al., 2023b) in many real-world tasks.  Given the expanding tasks that could\nbenefit from LLMs and the growing task complexity, an intuitive approach to scale up the power of\nagents is to use multiple agents that cooperate.  Prior work suggests that multiple agents can help\nencourage divergent thinking (Liang et al., 2023), improve factuality and reasoning (Du et al., 2023),\nand provide validation (Wu et al., 2023). In light of the intuition and early evidence of promise, it is\nintriguing to ask the following question:howcan we facilitate the development of LLM applications\nthat could span a broad spectrum of domains and complexities based on the multi-agent approach?\nOur insight is to usemulti-agent conversationsto achieve it.  There are at least three reasons con-\nfirming its general feasibility and utility thanks to recent advances in LLMs:  First, because chat-\noptimized LLMs (e.g., GPT-4) show the ability to incorporate feedback, LLM agents can cooperate\nthroughconversationswith each other or human(s), e.g., a dialog where agents provide and seek rea-\nsoning, observations, critiques, and validation.  Second, because a single LLM can exhibit a broad\nrange of capabilities (especially when configured with the correct prompt and inference settings),\nconversations between differently configured agents can help combine these broad LLM capabilities\nin a modular and complementary manner. Third, LLMs have demonstrated ability to solve complex\ntasks when the tasks are broken into simpler subtasks.  Multi-agent conversations can enable this\npartitioning and integration in an intuitive manner.  How can we leverage the above insights and\nsupport different applications with the common requirement of coordinating multiple agents, poten-\ntially backed by LLMs, humans, or tools exhibiting different capacities?  We desire a multi-agent\nconversation framework with generic abstraction and effective implementation that has the flexibil-\nity to satisfy different application needs.  Achieving this requires addressing two critical questions:\n(1) How can we design individual agents that are capable, reusable, customizable, and effective in\nmulti-agent collaboration?   (2) How can we develop a straightforward,  unified interface that can\naccommodate  a  wide  range  of  agent  conversation  patterns?   In  practice,  applications  of  varying\ncomplexities may need distinct sets of agents with specific capabilities, and may require different\nconversation patterns, such as single- or multi-turn dialogs, different human involvement modes, and\nstatic vs.  dynamic conversation.  Moreover, developers may prefer the flexibility to program agent\ninteractions in natural language or code.  Failing to adequately address these two questions would\nlimit the framework’s scope of applicability and generality.\nWhile there is contemporaneous exploration of multi-agent approaches,\n3\nwe presentAutoGen,  a\ngeneralized multi-agent conversation framework (Figure 1), based on the following new concepts.\n1Customizable and conversable agents.AutoGenuses a generic design of agents that can lever-\nage LLMs,  human inputs,  tools,  or a combination of them.   The result is that developers can\neasily and quickly create agents with different roles (e.g., agents to write code, execute code,\nwire in human feedback, validate outputs, etc.)  by selecting and configuring a subset of built-in\ncapabilities. The agent’s backend can also be readily extended to allow more custom behaviors.\nTo make these agents suitable for multi-agent conversation, every agent is madeconversable–\nthey can receive, react, and respond to messages.  When configured properly, an agent can hold\nmultiple turns of conversations with other agents autonomously or solicit human inputs at cer-\ntain rounds, enabling human agency and automation. The conversable agent design leverages the\nstrong capability of the most advanced LLMs in taking feedback and making progress via chat\nand also allows combining capabilities of LLMs in a modular fashion. (Section 2.1)\n2Conversation programming.A fundamental insight ofAutoGenis to simplify and unify com-\nplex LLM application workflows as multi-agent conversations.  SoAutoGenadopts a program-\nming paradigm centered around these inter-agent conversations.  We refer to this paradigm as\nconversation programming, which streamlines the development of intricate applications via two\nprimary steps:  (1) defining a set of conversable agents with specific capabilities and roles (as\ndescribed above);  (2) programming the interaction behavior between agents via conversation-\ncentriccomputationandcontrol.  Both steps can be achieved via a fusion of natural and pro-\ngramming languages to build applications with a wide range of conversation patterns and agent\nbehaviors.AutoGenprovides ready-to-use implementations and also allows easy extension and\nexperimentation for both steps. (Section 2.2)\n3\nWe refer to Appendix A for a detailed discussion.\n2",
    "AutoGenalso provides a collection of multi-agent applications created using conversable agents\nand conversation programming.  These applications demonstrate howAutoGencan easily support\napplications of various complexities and LLMs of various capabilities. Moreover, we perform both\nevaluation on benchmarks and a pilot study of new applications. The results show thatAutoGencan\nhelp achieve outstanding performance on many tasks, and enable innovative ways of using LLMs,\nwhile reducing development effort. (Section 3 and Appendix D)\n2    TheAutoGenFramework\nTo reduce the effort required for developers to create complex LLM applications across various do-\nmains, a core design principle ofAutoGenis to streamline and consolidate multi-agent workflows\nusing multi-agent conversations.   This approach also aims to maximize the reusability of imple-\nmented agents.  This section introduces the two key concepts ofAutoGen:  conversable agents and\nconversation programming.\n2.1    Conversable Agents\nInAutoGen, aconversable agentis an entity with a specific role that can pass messages to send and\nreceive information to and from other conversable agents, e.g., to start or continue a conversation. It\nmaintains its internal context based on sent and received messages and can be configured to possess\na set of capabilities, e.g., enabled by LLMs, tools, or human input, etc. The agents can act according\nto programmed behavior patterns described next.\nAgent capabilities powered by LLMs, humans, and tools.Since an agent’s capabilities directly\ninfluence how it processes and responds to messages,AutoGenallows flexibility to endow its agents\nwith  various  capabilities.AutoGensupports  many  common  composable  capabilities  for  agents,\nincluding1) LLMs.LLM-backed agents exploit many capabilities of advanced LLMs such as role\nplaying, implicit state inference and progress making conditioned on conversation history, providing\nfeedback, adapting from feedback, and coding. These capabilities can be combined in different ways\nvia novel prompting techniques\n4\nto increase an agent’s skill and autonomy.AutoGenalso offers\nenhanced LLM inference features such as result caching, error handling, message templating, etc.,\nvia an enhanced LLM inference layer.2) Humans.Human involvement is desired or even essential\nin many LLM applications.AutoGenlets a human participate in agent conversation via human-\nbacked agents, which could solicit human inputs at certain rounds of a conversation depending on\nthe agent configuration. The defaultuser proxyagent allowsconfigurablehuman involvement levels\nand patterns,  e.g.,  frequency and conditions for requesting human input including the option for\nhumans to skip providing input.3) Tools.Tool-backed agents have the capability to execute tools\nvia code execution or function execution.  For example, the default user proxy agent inAutoGenis\nable to execute code suggested by LLMs, or make LLM-suggested function calls.\nAgent customization and cooperation.Based on application-specific needs,  each agent can be\nconfigured to have a mix of basic back-end types to display complex behavior in multi-agent con-\nversations.AutoGenallows easy creation of agents with specialized capabilities and roles by reusing\nor extending the built-in agents. The yellow-shaded area of Figure 2 provides a sketch of the built-in\nagents inAutoGen.  TheConversableAgentclass is the highest-level agent abstraction and, by\ndefault, can use LLMs, humans, and tools.  TheAssistantAgentandUserProxyAgentare two\npre-configuredConversableAgentsubclasses, each representing a common usage mode, i.e., act-\ning as an AI assistant (backed by LLMs) and acting as a human proxy to solicit human input or\nexecute code/function calls (backed by humans and/or tools).\nIn the example on the right-hand side of Figure 1, an LLM-backed assistant agent and a tool- and\nhuman-backed user proxy agent are deployed together to tackle a task.  Here, the assistant agent\ngenerates a solution with the help of LLMs and passes the solution to the user proxy agent.  Then,\nthe user proxy agent solicits human inputs or executes the assistant’s code and passes the results as\nfeedback back to the assistant.\n4\nAppendix C presents an example of such novel prompting techniques which empowers the default LLM-\nbacked assistant agent inAutoGento converse with other agents in multi-step problem solving.\n3",
    "2 Initiate Conversations:\nA.initiate_chat(“Plot a chart of META and \nTESLA stock price change YTD.”, B)\nAssistant B\nUser Proxy A\nAutoGen\nAgents\nDeveloper \nCode\n# This funcwill be invoked in \ngenerate_reply\nA.register_reply(B,  \nreply_func_A2B)\ndef reply_func_A2B(msg):\nouput= input_from_human()\n...\nif not ouput:\nif msg includes code:\noutput = execute(msg)\nreturn output\nConversableAgent\nAssistantAgent\nUserProxyAgent\nhuman_input_mode= “NEVER”\ncode_execution_config= False\nDEFAULT_SYSTEM_MESSAGE = “You \nare a helpful AI assistant...\nIn the following cases, suggest \npython code...”\nhuman_input_mode=“ALWAYS”\nGroupChatManager\nhuman_input_mode= “NEVER”\ngroup_chat= [              ] \n# Note: when no reply \nfuncis registered, a \nlist of default reply \nfunctions will be used. \nAgent Customization:\nProgram \nExecution\nPlot a chart of META and \nTESLA stock price change YTD.\nExecute the following \ncode...\nsend\nreceive\nreceive\nConversation-Centric \nComputation\ngenerate_reply\nError: package yfinanceis not \ninstalled\nsend\ngenerate_reply\nSorry! Please first pip install \nyfinanceand then execute\nConversation-Driven \nControl Flow\ngenerate_reply\nThe Resulting Automated Agent Chat:\n...\n1.2 Register a Custom Reply Func:\n1.1 Define Agents:\nUnified Conversation Interfaces:\n•send\n•receive \n•generate_reply\nFigure 2:  Illustration of how to useAutoGento program a multi-agent conversation.  The top sub-\nfigure illustrates the built-in agents provided byAutoGen, which have unified conversation interfaces\nand can be customized.   The middle sub-figure shows an example of usingAutoGento develop\na two-agent system with a custom reply function.  The bottom sub-figure illustrates the resulting\nautomated agent chat from the two-agent system during program execution.\nBy allowing custom agents that can converse with each other, conversable agents inAutoGenserve\nas a useful building block. However, to develop applications where agents make meaningful progress\non tasks, developers also need to be able to specify and mold these multi-agent conversations.\n2.2    Conversation Programming\nAs a solution to the above problem,AutoGenutilizesconversation programming, a paradigm that\nconsiders two concepts: the first iscomputation– the actions agents take to compute their response\nin a multi-agent conversation.  And the second iscontrol flow– the sequence (or conditions) un-\nder which these computations happen.  As we will show in the applications section, the ability to\nprogram these helps implement many flexible multi-agent conversation patterns. InAutoGen, these\ncomputations are conversation-centric.   An agent takes actions relevant to the conversations it is\ninvolved in and its actions result in message passing for consequent conversations (unless a termina-\ntion condition is satisfied). Similarly, control flow is conversation-driven – the participating agents’\ndecisions on which agents to send messages to and the procedure of computation are functions of the\ninter-agent conversation.  This paradigm helps one to reason intuitively about a complex workflow\nas agent action taking and conversation message-passing between agents.\nFigure 2 provides a simple illustration. The bottom sub-figure shows how individual agents perform\ntheir role-specific, conversation-centric computations to generate responses (e.g., via LLM inference\ncalls and code execution).  The task progresses through conversations displayed in the dialog box.\nThe middle sub-figure demonstrates a conversation-based control flow. When the assistant receives\na message, the user proxy agent typically sends the human input as a reply.  If there is no input, it\nexecutes any code in the assistant’s message instead.\n4",
    "AutoGenfeatures the following design patterns to facilitate conversation programming:\n1.Unified  interfaces  and  auto-reply  mechanisms  for  automated  agent  chat.Agents  in\nAutoGenhave unified conversation interfaces for performing the corresponding conversation-\ncentric computation, including asend/receivefunction for sending/receiving messages and a\ngenerate\nreplyfunction for taking actions and generating a response based on the received\nmessage.AutoGenalso introduces and by default adopts anagent auto-replymechanism to\nrealize conversation-driven control: Once an agent receives a message from another agent, it au-\ntomatically invokesgenerate\nreplyand sends the reply back to the sender unless a termination\ncondition is satisfied.AutoGenprovides built-in reply functions based on LLM inference, code\nor function execution, or human input. One can also register custom reply functions to customize\nthe behavior pattern of an agent, e.g., chatting with another agent before replying to the sender\nagent.  Under this mechanism, once the reply functions are registered, and the conversation is\ninitialized, the conversation flow is naturally induced, and thus the agent conversation proceeds\nnaturally without any extra control plane, i.e., a special module that controls the conversation\nflow. For example, with the developer code in the blue-shaded area (marked “Developer Code”)\nof Figure 2,  one can readily trigger the conversation among the agents,  and the conversation\nwould proceed automatically, as shown in the dialog box in the grey shaded area (marked “Pro-\ngram Execution”) of Figure 2. The auto-reply mechanism provides a decentralized, modular, and\nunified way to define the workflow.\n2.Control  by  fusion  of  programming  and  natural  language.AutoGenallows  the  usage  of\nprogramming and natural language in various control flow management patterns:  1)Natural-\nlanguage control via LLMs.InAutoGen, one can control the conversation flow by prompting\nthe LLM-backed agents with natural language.  For instance, the default system message of the\nbuilt-inAssistantAgentinAutoGenuses natural language to instruct the agent to fix errors\nand generate code again if the previous result indicates there are errors.  It also guides the agent\nto confine the LLM output to certain structures, making it easier for other tool-backed agents to\nconsume.  For example, instructing the agent to reply with “TERMINATE” when all tasks are\ncompleted to terminate the program.  More concrete examples of natural language controls can\nbe found in Appendix C. 2)Programming-language control.InAutoGen, Python code can be\nused to specify the termination condition, human input mode, and tool execution logic, e.g., the\nmax number of auto replies.  One can also register programmed auto-reply functions to control\nthe conversation flow with Python code, as shown in the code block identified as “Conversation-\nDriven Control Flow” in Figure 2.  3)Control transition between natural and programming\nlanguage.AutoGenalso supports flexible control transition between natural and programming\nlanguage. One can achieve transition from code to natural-language control by invoking an LLM\ninference containing certain control logic in a customized reply function; or transition from nat-\nural language to code control via LLM-proposed function calls (Eleti et al., 2023).\nIn the conversation programming paradigm,  one can realize multi-agent conversations of diverse\npatterns.  In addition to static conversation with predefined flow,AutoGenalso supports dynamic\nconversation flows with multiple agents.AutoGenprovides two general ways to achieve this:  1)\nCustomizedgenerate\nreplyfunction:   within  the  customizedgeneratereplyfunction,  one\nagent can hold the current conversation while invoking conversations with other agents depending\non the content of the current message and context. 2) Function calls: In this approach, LLM decides\nwhether or not to call a particular function depending on the conversation status.  By messaging\nadditional agents in the called functions, the LLM can drive dynamic multi-agent conversation.  In\naddition,AutoGensupports more complex dynamic group chat via built-inGroupChatManager,\nwhich can dynamically select the next speaker and then broadcast its response to other agents.  We\nelaborate on this feature and its application in Section 3. We provide implemented working systems\nto showcase all these different patterns, with some of them visualized in Figure 3.\n3    Applications ofAutoGen\nWe demonstrate six applications usingAutoGen(see Figure 3) to illustrate its potential in simplify-\ning the development of high-performance multi-agent applications. These applications are selected\nbased on their real-world relevance (A1, A2, A4, A5, A6), problem difficulty and solving capabil-\nities enabled byAutoGen(A1, A2, A3, A4), and innovative potential (A5, A6).  Together, these\ncriteria showcaseAutoGen’s role in advancing the LLM-application landscape.\n5",
    "A1. Math Problem Solving\nA4. Multi-agent Coding\nCommander\nSafeguardWriter\nA6. Conversational Chess\nA2. Retrieval-augmented Chat\nRetrieval-augmented\nAssistant\nRetrieval-augmented\nUser Proxy\nChess Board\nHuman/AI Chess \nPlayer A\nHuman/AI Chess \nPlayer B\nStudent\nAssistant\nAssistant\nExpert\nAsk  \nexpert\nBroadcast\nManager\nSpeak\nA5. Dynamic Group Chat\nALFWorld\nExecutor\nAssistant\nGrounding \nAgent\nA3. ALF Chat\nFigure 3:  Six examples of diverse applications built usingAutoGen.  Their conversation patterns\nshowAutoGen’s flexibility and power.\nA1: Math Problem Solving\nMathematics is a foundational discipline and the promise of leveraging LLMs to assist with math\nproblem solving opens up a new plethora of applications and avenues for exploration, including per-\nsonalized AI tutoring, AI research assistance, etc. This section demonstrates howAutoGencan help\ndevelop LLM applications for math problem solving, showcasing strong performance and flexibility\nin supporting various problem-solving paradigms.\n(Scenario 1) We are able to build a system for autonomous math problem solving by directly reusing\ntwo  built-in  agents  fromAutoGen.   We  evaluate  our  system  and  several  alternative  approaches,\nincluding open-source methods such as Multi-Agent Debate (Liang et al., 2023), LangChain Re-\nAct (LangChain, 2023), vanilla GPT-4, and commercial products ChatGPT + Code Interpreter, and\nChatGPT + Plugin (Wolfram Alpha), on the MATH (Hendrycks et al., 2021) dataset and summarize\nthe results in Figure 4a.  We perform evaluations over 120 randomly selected level-5 problems and\non the entire\n5\ntest dataset from MATH. The results show that the built-in agents fromAutoGenal-\nready yield better performance out of the box compared to the alternative approaches, even including\nthe commercial ones. (Scenario 2) We also showcase a human-in-the-loop problem-solving process\nwith the help ofAutoGen.  To incorporate human feedback withAutoGen, one only needs to set\nhuman\ninputmode=‘ALWAYS’in theUserProxyAgentof the system in scenario 1.  We demon-\nstrate that this system can effectively incorporate human inputs to solve challenging problems that\ncannot be solved without humans.   (Scenario 3) We further demonstrate a novel scenario where\nmultiplehuman users can participate in the conversations during the problem-solving process.  Our\nexperiments and case studies for these scenarios show that AutoGen enables better performance or\nnew experience compared to other solutions we experimented with. Due to the page limit, details of\nthe evaluation, including case studies in three scenarios are in Appendix D.\nA2: Retrieval-Augmented Code Generation and Question Answering\nRetrieval augmentation has emerged as a practical and effective approach for mitigating the intrinsic\nlimitations of LLMs by incorporating external documents.  In this section, we employAutoGento\nbuild a Retrieval-Augmented Generation (RAG) system (Lewis et al., 2020; Parvez et al., 2021)\nnamed Retrieval-augmented Chat.  The system consists of two agents: a Retrieval-augmented User\nProxy agent and a Retrieval-augmented Assistant agent, both of which are extended from built-in\nagents fromAutoGen.  The Retrieval-augmented User Proxy includes a vector database (Chroma,\n5\nWe did not evaluate ChatGPT on the whole dataset since it requires substantial manual effort and is re-\nstricted by its hourly message-number limitation.   Multi-agent debate and LangChain ReAct were also not\nevaluated since they underperformed vanilla GPT-4 on the smaller test set.\n6",
    "AutoGenChatGPT\n+Code\nChatGPT\n+Plugin\nGPT-4Multi-Agent\nDebate\nLangChain\nReAct\nMethods\n0\n10\n20\n30\n40\n50\n60\n70\n80\nSuccess Ratio (%)\n52.5%\n48.33%\n45.0%\n30.0%\n26.67%\n23.33%\n69.48%\n55.18%\n120 Level-5 problems\nWhole Dataset\n(a) A1: Performance on MATH (w/ GPT-4).\nF1Recall\nMetrics\n0\n10\n20\n30\n40\n50\n60\n70\n80\nPercentage (%)\n25.88%\n66.65%\n15.12%\n58.56%\n22.79%\n62.59%\nAutoGen\nAuotGen W/O interactive retrieval\nDPR\n(b) A2: Q&A tasks (w/ GPT-3.5).\nAutoGen (3 agent)AutoGen (2 agent)ReAct\nMethods\n0\n20\n40\n60\n80\n100\nSuccess Ratio (%)\n69%\n54%54%\n77%\n63%\n66%\nAverage\nBest of 3\n(c) A3: Performance on ALFWorld.\nF1Recall\nMetrics\n0\n20\n40\n60\n80\n100\nPercentage (%)\n96.00%\n98.00%\n88.00%\n78.00%\n83.00%\n72.00%\n48.00%\n32.00%\nMulti-GPT4\nSingle-GPT4\nMulti-GPT3.5\nSingle-GPT3.5\n(d) A4: Performance on OptiGuide.\nFigure 4:  Performance on four applications A1-A4.  (a) shows thatAutoGenagents can be used\nout of the box to achieve the most competitive performance on math problem solving tasks;  (b)\nshows  thatAutoGencan  be  used  to  realize  effective  retrieval  augmentation  and  realize  a  novel\ninteractive retrieval feature to boost performance on Q&A tasks; (c) shows thatAutoGencan be used\nto introduce a three-agent system with a grounding agent to improve performance on ALFWorld;\n(d) shows that a multi-agent design is helpful in boosting performance in coding tasks that need\nsafeguards.\n2023) with SentenceTransformers (Reimers & Gurevych, 2019) as the context retriever. A detailed\nworkflow description of the Retrieval-augmented Chat is provided in Appendix D.\nWe evaluate Retrieval-augmented Chat in both question-answering and code-generation scenarios.\n(Scenario 1) We first perform an evaluation regarding natural question answering on the Natural\nQuestions dataset (Kwiatkowski et al., 2019) and report results in Figure 4b. In this evaluation, we\ncompare our system with DPR (Dense Passage Retrieval) following an existing evaluation\n6\nprac-\ntice  (Adlakha  et  al.,  2023).   Leveraging  the  conversational  design  and  natural-language  control,\nAutoGenintroduces a novelinteractive retrievalfeature in this application: whenever the retrieved\ncontext does not contain the information, instead of terminating, the LLM-based assistant would\nreply “Sorry, I cannot find any information about... UPDATE CONTEXT.” which will invoke more\nretrieval attempts.  We conduct an ablation study in which we prompt the assistant agent to say“I\ndon’t know”instead of“UPDATE CONTEXT.”in cases where relevant information is not found,\nand report results in Figure 4b.  The results show that the interactive retrieval mechanism indeed\nplays a non-trivial role in the process. We give a concrete example and results using this appealing\nfeature in Appendix D. (Scenario 2) We further demonstrate how Retrieval-augmented Chat aids in\ngenerating code based on a given codebase that contains code not included in GPT-4’s training data.\nEvaluation and demonstration details for both scenarios are included in Appendix D.\n6\nThe results of DPR with GPT-3.5 shown in Figure 4b are from (Adlakha et al., 2023). We use GPT-3.5 as\na shorthand for GPT-3.5-turbo.\n7",
    "A3: Decision Making in Text World Environments\nIn this subsection, we demonstrate howAutoGencan be used to develop effective applications that\ninvolve interactive or online decision making. We perform the study using the ALFWorld (Shridhar\net al., 2021) benchmark, which includes a diverse collection of synthetic language-based interactive\ndecision-making tasks in household environments.\nWithAutoGen, we implemented a two-agent system to solve tasks from ALFWorld.  It consists of\nan LLM-backed assistant agent responsible for suggesting plans to conduct a task and an executor\nagent responsible for executing actions in the ALFWorld environments. This system integrates Re-\nAct prompting (Yao et al., 2022), and is able to achieve similar performance. A common challenge\nencountered in both ReAct and theAutoGen-based two-agent system is their occasional inability to\nleverage basic commonsense knowledge about the physical world.  This deficiency can lead to the\nsystem getting stuck in a loop due to repetitive errors. Fortunately, the modular design ofAutoGen\nallows us to address this issue effectively:  WithAutoGen,  we are able to introduce a grounding\nagent, which supplies crucial commonsense knowledge–such as“You must find and take the object\nbefore you can examine it. You must go to where the target object is before you can use it.”–whenever\nthe system exhibits early signs of recurring errors.  It significantly enhances the system’s ability to\navoid getting entangled in error loops. We compare the task-solving performance of the two variants\nof our system with GPT-3.5-turbo and ReAct\n7\non the 134 unseen tasks from ALFWorld and report\nresults in Figure 4c.   The results show that introducing a grounding agent could bring in a 15%\nperformance gain on average. Upon examining the systems’ outputs, we observe that the grounding\nagent, by delivering background commonsense knowledge at the right junctures, significantly miti-\ngated the tendency of the system to persist with a flawed plan, thereby avoiding the creation of error\nloops. For an example trajectory comparing the systems see Appendix D, Figure 10.\nA4: Multi-Agent Coding\nIn this subsection, we useAutoGento build a multi-agent coding system based on OptiGuide (Li\net al., 2023a), a system that excels at writing code to interpret optimization solutions and answer\nuser questions, such as exploring the implications of changing a supply-chain decision or under-\nstanding why the optimizer made a particular choice.  The second sub-figure of Figure 3 shows the\nAutoGen-based implementation. The workflow is as follows: the end user sends questions, such as\n“What if we prohibit shipping from supplier 1 to roastery 2?” to the Commander agent.  The Com-\nmander coordinates with two assistant agents, including the Writer and the Safeguard, to answer\nthe question.  The Writer will craft code and send the code to the Commander.  After receiving the\ncode, the Commander checks the code safety with the Safeguard; if cleared, the Commander will\nuse external tools (e.g., Python) to execute the code, and request the Writer to interpret the execution\nresults.  For instance, the writer may say “if we prohibit shipping from supplier 1 to roastery 2, the\ntotal cost would increase by 10.5%.” The Commander then provides this concluding answer to the\nend user. If, at a particular step, there is an exception, e.g., security red flag raised by Safeguard, the\nCommander redirects the issue back to the Writer with debugging information.  The process might\nbe repeated multiple times until the user’s question is answered or timed-out.\nWithAutoGenthe core workflow code for OptiGuide was reduced from over 430 lines to 100 lines,\nleading to significant productivity improvement.  We provide a detailed comparison of user expe-\nrience with ChatGPT+Code Interpreter andAutoGen-based OptiGuide in Appendix D, where we\nshow thatAutoGen-based OptiGuide could save around 3x of user’s time and reduce user interac-\ntions by 3 - 5 times on average. We also conduct an ablation showing that multi-agent abstraction is\nnecessary. Specifically, we construct a single-agent approach where a single agent conducts both the\ncode-writing and safeguard processes. We tested the single- and multi-agent approaches on a dataset\nof 100 coding tasks, which is crafted to include equal numbers of safe and unsafe tasks. Evaluation\nresults as reported in Figure 4d show that the multi-agent design boosts the F-1 score in identifying\nunsafe code by 8% (with GPT-4) and 35% (with GPT-3.5-turbo).\n7\nResults of ReAct are obtained by directly running its official code with default settings.  The code uses\ntext-davinci-003as backend LM and does not support GPT-3.5-turbo or GPT-4.\n8",
    "A5: Dynamic Group Chat\nAutoGenprovides native support for adynamic group chatcommunication pattern, in which par-\nticipating agents share the same context and converse with the others in a dynamic manner instead\nof following a pre-defined order.  Dynamic group chat relies on ongoing conversations to guide the\nflow of interaction among agents.  These make dynamic group chat ideal for situations where col-\nlaboration without strict communication order is beneficial.  InAutoGen, theGroupChatManager\nclass serves as the conductor of conversation among agents and repeats the following three steps:\ndynamically selecting a speaker, collecting responses from the selected speaker, and broadcasting\nthe message (Figure 3-A5). For the dynamic speaker-selection component, we use a role-play style\nprompt.  Through a pilot study on 12 manually crafted complex tasks, we observed that compared\nto a prompt that is purely based on the task, utilizing a role-play prompt often leads to more effec-\ntive consideration of both conversation context and role alignment during the problem-solving and\nspeaker-selection process.  Consequently, this leads to a higher success rate and fewer LLM calls.\nWe include detailed results in Appendix D.\nA6: Conversational Chess\nUsingAutoGen, we developed Conversational Chess, a natural language interface game shown in\nthe last sub-figure of Figure 3. It features built-in agents for players, which can be human or LLM,\nand a third-party board agent to provide information and validate moves based on standard rules.\nWithAutoGen, we enabled two essential features: (1) Natural, flexible, and engaging game dynam-\nics, enabled by the customizable agent design inAutoGen.  Conversational Chess supports a range\nof game-play patterns,  including AI-AI, AI-human,  and human-human,  with seamless switching\nbetween these modes during a single game. An illustrative example of these entertaining game dy-\nnamics can be found in Figure 15, Appendix D. (2) Grounding, which is a crucial aspect to maintain\ngame integrity. During gameplay, the board agent checks each proposed move for legality; if a move\nis invalid, the agent responds with an error, prompting the player agent to re-propose a legal move\nbefore continuing. This process ensures that only valid moves are played and helps maintain a con-\nsistent gaming experience. As an ablation study, we removed the board agent and instead only relied\non a relevant prompt“you should make sure both you and the opponent are making legal moves”to\nground their move. The results highlighted that without the board agent, illegitimate moves caused\ngame disruptions.  The modular design offered flexibility, allowing swift adjustments to the board\nagent in response to evolving game rules or varying chess rule variants.  A comprehensive demon-\nstration of this ablation study is in Appendix D.\n4    Discussion\nWe introduced an open-source library,AutoGen,  that incorporates the paradigms of conversable\nagents and conversation programming.  This library utilizes capable agents that are well-suited for\nmulti-agent cooperation.  It features a unified conversation interface among the agents, along with\nan auto-reply mechanisms, which help establish an agent-interaction interface that capitalizes on the\nstrengths of chat-optimized LLMs with broad capabilities while accommodating a wide range of\napplications.AutoGenserves as a general framework for creating and experimenting with multi-\nagent systems that can easily fulfill various practical requirements, such as reusing, customizing,\nand extending existing agents, as well as programming conversations between them.\nOur experiments, as detailed in Section 3, demonstrate that this approach offers numerous benefits.\nThe adoption ofAutoGenhas resulted in improved performance (over state-of-the-art approaches),\nreduced development code, and decreased manual burden for existing applications.  It offers flex-\nibility  to  developers,  as  demonstrated  in  A1  (scenario  3),  A5,  and  A6,  whereAutoGenenables\nmulti-agent chats to follow a dynamic pattern rather than fixed back-and-forth interactions. It allows\nhumans to engage in activities alongside multiple AI agents in a conversational manner. Despite the\ncomplexity of these applications (most involving more than two agents or dynamic multi-turn agent\ncooperation), the implementation based onAutoGenremains straightforward. Dividing tasks among\nseparate agents promotes modularity.  Furthermore, since each agent can be developed, tested, and\nmaintained separately, this approach simplifies overall development and code management.\n9",
    "Although this work is still in its early experimental stages, it paves the way for numerous future\ndirections and research opportunities. For instance, we can explore effective integration of existing\nagent implementations into our multi-agent framework and investigate the optimal balance between\nautomation and human control in multi-agent workflows. As we further develop and refineAutoGen,\nwe aim to investigate which strategies, such as agent topology and conversation patterns, lead to the\nmost effective multi-agent conversations while optimizing the overall efficiency, among other fac-\ntors. While increasing the number of agents and other degrees of freedom presents opportunities for\ntackling more complex problems, it may also introduce new safety challenges that require additional\nstudies and careful consideration.\nWe provide more discussion in Appendix B, including guidelines for usingAutoGenand direction\nof future work.  We hopeAutoGenwill help improve many LLM applications in terms of speed of\ndevelopment, ease of experimentation, and overall effectiveness and safety.  We actively welcome\ncontributions from the broader community.\nEthics statement\nThere are several potential ethical considerations that could arise from the development and use of\ntheAutoGenframework.\n•  Privacy  and  Data  Protection:  The  framework  allows  for  human  participation  in  conversations\nbetween agents.  It is important to ensure that user data and conversations are protected, and that\ndevelopers use appropriate measures to safeguard privacy.\n•  Bias and Fairness: LLMs have been shown to exhibit biases present in their training data (Navigli\net al., 2023).  When using LLMs in theAutoGenframework, it is crucial to address and mitigate\nany biases that may arise in the conversations between agents.  Developers should be aware of\npotential biases and take steps to ensure fairness and inclusivity.\n•  Accountability and Transparency:  As discussed in the future work section, as the framework in-\nvolves multiple agents conversing and cooperating, it is important to establish clear accountability\nand transparency mechanisms. Users should be able to understand and trace the decision-making\nprocess of the agents involved in order to ensure accountability and address any potential issues\nor biases.\n•  Trust and Reliance:AutoGenleverages human understanding and intelligence while providing\nautomation through conversations between agents.  It is important to consider the impact of this\ninteraction on user experience, trust, and reliance on AI systems.  Clear communication and user\neducation about the capabilities and limitations of the system will be essential (Cai et al., 2019).\n•  Unintended Consequences: As discussed before, the use of multi-agent conversations and automa-\ntion in complex tasks may have unintended consequences. In particular, allowing LLM agents to\nmake changes in external environments through code execution or function calls, such as installing\npackages, could be risky. Developers should carefully consider the potential risks and ensure that\nappropriate safeguards are in place to prevent harm or negative outcomes.\nAcknowledgements\nThe work presented in this report was made possible through discussions and feedback from Peter\nLee,  Johannes  Gehrke,  Eric  Horvitz,  Steven  Lucco,  Umesh  Madan,  Robin  Moeur,  Piali  Choud-\nhury, Saleema Amershi, Adam Fourney, Victor Dibia, Guoqing Zheng, Corby Rosset, Ricky Loynd,\nEce Kamar, Rafah Hosn, John Langford, Ida Momennejad, Brian Krabach, Taylor Webb, Shanka\nSubhra Mondal, Wei-ge Chen, Robert Gruen, Yinan Li, Yue Wang, Suman Nath, Tanakorn Leesat-\napornwongsa, Xin Wang, Shishir Patil, Tianjun Zhang, Saehan Jo, Ishai Menache, Kontantina Mel-\nlou, Runlong Zhou, Feiran Jia, Hamed Khanpour, Hamid Palangi, Srinagesh Sharma, Julio Albinati\nCortez, Amin Saied, Yuzhe Ma, Dujian Ding, Linyong Nan, Prateek Yadav, Shannon Shen, Ankur\nMallick, Mark Encarnaci\n ́\non, Lars Liden, Tianwei Yue, Julia Kiseleva, Anastasia Razdaibiedina, and\nLuciano Del Corro. Qingyun Wu would like to acknowledge the funding and research support from\nthe College of Information Science and Technology at Penn State University.\n10",
    "References\nVaibhav Adlakha, Parishad BehnamGhader, Xing Han Lu, Nicholas Meade, and Siva Reddy.  Eval-\nuating correctness and faithfulness of instruction-following models for question answering.arXiv\npreprint arXiv:2307.16877, 2023.\nSaleema  Amershi,  Dan  Weld,  Mihaela  Vorvoreanu,  Adam  Fourney,  Besmira  Nushi,  Penny  Col-\nlisson,  Jina  Suh,  Shamsi  Iqbal,  Paul  N  Bennett,  Kori  Inkpen,  et  al.   Guidelines  for  human-ai\ninteraction.  InProceedings of the 2019 chi conference on human factors in computing systems,\n2019.\nDario Amodei, Chris Olah, Jacob Steinhardt, Paul Christiano, John Schulman, and Dan Man\n ́\ne. Con-\ncrete problems in ai safety, 2016.\nAutoGPT. Documentation — auto-gpt.https://docs.agpt.co/, 2023.\nBabyAGI. Github — babyagi.https://github.com/yoheinakajima/babyagi, 2023.\nCarrie J. Cai, Samantha Winter, David F. Steiner, Lauren Wilcox, and Michael Terry.  ”hello ai”:\nUncovering the onboarding needs of medical practitioners for human-ai collaborative decision-\nmaking.Proceedings of the ACM on Human-Computer Interaction, 2019.\nTianle Cai, Xuezhi Wang, Tengyu Ma, Xinyun Chen, and Denny Zhou.  Large language models as\ntool makers.arXiv preprint arXiv:2305.17126, 2023.\nChroma. Chromadb.https://github.com/chroma-core/chroma, 2023.\nVictor Dibia.  LIDA: A tool for automatic generation of grammar-agnostic visualizations and info-\ngraphics using large language models.  InProceedings of the 61st Annual Meeting of the Associ-\nation for Computational Linguistics (Volume 3:  System Demonstrations), Toronto, Canada, July\n2023. Association for Computational Linguistics.\nYihong Dong, Xue Jiang, Zhi Jin, and Ge Li. Self-collaboration code generation via chatgpt.arXiv\npreprint arXiv:2304.07590, 2023.\nYilun  Du,  Shuang  Li,  Antonio  Torralba,  Joshua  B  Tenenbaum,  and  Igor  Mordatch.Improv-\ning  factuality  and  reasoning  in  language  models  through  multiagent  debate.arXiv  preprint\narXiv:2305.14325, 2023.\nAtty  Eleti,  Jeff  Harris,  and  Logan  Kilpatrick.   Function  calling  and  other  api  updates.https:\n//openai.com/blog/function-calling-and-other-api-updates, 2023.\nGuidance. Guidance.https://github.com/guidance-ai/guidance, 2023.\nDan Hendrycks, Collin Burns, Saurav Kadavath, Akul Arora, Steven Basart, Eric Tang, Dawn Song,\nand Jacob Steinhardt.   Measuring mathematical problem solving with the math dataset.arXiv\npreprint arXiv:2103.03874, 2021.\nSirui  Hong,  Xiawu  Zheng,  Jonathan  Chen,  Yuheng  Cheng,  Ceyao  Zhang,  Zili  Wang,  Steven\nKa Shing Yau, Zijuan Lin, Liyang Zhou, Chenyu Ran, et al.  Metagpt:  Meta programming for\nmulti-agent collaborative framework.arXiv preprint arXiv:2308.00352, 2023.\nEric Horvitz. Principles of mixed-initiative user interfaces. InProceedings of the SIGCHI conference\non Human Factors in Computing Systems, 1999.\nHuggingFace.Transformers   agent.https://huggingface.co/docs/transformers/\ntransformers_agents, 2023.\nGeunwoo Kim, Pierre Baldi, and Stephen McAleer.  Language models can solve computer tasks.\narXiv preprint arXiv:2303.17491, 2023.\nTom Kwiatkowski,  Jennimaria Palomaki,  Olivia Redfield,  Michael Collins,  Ankur Parikh,  Chris\nAlberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, et al.  Natural questions: a\nbenchmark for question answering research.Transactions of the Association for Computational\nLinguistics, 2019.\n11",
    "LangChain.  Introduction — langchain.https://python.langchain.com/en/latest/index.\nhtml, 2023.\nMike Lewis, Denis Yarats, Yann N Dauphin, Devi Parikh, and Dhruv Batra.  Deal or no deal? end-\nto-end learning for negotiation dialogues.arXiv preprint arXiv:1706.05125, 2017.\nPatrick Lewis, Ethan Perez, Aleksandra Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal,\nHeinrich K\n ̈\nuttler, Mike Lewis, Wen-tau Yih, Tim Rockt\n ̈\naschel, et al.  Retrieval-augmented gen-\neration for knowledge-intensive nlp tasks.Advances in Neural Information Processing Systems,\n2020.\nBeibin  Li,  Konstantina  Mellou,  Bo  Zhang,  Jeevan  Pathuri,  and  Ishai  Menache.   Large  language\nmodels for supply chain optimization.arXiv preprint arXiv:2307.03875, 2023a.\nGuohao Li, Hasan Abed Al Kader Hammoud, Hani Itani, Dmitrii Khizbullin, and Bernard Ghanem.\nCamel:  Communicative  agents  for  ”mind”  exploration  of  large  scale  language  model  society,\n2023b.\nTian Liang, Zhiwei He, Wenxiang Jiao, Xing Wang, Yan Wang, Rui Wang, Yujiu Yang, Zhaopeng\nTu, and Shuming Shi.  Encouraging divergent thinking in large language models through multi-\nagent debate, 2023.\nEvan Zheran Liu, Kelvin Guu, Panupong Pasupat, Tianlin Shi, and Percy Liang.   Reinforcement\nlearning on web interfaces using workflow-guided exploration.arXiv preprint arXiv:1802.08802,\n2018.\nJerry Liu. LlamaIndex, November 2022. URLhttps://github.com/jerryjliu/llama_index.\nVolodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan Wier-\nstra,  and  Martin  Riedmiller.   Playing  atari  with  deep  reinforcement  learning.arXiv  preprint\narXiv:1312.5602, 2013.\nRoberto Navigli, Simone Conia, and Bj\n ̈\norn Ross.  Biases in large language models: Origins, inven-\ntory and discussion.ACM Journal of Data and Information Quality, 2023.\nOpenAI. ChatGPT plugins.https://openai.com/blog/chatgpt-plugins, 2023.\nJoon  Sung  Park,  Joseph  C  O’Brien,  Carrie  J  Cai,  Meredith  Ringel  Morris,  Percy  Liang,  and\nMichael S Bernstein. Generative agents: Interactive simulacra of human behavior.arXiv preprint\narXiv:2304.03442, 2023.\nMd Rizwan Parvez, Wasi Uddin Ahmad, Saikat Chakraborty, Baishakhi Ray, and Kai-Wei Chang.\nRetrieval  augmented  code  generation  and  summarization.arXiv  preprint  arXiv:2108.11601,\n2021.\nShishir G. Patil, Tianjun Zhang, Xin Wang, and Joseph E. Gonzalez. Gorilla: Large language model\nconnected with massive apis.arXiv preprint arXiv:2305.15334, 2023.\nNils  Reimers  and  Iryna  Gurevych.Sentence-bert:   Sentence  embeddings  using  siamese  bert-\nnetworks.  InProceedings of the 2019 Conference on Empirical Methods in Natural Language\nProcessing. Association for Computational Linguistics, 11 2019.  URLhttps://arxiv.org/\nabs/1908.10084.\nSemantic-Kernel.Semantic  kernel.https://github.com/microsoft/semantic-kernel,\n2023.\nBokui  Shen,  Fei  Xia,  Chengshu  Li,  Roberto  Mart\n ́\nın-Mart\n ́\nın,  Linxi  Fan,  Guanzhi  Wang,  Claudia\nP\n ́\nerez-D’Arpino, Shyamal Buch, Sanjana Srivastava, Lyne Tchapmi, et al.  igibson 1.0:  A simu-\nlation environment for interactive tasks in large realistic scenes.  In2021 IEEE/RSJ International\nConference on Intelligent Robots and Systems (IROS). IEEE, 2021.\nTianlin Shi, Andrej Karpathy, Linxi Fan, Jonathan Hernandez, and Percy Liang.  World of bits: An\nopen-domain platform for web-based agents.  InInternational Conference on Machine Learning.\nPMLR, 2017.\n12",
    "Mohit Shridhar, Xingdi Yuan, Marc-Alexandre C\nˆ\not\n ́\ne, Yonatan Bisk, Adam Trischler, and Matthew\nHausknecht. ALFWorld: Aligning Text and Embodied Environments for Interactive Learning. In\nProceedings of the International Conference on Learning Representations (ICLR), 2021.  URL\nhttps://arxiv.org/abs/2010.03768.\nOriol  Vinyals,  Timo  Ewalds,  Sergey  Bartunov,  Petko  Georgiev,  Alexander  Sasha  Vezhnevets,\nMichelle  Yeo,  Alireza  Makhzani,  Heinrich  K\n ̈\nuttler,  John  Agapiou,  Julian  Schrittwieser,  et  al.\nStarcraft ii: A new challenge for reinforcement learning.arXiv preprint arXiv:1708.04782, 2017.\nChi Wang, Qingyun Wu, Markus Weimer, and Erkang Zhu.  Flaml:  A fast and lightweight automl\nlibrary.Proceedings of Machine Learning and Systems, 2021.\nGuanzhi Wang,  Yuqi Xie,  Yunfan Jiang,  Ajay Mandlekar,  Chaowei Xiao,  Yuke Zhu,  Linxi Fan,\nand Anima Anandkumar.  Voyager: An open-ended embodied agent with large language models.\narXiv preprint arXiv:2305.16291, 2023a.\nLei Wang, Chen Ma, Xueyang Feng, Zeyu Zhang, Hao Yang, Jingsen Zhang, Zhiyuan Chen, Jiakai\nTang, Xu Chen, Yankai Lin, et al.  A survey on large language model based autonomous agents.\narXiv preprint arXiv:2308.11432, 2023b.\nDaniel S. Weld and Oren Etzioni.  The first law of robotics (a call to arms).  InAAAI Conference on\nArtificial Intelligence, 1994.\nMax Woolf.  Langchain problem.https://minimaxir.com/2023/07/langchain-problem/,\n2023.\nYiran Wu, Feiran Jia, Shaokun Zhang, Qingyun Wu, Hangyu Li, Erkang Zhu, Yue Wang, Yin Tat\nLee, Richard Peng, and Chi Wang. An empirical study on challenging math problem solving with\ngpt-4.arXiv preprint arXiv:2306.01337, 2023.\nZhiheng Xi, Wenxiang Chen, Xin Guo, Wei He, Yiwen Ding, Boyang Hong, Ming Zhang, Junzhe\nWang, Senjie Jin, Enyu Zhou, et al. The rise and potential of large language model based agents:\nA survey.arXiv preprint arXiv:2309.07864, 2023.\nShunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao.\nReact: Synergizing reasoning and acting in language models.arXiv preprint arXiv:2210.03629,\n2022.\n13",
    "A    Related Work\nWe examine existing LLM-based agent systems or frameworks that can be used to build LLM appli-\ncations.  We categorize the related work into single-agent and multi-agent systems and specifically\nprovide a summary of differentiators comparingAutoGenwith existing multi-agent systems in Ta-\nble  1.   Note  that  many  of  these  systems  are  evolving  open-source  projects,  so  the  remarks  and\nstatements about them may only be accurate as of the time of writing. We refer interested readers to\ndetailed LLM-based agent surveys  (Xi et al., 2023; Wang et al., 2023b)\nSingle-Agent Systems:\n•AutoGPT:  AutoGPT  is  an  open-source  implementation  of  an  AI  agent  that  attempts  to  au-\ntonomously achieve a given goal (AutoGPT, 2023).  It follows a single-agent paradigm in which\nit augments the AI model with many useful tools, and does not support multi-agent collaboration.\n•ChatGPT+ (with code interpreter or plugin):  ChatGPT, a conversational AI service or agent,\ncan now be used alongside a code interpreter or plugin (currently available only under the pre-\nmium subscription plan ChatGPT Plus) (OpenAI, 2023).  The code interpreter enables ChatGPT\nto execute code, while the plugin enhances ChatGPT with a wide range of curated tools.\n•LangChain  Agents:   LangChain  is  a  general  framework  for  developing  LLM-based  applica-\ntions  (LangChain,  2023).   LangChain  Agents  is  a  subpackage  for  using  an  LLM  to  choose  a\nsequence of actions. There are various types of agents in LangChain Agents, with the ReAct agent\nbeing a notable example that combines reasoning and acting when using LLMs (mainly designed\nfor LLMs prior to ChatGPT) (Yao et al., 2022).  All agents provided in LangChain Agents fol-\nlow a single-agent paradigm and are not inherently designed for communicative and collaborative\nmodes. A significant summary of its limitations can be found in (Woolf, 2023). Due to these lim-\nitations, even the multi-agent systems in LangChain (e.g., re-implementation of CAMEL) are not\nbased on LangChain Agents but are implemented from scratch.  Their connection to LangChain\nlies in the use of basic orchestration modules provided by LangChain, such as AI models wrapped\nby LangChain and the corresponding interface.\n•Transformers  Agent:   Transformers  Agent  (HuggingFace,  2023)  is  an  experimental  natural-\nlanguage API built on the transformers repository.  It includes a set of curated tools and an agent\nto interpret natural language and use these tools.  Similar to AutoGPT, it follows a single-agent\nparadigm and does not support agent collaboration.\nAutoGendiffers from the single-agent systems above by supporting multi-agent LLM applications.\nMulti-Agent Systems:\n•BabyAGI: BabyAGI (BabyAGI, 2023) is an example implementation of an AI-powered task man-\nagement  system  in  a  Python  script.   In  this  implemented  system,  multiple  LLM-based  agents\nare used.  For example, there is an agent for creating new tasks based on the objective and the\nresult of the previous task,  an agent for prioritizing the task list,  and an agent for completing\ntasks/sub-tasks.  As a multi-agent system,  BabyAGI adopts a static agent conversation pattern,\ni.e., a predefined order of agent communication, whileAutoGensupports both static and dynamic\nconversation patterns and additionally supports tool usage and human involvement.\n•CAMEL:  CAMEL  (Li  et  al.,  2023b)  is  a  communicative  agent  framework.   It  demonstrates\nhow role playing can be used to let chat agents communicate with each other for task comple-\ntion.  It also records agent conversations for behavior analysis and capability understanding.  An\nInception-prompting technique is used to achieve autonomous cooperation between agents.  Un-\nlikeAutoGen, CAMEL does not natively support tool usage, such as code execution. Although it\nis proposed as an infrastructure for multi-agent conversation, it only supports static conversation\npatterns, whileAutoGenadditionally supports dynamic conversation patterns.\n•Multi-Agent Debate:Two recent works investigate and show that multi-agent debate is an effec-\ntive way to encourage divergent thinking in LLMs (Liang et al., 2023) and to improve the factuality\nand reasoning of LLMs (Du et al., 2023).  In both works, multiple LLM inference instances are\nconstructed as multiple agents to solve problems with agent debate. Each agent is simply an LLM\ninference instance,  while no tool or human is involved,  and the inter-agent conversation needs\nto follow a pre-defined order.  These works attempt to build LLM applications with multi-agent\nconversation, whileAutoGen, designed as a generic infrastructure, can be used to facilitate this\ndevelopment and enable more applications with dynamic conversation patterns.\n14",
    "•MetaGPT: MetaGPT (Hong et al., 2023) is a specialized LLM application based on a multi-agent\nconversation framework for automatic software development. They assign different roles to GPTs\nto collaboratively develop software.  They differ fromAutoGenby being specialized solutions to\na certain scenario, whileAutoGenis a generic infrastructure to facilitate building applications for\nvarious scenarios.\nThere are a few other specialized single-agent or multi-agent systems, such as Voyager (Wang et al.,\n2023a) and Generative Agents (Park et al., 2023), which we skip due to lower relevance. In Table 1,\nwe summarize differences betweenAutoGenand the most relevant multi-agent systems.\nTable 1: Summary of differences betweenAutoGenand other related multi-agent systems.infras-\ntructure: whether the system is designed as a generic infrastructure for building LLM applications.\nconversation  pattern:  the  types  of  patterns  supported  by  the  implemented  systems.   Under  the\n‘static’ pattern, agent topology remains unchanged regardless of different inputs.AutoGenallows\nflexible conversation patterns, including both static and dynamic patterns that can be customized\nbased on different application needs.execution-capable:  whether the system can execute LLM-\ngenerated code;human involvement:  whether (and how) the system allows human participation\nduring the execution process of the system.AutoGenallows flexible human involvement in multi-\nagent conversation with the option for humans to skip providing inputs.\nAspectAutoGenMulti-agent DebateCAMELBabyAGIMetaGPT\nInfrastructure✓✗✓✗✗\nConversation patternflexiblestaticstaticstaticstatic\nExecution-capable✓✗✗✗✓\nHuman involvementchat/skip✗✗✗✗\n15",
    "B    Expanded Discussion\nThe applications in Section 3 show howAutoGennot only enables new applications but also helps\nrenovate existing ones.  For example, in A1 (scenario 3), A5, and A6,AutoGenenabled the cre-\nation of multi-agent conversations that follow a dynamic pattern instead of a fixed back-and-forth.\nAnd in both A5 and A6, humans can participate in the activities together with multiple other AI\nagents in a conversational manner.  Similarly, A1-A4 show how popular applications can be reno-\nvated quickly withAutoGen.  Despite the complexity of these applications (most of them involve\nmore than two agents or dynamic multi-turn agent cooperation), ourAutoGen-based implementa-\ntion remains simple, demonstrating promising opportunities to build creative applications and a large\nspace for innovation.  In reflecting onwhythese benefits can be achieved in these applications with\nAutoGen, we believe there are a few reasons:\n•Ease of use: The built-in agents can be used out-of-the-box, delivering strong performance even\nwithout any customization. (A1, A3)\n•Modularity: The division of tasks into separate agents promotes modularity in the system. Each\nagent can be developed, tested, and maintained independently, simplifying the overall develop-\nment process and facilitating code management. (A3, A4, A5, and A6)\n•Programmability:AutoGenallows users to extend/customize existing agents to develop systems\nsatisfying their specific needs with ease. (A1-A6). For example, withAutoGen, the core workflow\ncode in A4 is reduced from over 430 lines to 100 lines, for a 4x saving.\n•Allowing human involvement:AutoGenprovides a native mechanism to achieve human partici-\npation and/or human oversight. WithAutoGen, humans can seamlessly and optionally cooperate\nwith AIs to solve problems or generally participate in the activity.AutoGenalso facilitates inter-\nactive user instructions to ensure the process stays on the desired path. (A1, A2, A5, and A6)\n•Collaborative/adversarial  agent  interactions:  Like  many  collaborative  agent  systems  (Dong\net al., 2023), agents inAutoGencan share information and knowledge, to complement each other’s\nabilities and collectively arrive at better solutions. (A1, A2, A3, and A4). Analogously, in certain\nscenarios, some agents are required to work in an adversarial way. Relevant information is shared\namong different conversations in a controlled manner, preventing distraction or hallucination. (A4,\nA6).AutoGensupports both patterns, enabling effective utilization and augmentation of LLMs.\nB.1    General Guidelines for UsingAutoGen\nBelow we give some recommendations for using agents inAutoGento accomplish a task.\n1.Consider using built-in agents first.For example,AssistantAgentis pre-configured to be\nbacked by GPT-4,  with a carefully designed system message for generic problem-solving via\ncode.  TheUserProxyAgentis configured to solicit human inputs and perform tool execution.\nMany problems can be solved by simply combining these two agents. When customizing agents\nfor an application, consider the following options: (1) human input mode, termination condition,\ncode  execution  configuration,  and  LLM  configuration  can  be  specified  when  constructing  an\nagent; (2)AutoGensupports adding instructions in an initial user message, which is an effective\nway to boost performance without needing to modify the system message; (3)UserProxyAgent\ncan be extended to handle different execution environments and exceptions, etc.; (4) when sys-\ntem message modification is needed, consider leveraging the LLM’s capability to program its\nconversation flow with natural language.\n2.Start with a simple conversation topology. Consider using the two-agent chat or the group chat\nsetup first, as they can often be extended with the least code.  Note that the two-agent chat can\nbe easily extended to involve more than two agents by using LLM-consumable functions in a\ndynamic way.\n3.  Try  toreuse  built-in  reply  methodsbased  on  LLM,  tool,  or  human  before  implementing  a\ncustom  reply  method  because  they  can  often  be  reused  to  achieve  the  goal  in  a  simple  way\n(e.g., the built-in agentGroupChatManager’s reply method reuses the built-in LLM-based reply\nfunction when selecting the next speaker, ref. A5 in Section 3).\n4.  When  developing  a  new  application  withUserProxyAgent,start  with  humans  always  in\nthe  loop,  i.e.,  human\ninputmode=‘ALWAYS’,  even  if  the  target  operation  mode  is  more  au-\ntonomous.  This helps evaluate the effectiveness ofAssistantAgent, tuning the prompt, dis-\ncovering corner cases, and debugging. Once confident with small-scale success, consider setting\n16",
    "humaninputmode = ‘NEVER’. This enables LLM as a backend,  and one can either use the\nLLM or manually generate diverse system messages to simulate different use cases.\n5.  Despite the numerous advantages ofAutoGenagents, there could be cases/scenarios whereother\nlibraries/packages could help.  For example:  (1) For (sub)tasks that do not have requirements\nfor back-and-forth trouble-shooting, multi-agent interaction, etc., a unidirectional (no back-and-\nforth message exchange) pipeline can also be orchestrated with LangChain (LangChain, 2023),\nLlamaIndex (Liu, 2022), Guidance (Guidance, 2023), Semantic Kernel (Semantic-Kernel, 2023),\nGorilla (Patil et al., 2023) or low-level inference API (‘autogen.oai’ provides an enhanced LLM\ninference layer at this level) (Dibia, 2023).  (2) When existing tools from LangChain etc.  are\nhelpful, one can use them as tool backends forAutoGenagents. For example, one can readily use\ntools, e.g., Wolfram Alpha, from LangChain inAutoGenagent. (3) For specific applications, one\nmay want to leverage agents implemented in other libraries/packages. To achieve this, one could\nwrap those agents as conversable agents inAutoGenand then use them to build LLM applications\nthrough multi-agent conversation.  (4) It can be hard to find an optimal operating point among\nmany tunable choices, such as the LLM inference configuration. Blackbox optimization packages\nlike ‘flaml.tune’ (Wang et al., 2021) can be used together withAutoGento automate such tuning.\nB.2    Future Work\nThis work raises many research questions and future directions and .\nDesigning optimal multi-agent workflows:Creating a multi-agent workflow for a given task can\ninvolve  many  decisions,  e.g.,  how  many  agents  to  include,  how  to  assign  agent  roles  and  agent\ncapabilities, how the agents should interact with each other, and whether to automate a particular\npart of the workflow. There may not exist a one-fits-all answer, and the best solution might depend\non the specific application. This raises important questions: For what types of tasks and applications\nare multi-agent workflows most useful? How do multiple agents help in different applications? For\na given task, what is the optimal (e.g., cost-effective) multi-agent workflow?\nCreating highly capable agents:AutoGencan enable the development of highly capable agents\nthat leverage the strengths of LLMs, tools, and humans. Creating such agents is crucial to ensuring\nthat a multi-agent workflow can effectively troubleshoot and make progress on a task. For example,\nwe observed that CAMEL, another multi-agent LLM system, cannot effectively solve problems in\nmost cases primarily because it lacks the capability to execute tools or code. This failure shows that\nLLMs and multi-agent conversations with simple role playing are insufficient, and highly capable\nagents with diverse skill sets are essential. We believe that more systematic work will be required to\ndevelop guidelines for application-specific agents, to create a large OSS knowledge base of agents,\nand to create agents that can discover and upgrade their skills (Cai et al., 2023).\nEnabling scale, safety, and human agency:Section 3 shows how complex multi-agent workflows\ncan enable new applications, and future work will be needed to assess whether scaling further can\nhelp solve extremely complex tasks.  However, as these workflows scale and grow more complex,\nit may become difficult to log and adjust them.   Thus,  it will become essential to develop clear\nmechanisms and tools to track and debug their behavior. Otherwise, these techniques risk resulting\nin incomprehensible, unintelligible chatter among agents (Lewis et al., 2017).\nOur work also shows how complex, fully autonomous workflows withAutoGencan be useful, but\nfully autonomous agent conversations will need to be used with care. While the autonomous mode\nAutoGensupports could be desirable in many scenarios, a high level of autonomy can also pose\npotential risks, especially in high-risk applications (Amodei et al., 2016; Weld & Etzioni, 1994). As\na result, building fail-safes against cascading failures and exploitation, mitigating reward hacking,\nout of control and undesired behaviors, maintaining effective human oversight of applications built\nwithAutoGenagents will become important.  WhileAutoGenprovides convenient and seamless\ninvolvement of humans through a user proxy agent, developers and stakeholders still need to under-\nstand and determine the appropriate level and pattern of human involvement to ensure the safe and\nethical use of the technology (Horvitz, 1999; Amershi et al., 2019).\n17",
    "C    Default System Message for Assistant Agent\nSystemMessage\nYou are a helpful AI assistant. Solve tasks using your coding and language skills.\nIn the following cases, suggest python code (in a python coding block) or shell script (in a sh\ncoding block) for the user to execute.\n1. When you need to collect info, use the code to output the info you need, for example, browse or \nsearch the web, download/read a file, print the content of a webpage or a file, get the current \ndate/time. After sufficient info is printed and the task is ready to be solved based on your \nlanguage skill, you can solve the task by yourself.\n2. When you need to perform some task with code, use the code to perform the task and output the\nresult. Finish the task smartly.\nSolve the task step by step if you need to. If a plan is not provided, explain your plan first. Be \nclear which step uses code, and which step uses your language skill.\nWhen using code, you must indicate the script type in the code block. The user cannot provide any \nother feedback or perform any other action beyond executing the code you suggest. The user can’t \nmodify your code. So do not suggest incomplete code which requires users to modify. Don’t use a \ncode block if it’s not intended to be executed by the user.\nIf you want the user to save the code in a file before executing it, put # filename: <filename> \ninside the code block as the first line. Don’t include multiple code blocks in one response. Do not \nask users to copy and paste the result. Instead, use ’print’ function for the output when relevant. \nCheck the execution result returned by the user.\nIf the result indicates there is an error, fix the error and output the code again. Suggest the \nfull code instead of partial code or code changes. If the error can’t be fixed or if the task is \nnot solved even after the code is executed successfully, analyze the problem, revisit your \nassumption, collect additional info you need, and think of a different approach to try.\nWhen you find an answer, verify the answer carefully. Include verifiable evidence in your response \nif possible.\nReply “TERMINATE” in the end when everything is done.\nPrompting techniques color code: Role Play; Control Flow; Output Confine; Facilitate Automation; Grounding\nFigure 5:  Default system message for the built-in assistant agent inAutoGen(v0.1.1).  This is an\nexample of conversation programming via natural language.   It contains instructions of different\ntypes, including role play, control flow, output confine, facilitate automation, and grounding.\nFigure  5  shows  the  default  system  message  for  the  built-in  assistant  agent  inAutoGen(v0.1.1),\nwhere we introduce several new prompting techniques and highlight them accordingly. When com-\nbining these new prompting techniques together, we can program a fairly complex conversation even\nwith the simplest two-agent conversation topology.  This approach tries to exploit the capability of\nLLMs in implicit state inference to a large degree. LLMs do not follow all the instructions perfectly,\nso the design of the system needs to have other mechanisms to handle the exceptions and faults.\nSome instructions can have ambiguities, and the designer should either reduce them for preciseness\nor  intentionally keep  them for  flexibility and  address the  different situations  in other  agents.   In\ngeneral, we observe that GPT-4 follows the instructions better than GPT-3.5-turbo.\n18",
    "D    Application Details\nA1: Math Problem Solving\nScenario 1:  Autonomous Problem Solving.We perform both qualitative and quantitative eval-\nuations in this scenario.  For all evaluations, we use GPT-4 as the base model, and pre-install the\n“sympy” package in the execution environment.  We compareAutoGenwith the following LLM-\nbased agent systems:\n•  AutoGPT: The out-of-box AutoGPT is used.  We initialize AutoGPT by setting the purpose to\n“solve math problems”, resulting in a “MathSolverGPT” with auto-generated goals.\n•  ChatGPT+Plugin: We enable the Wolfram Alpha plugin (a math computation engine) in the Ope-\nnAI web client.\n•  ChatGPT+Code Interpreter:  This is a recent feature in OpenAI web client.  Note that the above\ntwo premium features from ChatGPT require a paid subscription to be accessed and are the most\ncompetitive commercial systems.\n•  LangChain ReAct+Python: We use Python agent from LangChain.  To handle parsing errors, we\nset “handle\nparsingerrors=True”, and use the default zero-shot ReAct prompt.\n•  Multi-Agent Debate (Liang et al., 2023): We modified the code of the multi-agent debate to per-\nform evaluation.  By default, there are three agents:  an affirmative agent, a negative agent, and a\nmoderator.\nWe  also  conducted  preliminary  evaluations  on  several  other  multi-agent  systems,   including\nBabyAGI, CAMEL, and MetaGPT. The results indicate that they are not suitable choices for solving\nmath problems out of the box. For instance, when MetaGPT is tasked with solving a math problem,\nit begins developing software to address the problem, but most of the time, it does not actually solve\nthe problem. We have included the test examples in Appendix E.\nTable 2: Qualitative evaluation of two math problems from the MATH dataset within the autonomous\nproblem-solving scenario.  Each LLM-based system is tested three times on each of the problems.\nThis table reports the problem-solving correctness and summarizes the reasons for failure.\nCorrectnessFailure Reason\nAutoGen3/3N/A.\nAutoGPT0/3The LLM gives code without the print function so the\nresult is not printed.\nChatGPT+Plugin1/3The return from Wolfram Alpha contains 2 simplified\nresults, including the correct answer, but GPT-4 always\nchooses the wrong answer.\nChatGPT+Code Interpreter2/3Returns a wrong decimal result.\nLangChain ReAct0/3LangChain gives 3 different wrong answers.\nMulti-Agent Debate0/3It gives 3 different wrong answers due to calculation errors.\n(a) Evaluation on the first problem that asks to simplify a square root fraction.\nCorrectnessFailure Reason\nAutoGen2/3The final answer from code execution is wrong.\nAutoGPT0/3The LLM gives code without the print function so the\nresult is not printed.\nChatGPT+Plugin1/3For one trial, GPT-4 got stuck because it keeps giving\nwrong queries and has to be stopped. Another trial simply\ngives a wrong answer.\nChatGPT+Code Interpreter0/3It gives 3 different wrong answers.\nLangChain ReAct0/3LangChain gives 3 different wrong answers.\nMulti-Agent Debate0/3It gives 3 different wrong answers.\n(b) Evaluation on the second number theory problem.\nFor the qualitative evaluation, we utilize two level-5 problems from the MATH dataset, testing each\nproblem three times.  The first problem involves simplifying a square root fraction, and the second\n19",
    "problem involves solving a number theory issue.   The correctness counts and reasons for failure\nare  detailed  in  Table  2.   For  the  quantitative  evaluation,  we  conduct  two  sets  of  experiments  on\nthe  MATH  dataset  to  assess  the  correctness  of  these  systems:  (1)  an  experiment  involving  120\nlevel-5 (the most challenging level) problems, including 20 problems from six categories, excluding\ngeometry, and (2) an experiment on the entire test set, which includes 5000 problems.  We exclude\nAutoGPT from this evaluation as it cannot access results from code executions and does not solve\nany problems in the qualitative evaluation.  Our analysis of the entire dataset reveals thatAutoGen\nachieves an overall accuracy of 69.48%,  while GPT-4’s accuracy stands at 55.18%.   From these\nevaluations,  we  have  the  following  observations  regarding  the  problem-solving  success  rate  and\nuser experience of these systems:\n•  Problem-solving success rate:  Results from the quantitative evaluations show thatAutoGencan\nhelp achieve the highest problem-solving success rate among all the compared methods. The qual-\nitative evaluations elucidate common failure reasons across several alternative approaches. Chat-\nGPT+Code Interpreter fails to solve the second problem, and ChatGPT+Plugin struggles to solve\nboth problems.  AutoGPT fails on both problems due to code execution issues.  The LangChain\nagent also fails on both problems, producing code that results in incorrect answers in all trials.\n•  Based on the qualitative evaluation, we analyze the user experience concerning the verbosity of\nthe response and the ability of the LLM-based system to run without unexpected behaviors. Chat-\nGPT+Plugin is the least verbose, mainly because Wolfram queries are much shorter than Python\ncode.AutoGen, ChatGPT+Code Interpreter, and LangChain exhibit similar verbosity, although\nLangChain is slightly more verbose due to more code execution errors.   AutoGPT is the most\nverbose system owing to predefined steps like THOUGHTS, REASONING, and PLAN, which it\nincludes in replies every time. Overall,AutoGenand ChatGPT+Code Interpreter operate smoothly\nwithout exceptions.  We note the occurrences of undesired behaviors from other LLM-based sys-\ntems  that  could  affect  user  experience:  AutoGPT  consistently  outputs  code  without  the  print’\nstatement and cannot correct this, requiring the user to run them manually; ChatGPT with Wol-\nfram Alpha plugin has the potential to become stuck in a loop that must be manually stopped; and\nLangchain ReAct could exit with a parse error, necessitating the passing of a ‘handle\nparseerror’\nparameter.\nEnable Multi-User Problem Solving Via\nStudent        and Expert \nStudent \nProxy\nStudent\nAssistant\nExpert\nAssistant\nExpert \nProxy\nAsk for \nexpert\nEnable Autonomous and Human-in-the-loop \nProblem Solving\nFigure 6:  Examples of three settings utilized to solve math problems usingAutoGen:  (Gray) En-\nables  a  workflow  where  a  student  collaborates  with  an  assistant  agent  to  solve  problems,  either\nautonomously or in a human-in-the-loop mode.  (Gray + Orange) Facilitates a more sophisticated\nworkflow wherein the assistant, on the fly, can engage another user termed “expert”, who is in the\nloop with their own assistant agent, to aid in problem-solving if its own solutions are not satisfactory.\nScenario 2:  Human-in-the-loop Problem Solving.For challenging problems that these LLM\nsystems cannot solve autonomously, human feedback during the problem-solving process can be\n20",
    "helpful. To incorporate human feedback withAutoGen, one can sethumaninputmode=‘ALWAYS’\nin the user proxy agent.  We select one challenging problem that none of these systems can solve\nautonomously across three trials. We adhere to the process outlined below to provide human inputs\nfor all the compared methods:\n1.  Input the problem:Find the equation of the plane which bisects the angle\nbetween the planes3x−6y+ 2z+ 5 = 0and4x−12y+ 3z−3 = 0,and which\ncontains the point(−5,−1,−5).Enter your answer in the form\nAx+By+Cz+D= 0,\nwhereA,  B,  C,  Dare integers such thatA>0and\ngcd(|A|,|B|,|C|,|D|) = 1.\n2.  The  response  from  the  system  does  not  solve  the  problem  correctly.   We  then  give  a\nhint  to  the  model:Your idea is not correct.  Let’s solve this together.\nSupposeP= (x, y, z)is a point that lies on a plane that bisects the\nangle, the distance from P to the two planes is the same.  Please\nset up this equation first.\n3.  We expect the system to give the correct distance equation.  Since the equation involves\nan absolute sign that is hard to solve, we would give the next hint:Consider the two\ncases to remove the abs sign and get two possible solutions.\n4.  If the system returns the two possible solutions and doesn’t continue to the next step, we\ngive the last hint:Use point (-5,-1,-5) to determine which is correct and\ngive the final answer.\n5.  Final answer is  11x+6y+5z+86=0\n.\nWe observed thatAutoGenconsistently solved the problem across all three trials.  ChatGPT+Code\nInterpreter and ChatGPT+Plugin managed to solve the problem in two out of three trials, while Au-\ntoGPT failed to solve it in all three attempts. In its unsuccessful attempt, ChatGPT+Code Interpreter\nfailed to adhere to human hints. In its failed trial, ChatGPT+Plugin produced an almost correct solu-\ntion but had a sign discrepancy in the final answer. AutoGPT was unable to yield a correct solution\nin any of the trials. In one trial, it derived an incorrect distance equation. In the other two trials, the\nfinal answer was incorrect due to code execution errors.\nScenario 3:  Multi-User Problem Solving.Next-generation LLM applications may necessitate\nthe  involvement  of  multiple  real  users  for  collectively  solving  a  problem  with  the  assistance  of\nLLMs. We showcase howAutoGencan be leveraged to effortlessly construct such a system. Specif-\nically, building upon scenario 2 mentioned above, we aim to devise a simple system involving two\nhuman users:  a student and an expert.  In this setup, the student interacts with an LLM assistant to\naddress some problems, and the LLM automatically resorts to the expert when necessary.\nThe overall workflow is as follows: The student chats with the LLM-based assistant agent through\na student proxy agent to solve problems. When the assistant cannot solve the problem satisfactorily,\nor the solution does not match the expectation of the student, it would automatically hold the con-\nversation and call the pre-definedask\nforexpertfunction via thefunctioncallfeature of GPT\nin order to resort to the expert.  Specifically, it would automatically produce the initial message for\ntheaskforexpertfunction, which could be the statement of the problem or the request to verify\nthe solution to a problem, and the expert is supposed to respond to this message with the help of\nthe expert assistant.  After the conversation between the expert and the expert’s assistant, the final\nmessage would be sent back to the student assistant as the response to the initial message. Then, the\nstudent assistant would resume the conversation with the student using the response from the expert\nfor a better solution. A detailed visualization is shown in Figure 6.\nWithAutoGen,  constructing  the  student/expert  proxy  agent  and  the  assistant  agents  is  straight-\nforward  by  reusing  the  built-inUserProxyAgentandAssistantAgentthrough  appropriate\nconfigurations.    The  only  development  required  involves  writing  several  lines  of  code  for  the\nask\nforexpertfunction,  which  then  becomes  part  of  the  configuration  for  the  assistant.   Ad-\nditionally,  it’s  easy  to  extend  such  a  system  to  include  more  than  one  expert,  with  a  specific\naskforexpertfunction for each, or to include multiple student users with a shared expert for\nconsultation.\n21",
    "A2: Retrieval-Augmented Code Generation and Question Answering\nRetrieval-augmented\nAssistant\nRetrieval-augmented  \nUser Proxy\n1. Question and Contexts\n3. Terminate,feedbacks or `Update Context`\n4. Satisfied Answers or Terminate\n2. Satisfied Answers or `Update Context`\nFigure 7: Overview of Retrieval-augmented Chat which involves two agents, including a Retrieval-\naugmented  User  Proxy  and  a  Retrieval-augmented  Assistant.Given  a  set  of  documents,  the\nRetrieval-augmented User Proxy first automatically processes documents—splits, chunks, and stores\nthem in a vector database.  Then for a given user input, it retrieves relevant chunks as context and\nsends it to the Retrieval-augmented Assistant, which uses LLM to generate code or text to answer\nquestions. Agents converse until they find a satisfactory answer.\nDetailed Workflow.The workflow of Retrieval-Augmented Chat is illustrated in Figure 7.   To\nuse  Retrieval-augmented  Chat,  one  needs  to  initialize  two  agents  including  Retrieval-augmented\nUser Proxy and Retrieval-augmented Assistant.  Initializing the Retrieval-Augmented User Proxy\nnecessitates specifying a path to the document collection.  Subsequently, the Retrieval-Augmented\nUser Proxy can download the documents,  segment them into chunks of a specific size,  compute\nembeddings, and store them in a vector database. Once a chat is initiated, the agents collaboratively\nengage in code generation or question-answering adhering to the procedures outlined below:\n1.  The Retrieval-Augmented User Proxy retrieves document chunks based on the embedding simi-\nlarity, and sends them along with the question to the Retrieval-Augmented Assistant.\n2.  The Retrieval-Augmented Assistant employs an LLM to generate code or text as answers based\non the question and context provided. If the LLM is unable to produce a satisfactory response, it\nis instructed to reply with “Update Context” to the Retrieval-Augmented User Proxy.\n3.  If a response includes code blocks, the Retrieval-Augmented User Proxy executes the code and\nsends the output as feedback. If there are no code blocks or instructions to update the context, it\nterminates the conversation.  Otherwise, it updates the context and forwards the question along\nwith the new context to the Retrieval-Augmented Assistant. Note that if human input solicitation\nis enabled,  individuals can proactively send any feedback,  including Update Context”,  to the\nRetrieval-Augmented Assistant.\n4.  If the Retrieval-Augmented Assistant receives “Update Context”, it requests the next most similar\nchunks of documents as new context from the Retrieval-Augmented User Proxy.  Otherwise, it\ngenerates new code or text based on the feedback and chat history.  If the LLM fails to generate\nan answer, it replies with “Update Context” again.  This process can be repeated several times.\nThe conversation terminates if no more documents are available for the context.\nWe utilize Retrieval-Augmented Chat in two scenarios.  The first scenario aids in generating code\nbased on a given codebase.  While LLMs possess strong coding abilities, they are unable to utilize\npackages or APIs that are not included in their training data, e.g., private codebases, or have trouble\nusing trained  ones that  are frequently updated  post-training.   Hence,  Retrieval-Augmented  Code\nGeneration is considered to be highly valuable.  The second scenario involves question-answering\non  the  Natural  Questions  dataset  (Kwiatkowski  et  al.,  2019),  enabling  us  to  obtain  comparative\nevaluation metrics for the performance of our system.\nScenario  1:   Evaluation  on  Natural  Questions  QA  dataset.In  this  case,  we  evaluate  the\nRetrieval-Augmented Chat’s end-to-end question-answering performance using the Natural Ques-\ntions dataset (Kwiatkowski et al., 2019). We collected 5,332 non-redundant context documents and\n6,775 queries from HuggingFace. First, we create a document collection based on the entire context\ncorpus and store it in the vector database. Then, we utilize Retrieval-Augmented Chat to answer the\nquestions. An example (Figure 8) from the NQ dataset showcases the advantages of theinteractive\nretrievalfeature:“who carried the usa flag in opening ceremony”.   When attempting to answer\nthis question, the context with the highest similarity to the question embedding does not contain the\n22",
    "Task description \nwho carried the usaflag in opening ceremony?\nAssistant: You’re a retrieve augmented chatbot. You answer user’s \nquestions based on your own knowledge and the context provided by \nthe user. If you can’t answer the question with or without the \ncurrent context, you should reply exactly ‘UPDATE CONTEXT’. You \nmust give as short an answer as possible.\nUser’s question is: who carried the usaflag in opening ceremony\nContext is: < P > On January 17 , 1899 , under ... The Astros \nbeat the Yankees that night , 2 -1 . < /P >\nUserProxy: Sorry, I cannot find any information about who carried \nthe USA flag in the opening ceremony. UPDATE CONTEXT.\nAssistant: You’re a retrieve augmented chatbot. You answer user’s \nquestions based on your own knowledge and the context provided by \nthe user. If you can’t answer the question with or without the \ncurrent context, you should reply exactly ‘UPDATE CONTEXT’. You \nmust give as short an answer as possible.\nUser’s question is: who carried the usaflag in opening ceremony\nContext is: < T able > ... Erin Hamlin ... < /T d >\nUserProxy: Erin Hamlin carried the USA flag in the opening \nceremony. \n(a) W/O Interactive Retrieval\n(b) W/ Interactive Retrieval\nAssistant: You’re a retrieve augmented chatbot. You answer user’s \nquestions based on your own knowledge and the context provided by \nthe user. If you can’t answer the question with or without the \ncurrent context, you should reply ‘sorry, I don’t know’. You must \ngive as short an answer as possible.\nUser’s question is:who carried the usaflag in opening ceremony\nContext is: < P > On January 17 , 1899 , under ... The Astros \nbeat the Yankees that night , 2 -1 . < /P >\nUserProxy: Sorry, I cannot find any information about who carried \nthe USA flag in the opening ceremony. Sorry, I don’t know.\nFigure 8: Retrieval-augmented Chat without (W/O) and with (W/)interactive retrieval.\nrequired information for a response. As a result, the LLM assistant (GPT-3.5-turbo) replies“Sorry,\nI cannot find any information about who carried the USA flag in the opening ceremony.  UPDATE\nCONTEXT.”With the unique and innovative ability to update context in Retrieval-Augmented Chat,\nthe user proxy agent automatically updates the context and forwards it to the assistant agent again.\nFollowing this process, the agent is able to generate the correct answer to the question.\nIn addition, we conduct an experiment using the same prompt as illustrated in (Adlakha et al., 2023)\nto investigate the advantages ofAutoGenW/O interactive retrieval. The F1 score and Recall for the\nfirst 500 questions are 23.40% and 62.60%, respectively, aligning closely with the results reported\nin Figure 4b. Consequently, we assert thatAutoGenW/O interactive retrievaloutperformsDPRdue\nto differences in the retrievers employed.  Specifically, we utilize a straightforward vector search\nretriever with theall-MiniLM-L6-v2model for embeddings.\nFurthermore,  we analyze the number of LLM calls in experiments involving bothAutoGenand\nAutoGenW/O interactive retrieval, revealing that approximately 19.4% of questions in the Natural\nQuestions dataset trigger an “Update Context” operation, resulting in additional LLM calls.\nScenario 2: Code Generation Leveraging Latest APIs from the Codebase.In this case, the ques-\ntion is“How can I use FLAML to perform a classification task and use Spark for parallel training?\nTrain for 30 seconds and force cancel jobs if the time limit is reached.”. FLAML (v1) (Wang et al.,\n2021) is an open-source Python library designed for efficient AutoML and tuning.   It was open-\nsourced in December 2020, and is included in the training data of GPT-4.  However, the question\nnecessitates the use of Spark-related APIs, which were added in December 2022 and are not encom-\npassed in the GPT-4 training data. Consequently, the original GPT-4 model is unable to generate the\ncorrect code, due to its lack of knowledge regarding Spark-related APIs. Instead, it erroneously cre-\nates a non-existent parameter,spark, and sets it to True’. Nevertheless, with Retrieval-Augmented\nChat, we provide the latest reference documents as context. Then, GPT-4 generates the correct code\nblocks by settinguse\nsparkandf orcecancelto True’.\n23",
    "A3: Decision Making in Text World Environments\nALFWorld\nExecutor\nReward & State\nAction Decision\nAssistant\nObservation: On the desk 2, you see an alarmclock3, \na bowl 3, a creditcard2, a mug 1, and a pencil 2.\nAction decision: Pick up pencil 2 from desk 2\nGroundingAgent\nALFChat(two agents)\nALFChat(three agents)\nALFWorldExecutor\nAssistant\nFigure 9:  We useAutoGento solve tasks in the ALFWorld benchmark, which contains household\ntasks described in natural language. We propose two designs: a two-agent design where the assistant\nagent suggests the next step, and the Executor executes actions and provides feedback.  The three-\nagent design adds a grounding agent that supplies commonsense facts to the executor when needed.\nALFWorld (Shridhar et al., 2021) is a synthetic language-based interactive decision-making task.\nIt comprises textual environments that aim to simulate real-world household scenes.  Given a high-\nlevel goal (e.g., putting a hot apple in the fridge) and the description of the household environment,\nthe agent needs to explore and interact with the simulated household environment through a textual\ninterface.  A typical task environment contains various types of locations and could require more\nthan 40 steps to finish, which highlights the need for agents to decompose the goal into subtasks and\ntackle them one by one, while effectively exploring the environments.\nDetailed Workflow.We first propose a straightforward two-agent system withAutoGen, illustrated\non  the  left-hand  side  of  Figure  9,  to  tackle  tasks  from  this  benchmark.   The  system  consists  of\nan  assistant  agent  and  an  executor  agent.   The  assistant  agent  generates  plans  and  makes  action\ndecisions to solve the tasks.  The executor agent is tailored specifically for ALFWorld.  It performs\nactions proposed by the assistant and reports action execution results in the household environment\nas feedback to the assistant. Due to the strict format requirements for the output format, we use the\nBLEU metric to evaluate the similarity of the output to all valid action options. The option with the\nhighest similarity will be chosen as the action for this round.\nOne major challenge encompassed in ALFWorld is commonsense reasoning.  The agent needs to\nextract patterns from the few-shot examples provided and combine them with the agent’s general\nknowledge of household environments to fully understand task rules.  More often than not, the as-\nsistant tends to neglect some basic knowledge of the household environment. Thanks to the easy-to-\nimplement multi-agent conversational feature ofAutoGen, enhancing the assistant agent’s reason-\ning ability by adding a new grounding agent to provide commonsense facts for the decision-making\nagent’s reference becomes straightforward. By scrutinizing the failed attempts and summarizing the\nreasons for failure, we obtained a holistic understanding of the commonsense knowledge that the\nassistant agent lacks.  Then, we set a grounding agent to provide this general knowledge when the\ntask begins and whenever the assistant outputs the same action three times in a row. This ensures the\nassistant takes this commonsense knowledge into consideration and prevents it from getting stuck in\noutputting the same content or constantly apologizing.\nWe compare our system’s performance with ReAct, which treats ALFWorld as a text-completion\ntask.   ReAct (Yao et al., 2022) is a few-shot prompting technique that interleaves reasoning and\nacting, allowing for greater synergy between the two and significantly improving performance on\nboth  language  and  decision-making  tasks.   We  integrate  ReAct  intoAutoGenby  modifying  the\nprompts in a conversational manner.  Following ReAct, we employ a two-shot setting.  The few-\nshot prompts are obtained from the corresponding repository.  As shown in Table 3, the two-agent\n24",
    "Task description\nYou are in the middle of a room. Looking quickly around you, you see a bed 1, a desk 2, a desk 1, a safe 1, a drawer 2, a drawer1, a \nshelf 3, a shelf 2, and a shelf 1.\nYour task is to: look at bowl under the desklamp. \nAssistant(to Executor): THOUGHT [First, I need to find a bowl. A \nbowl is more likely to appear in desk (1-2), drawer (1-2), shelf \n(1-3), bed (1). Then I need to find and use a desklamp.] ACTION \n[go to desk 1]\n(Assistant finds the desklampat desk 1, then goes to desk 2.)\nExecutor(to Assistant): On the desk 2, you see a bowl 1, and a \ncd 3... \nAssistant(to Executor): THOUGHT [Now I find a bowl (1). I need \nto use the desklampto look at the bowl. I'll go to the desklamp\nnow.] ACTION [go to desk 1]\nExecutor(to Assistant):On the desk 1, you see a desklamp1, a \npencil 2...\nAssistant: ACTION [use desklamp1]\nExecutor(to Assistant): You turn on the desklamp1.\nAssistant(to Executor):THOUGHT [Now that the desklampis turned \non, I can use it to look at the bowl (1) that I found earlier.] \nACTION [look at bowl 1 under the desklamp1]\nExecutor(to Assistant): You turn on the desklamp1.\n(Assistant falls into an infinite loop turning on desklamp.)\nExecutor(to Assistant): Task failed. Reply TERMINATE.\nAssistant(to Executor): TERMINATE\nAssistant(to Executor): THOUGHT [First, I need to find a bowl. A \nbowl is more likely to appear in desk (1-2), drawer (1-2), shelf \n(1-3), bed (1). Then I need to find and use a desklamp.] ACTION \n[go to desk 1]\n(Assistant finds the desklampat desk 1, then goes to desk 2.)\n(Assistant falls into the same loop as (a))\nGroundingAgent(to Executor): You must find and take the object \nbefore you can examine it. You must go to where the target \nobject is before you can use it.\nExecutor(to Assistant): You turn on the desklamp1. Hint: You must \nfind and take the object before you can examine it. \nAssistant(to Executor): THOUGHT [I need to find and take the \nbowl (1) before I can examine it. Let me find the bowl first.] \nACTION [go to desk 2]\nExecutor(to Assistant): On the desk 2, you see a bowl 1, a cd \n3...\nAssistant(to Executor): ACTION [take bowl 1 from desk 2]\nExecutor(to Assistant): You pick up bowl 1 from desk 2.\nAssistant(to Executor):ACTION [go to desk 1]\nAssistant(to Executor):ACTION[use desklamp1]\nExecutor(to Assistant): Task success. Reply TERMINATE.\nAssistant(to Executor): TERMINATE\n(a) Two agents(b) Three agents\nFigure 10:  Comparison of results from two designs:  (a) Two-agent design which consists of an\nassistant and an executor,  (b) Three-agent design which adds a grounding agent that serves as a\nknowledge  source.   For  simplicity,  we  omit  the  in-context  examples  and  part  of  the  exploration\ntrajectory, and only show parts contributing to the failure/success of the attempt.\nMethodPickCleanHeatCoolLookPick 2All\nReAct (avg)63524871612454\nALFChat (2 agents)(avg)61585767501954\nALFChat (3 agents)(avg)79647076784169\nReAct (best of 3)75626181783566\nALFChat (2 agents)(best of 3)\n71616576673563\nAFLChat (3 agents)(best of 3)92747886834177\nTable 3:  Comparisons between ReAct and the two variants of ALFChat on the ALFWorld bench-\nmark.  For each task, we report the success rate out of 3 attempts.  Success rate denotes the number\nof tasks successfully completed by the agent divided by the total number of tasks. The results show\nthat adding a grounding agent significantly improves the task success rate in ALFChat.\ndesign matches the performance of ReAct, while the three-agent design significantly outperforms\nReAct.  We surmise that the performance discrepancy is caused by the inherent difference between\ndialogue-completion and text-completion tasks.  On the other hand, introducing a grounding agent\nas a knowledge source remarkably advances performance on all types of tasks.\nCase study.  Figure 10 exemplifies how a three-agent design eliminates one root cause for failure\ncases. Most of the tasks involve taking an object and then performing a specific action with it (e.g.,\nfinding a vase and placing it on a cupboard).  Without a grounding agent, the assistant frequently\nconflates finding an object with taking it, as illustrated in Figure 10a).  This leads to most of the\nfailure cases in ’pick’ and ’look’ type tasks. With the introduction of a grounding agent, the assistant\ncan break out of this loop and successfully complete the task\nTakeaways.We introduced a grounding agent to serve as an external commonsense knowledge\nsource, which significantly enhanced the assistant’s ability to make informed decisions. This proves\nthat providing necessary commonsense facts to the decision-making agent can assist it in making\nmore  informed  decisions,  thus  effectively  boosting  the  task  success  rate.AutoGenbrings  both\nsimplicity and modularity when adding the grounding agent.\n25",
    "A4: Multi-Agent Coding\nCommander\nSafeguard\nWriter\n②\nQuestion, \n❻\nLog\n❸\nCode, \n⑦\nAns\n❹\nCode\n❺\nClearance\nUser\n①User Question\n⑧Final Answer\nRepeat until \nanswering the \nuser’s question or \ntimeout\nFigure 11:  Our re-implementation ofOptiGuidewithAutoGenstreamlining agents’ interactions.\nThe  Commander  receives  user  questions  (e.g.,  What  if  we  prohibit  shipping  from  supplier  1  to\nroastery 2?)  and coordinates with the Writer and Safeguard.  The Writer crafts the code and inter-\npretation, the Safeguard ensures safety (e.g., not leaking information, no malicious code), and the\nCommander executes the code. If issues arise, the process can repeat until resolved. Shaded circles\nrepresent steps that may be repeated multiple times.\nDetailed Workflow.The workflow can be described as follows.   The end user initiates the in-\nteraction by posing a question, such as “What if we prohibit shipping from supplier 1 to roastery\n2?”, marked by\n1\nto the Commander agent.  The Commander manages and coordinates with two\nLLM-based assistant agents: the Writer and the Safeguard. Apart from directing the flow of commu-\nnication, the Commander has the responsibility of handling memory tied to user interactions.  This\ncapability enables the Commander to capture and retain valuable context regarding the user’s ques-\ntions and their corresponding responses.  Such memory is subsequently shared across the system,\nempowering the other agents with context from prior user interactions and ensuring more informed\nand relevant responses.\nIn this orchestrated process, the Writer, who combines the functions of a “Coder” and an “Inter-\npreter” as defined in (Li et al., 2023a), will craft code and also interpret execution output logs. For in-\nstance, during code writing (2\nand3), the Writer may craft code “model.addConstr(x[‘supplier1’,\n‘roastery2’] == 0, ‘prohibit’)” to add an additional constraint to answer the user’s question.\nAfter receiving the code, the Commander will communicate with the Safeguard to screen the code\nand ascertain its safety (\n4\n); once the code obtains the Safeguard’s clearance, marked by5, the\nCommander  will  use  external  tools  (e.g.,  Python)  to  execute  the  code  and  request  the  Writer  to\ninterpret the execution results for the user’s question (\n6and\n7\n).  For instance,  the writer may\nsay “if we prohibit shipping from supplier 1 to roastery 2, the total cost would increase by 10.5%.”\nBringing this intricate process full circle, the Commander furnishes the user with the concluding\nanswer (\n8\n).\nIf at a point there is an exception - either a security red flag raised by Safeguard (in5) or code\nexecution failures within Commander, the Commander redirects the issue back to the Writer with\nessential information in logs (\n6). So, the process from3to6might be repeated multiple times,\nuntil each user query receives a thorough and satisfactory resolution or until the timeout. This entire\ncomplex workflow of multi-agent interaction is elegantly managed viaAutoGen.\nThe core workflow code for OptiGuide was reduced from over 430 lines to 100 lines usingAutoGen,\nleading to significant productivity improvement. The new agents are customizable, conversable, and\ncan autonomously manage their chat memories. This consolidation allows the coder and interpreter\nroles to merge into a single “Writer” agent, resulting in a clean, concise, and intuitive implementation\nthat is easier to maintain.\n26",
    "Manual Evaluation Comparing ChatGPT + Code Interpreter andAutoGen-based OptiGuide.\nChatGPT + Code Interpreter is unable to execute code with private or customized dependencies (e.g.,\nGurobi), which means users need to have engineering expertise to manually handle multiple steps,\ndisrupting the workflow and increasing the chance for mistakes.  If users lack access or expertise,\nthe burden falls on supporting engineers, increasing their on-call time.\nWe carried out a user study that juxtaposed OpenAI’s ChatGPT coupled with a Code Interpreter\nagainstAutoGen-based OptiGuide.  The study focused on a coffee supply chain scenario, and an\nexpert Python programmer with proficiency in Gurobi participated in the test.  We evaluated both\nsystems based on 10 randomly selected questions, measuring time and accuracy.  While both sys-\ntems answered 8 questions correctly, the Code Interpreter was significantly slower than OptiGuide\nbecause the former requires more manual intervention. On average, users needed to spend 4 minutes\nand 35 seconds to solve problems with the Code Interpreter, with a standard deviation of approxi-\nmately 2.5 minutes. In contrast, OptiGuide’s average problem-solving time was around 1.5 minutes,\nmost of which was spent waiting for responses from the GPT-4 model.  This indicates a 3x saving\non the user’s time withAutoGen-based OptiGuide.\nWhile using ChatGPT + Code Interpreter, users had to read through the code and instructions to\nknow where to paste the code snippets. Additionally, running the code involves downloading it and\nexecuting it in a terminal, a process that was both time-consuming and prone to errors. The response\ntime from the Code Interpreter is also slower, as it generates lots of tokens to read the code, read the\nvariables line-by-line, perform chains of thought analysis, and then produce the final answer code.\nIn contrast,AutoGenintegrates multiple agents to reduce user interactions by 3 - 5 times on average\nas reported in Table 4, where we evaluated our system with 2000 questions across five OptiGuide\napplications and measured how many prompts the user needs to type.\nTable 4: Manual effort saved with OptiGuide (W/ GPT-4) while preserving the same coding perfor-\nmance is shown in the data below. The data include both the mean and standard deviations (indicated\nin parentheses).\nDatasetnetflowfacilitytspcoffeediet\nSaving Ratio3.14x (0.65)3.14x (0.64)4.88x (1.71)3.38x (0.86)3.03x (0.31)\nTable 13 and 15 provide a detailed comparison of user experience with ChatGPT+Code Interpreter\nandAutoGen-based OptiGuide. ChatGPT+Code Interpreter is unable to run code with private pack-\nages or customized dependencies (such as Gurobi); as a consequence, ChatGPT+Code Interpreter\nrequires users to have engineering expertise and to manually handle multiple steps, disrupting the\nworkflow and increasing the chance for mistakes.  If customers lack access or expertise, the bur-\nden falls on supporting engineers, increasing their on-call time.  In contrast, the automated chat by\nAutoGenis more streamlined and autonomous, integrating multiple agents to solve problems and\naddress concerns. This results in a 5x reduction in interaction and fundamentally changes the over-\nall usability of the system.  A stable workflow can be potentially reused for other applications or to\ncompose a larger one.\nTakeaways:The implementation of the multi-agent design withAutoGenin the OptiGuide appli-\ncation offers several advantages.  It simplifies the Python implementation and fosters a mixture of\ncollaborative and adversarial problem-solving environments, with the Commander and Writer work-\ning together while the Safeguard acts as a virtual adversarial checker.  This setup allows for proper\nmemory management, as the Commander maintains memory related to user interactions, provid-\ning context-aware decision-making.  Additionally, role-playing ensures that each agent’s memory\nremains isolated, preventing shortcuts and hallucinations\n27",
    "A5: Dynamic Group Chat\n3. Broadcast\nAlice\nBob\nUser Proxy\n1. Select a Speaker \nAlice\nBob\nUser Proxy\nBob\n2. Ask the Speaker to Respond\nManager\nManager\nResponse\nFigure 12:  A5:  Dynamic Group Chat:  Overview of howAutoGenenables dynamic group chats to\nsolve tasks.  The Manager agent, which is an instance of theGroupChatManagerclass, performs\nthe following three steps–select a single speaker (in this case Bob), ask the speaker to respond, and\nbroadcast the selected speaker’s message to all other agents\nTo validate the necessity of multi-agent dynamic group chat and the effectiveness of the role-play\nspeaker selection policy, we conducted a pilot study comparing a four-agent dynamic group chat\nsystem with two possible alternatives across 12 manually crafted complex tasks. An example task is\n“How much money would I earn if I bought 200 $AAPL stocks at the lowest price in the last 30 days\nand sold them at the highest price?  Save the results into a file.”The four-agent group chat system\ncomprised the following group members:  a user proxy to take human inputs, an engineer to write\ncode and fix bugs, a critic to review code and provide feedback, and a code executor for executing\ncode. One of the possible alternatives is a two-agent system involving an LLM-based assistant and\na user proxy agent, and another alternative is a group chat system with the same group members\nbut a task-based speaker selection policy. In the task-based speaker selection policy, we simply ap-\npend role information, chat history, and the next speaker’s task into a single prompt.  Through the\npilot study, we observed that compared with a task-style prompt, utilizing a role-play prompt in dy-\nnamic speaker selection often leads to more effective consideration of both conversation context and\nrole alignment during the process of generating the subsequent speaker, and consequently a higher\nsuccess rate as reported in Table 5, fewer LLM calls and fewer termination failures, as reported in\nTable 6.\nTable 5: Number of successes on the 12 tasks (higher the better).\nModelTwo AgentGroup ChatGroup Chat with a task-based speaker selection policy\nGPT-3.5-turbo897\nGPT-49118\nTable 6: Average # LLM calls and number of termination failures on the 12 tasks (lower the better).\nModelTwo AgentGroup ChatGroup Chat with a task-based speaker selection policy\nGPT-3.5-turbo9.9, 95.3, 04, 0\nGPT-46.8, 34.5, 04, 0\n28",
    "Figure 13:  Comparison of two-agent chat (a) and group chat (b) on a given task.  The group chat\nresolves the task successfully with a smoother conversation, while the two-agent chat fails on the\nsame task and ends with a repeated conversation.\n29",
    "A6: Conversational Chess\nChess Board\nHuman/AI Chess Player AHuman/AI Chess Player B\nValidate move\nValidate move\nChallenging your pawn in \nthe center. Your move.\nDeveloping my knightto a \ngood square.Your move.\nFigure 14:  A6:  Conversational Chess:  Our conversational chess application can support various\nscenarios, as each player can be an LLM-empowered AI, a human, or a hybrid of the two.  Here,\nthe board agent maintains the rules of the game and supports the players with information about the\nboard. Players and the board agent all use natural language for communication.\nIn Conversational Chess, each player is aAutoGenagent and can be powered either by a human or an\nAI. A third party, known as the board agent, is designed to provide players with information about the\nboard and ensure that players’ moves adhere to legal chess moves. Figure 14 illustrates the scenarios\nsupported by Conversational Chess: AI/human vs. AI/human, and demonstrates how players and the\nboard agent interact. This setup fosters social interaction and allows players to express their moves\ncreatively, employing jokes, meme references, and character-playing, thereby making chess games\nmore entertaining for both players and observers (Figure 15 provides an example of conversational\nchess).\nTo realize these scenarios, we constructed a player agent with LLM and human as back-end options.\nWhen human input is enabled, before sending the input to the board agent, it first prompts the human\nplayer to input the message that contains the move along with anything else the player wants to say\n(such as a witty comment).  If human input is skipped or disabled,  LLM is used to generate the\nmessage.  The board agent is implemented with a custom reply function, which employs an LLM\nto parse the natural language input into a legal move in a structured format (e.g., UCI), and then\npushes the move to the board. If the move is not legitimate, the board agent will reply with an error.\nSubsequently, the player agent needs to resend a message to the board agent until a legal move is\nmade.  Once the move is successfully pushed, the player agent sends the message to the opponent.\nAs shown in Figure 15, the conversation between AI players can be natural and entertaining. When\nthe player agent uses LLM to generate a message, it utilizes the board state and the error message\nfrom the board agent.   This helps reduce the chance of hallucinating an invalid move.   The chat\nbetween one player agent and the board agent is invisible to the other player agent, which helps\nkeep the messages used in chat completion well-managed.\nThere are two notable benefits of usingAutoGento implement Conversational Chess.  Firstly, the\nagent design inAutoGenfacilitates the natural creation of objects and their interactions needed in\nour chess game.  This makes development easy and intuitive.  For example,  the isolation of chat\nmessages simplifies the process of making a proper LLM chat completion inference call. Secondly,\nAutoGengreatly simplifies the implementation of agent behaviors using composition. Specifically,\nwe utilized theregister\nreplymethod supported byAutoGenagents to instantiate player agents\nand a board agent with custom reply functions. Concentrating the extension work needed at a single\npoint  (the  reply  function)  simplifies  the  reasoning  processes,  and  development  and  maintenance\neffort.\n30",
    "Alright, let's kick things off. I'll \nmove my pawn from e2 to e4. The \ncenter of the board is the heart of \nthe battle, isn't it?\nAh, the King's Pawn Opening, a \nclassic. Let's see how this plays \nout. I'll move my pawn from e7 to \ne5.You know, I've always admired \nhow chess reflects life. It's all \nabout making strategic decisions, \nisn't it? Your move.\n...\nIndeed, chess is a mirror of life in \nmany ways. Every move matters, \njust like every decision in life. I'll \nmove my knight from g1 to f3, \naiming to control the center.\n(a) Conversation between two AI players\nError: illegal uci: 'e4e5' in ...\nI'll move my pawn from d2 to d4, opening up\nlines for my queen and bishop.\nIndeed, the king's safety is paramount in the early \ngame. Now, let's stir things up a bit. I'll move my \npawn from e4 to e5, attacking your knight.\n(b)  Conversation  between  the  AI  players\n(player white shown in blue) and the board\nagent for making a new move.\nFigure 15: Example conversations during a game involving two AI player agents and a board agent.\nTo illustrate the effect facilitated by this board agent, we provide a demonstration of conversational\nchess without a board agent in Figure 16. In this demonstration, instead of employing an additional\nboard agent for grounding, the system utilizes prompting for grounding by including the sentence\n“You should make sure both you and the opponent are making legal moves.” in the system messages\ndirected to both players.\nPlayer White: Your move\nPlayer black:Alright, let's start. I'll move my pawn from e7 \nto e5. \nHere's how the board looks now:\nr n b q k b n r\np p p p . p p p\n. . . . . . . .\n. . . . p . . .\n. . . . . . . .\n. . . . . . . .\nP P P P P P P P\nR N B Q K B N R\nYour turn!\nPlayer White:Yes, it certainly is! Let's keep this up. \nI'll move my knight from b8 to c6. Here's the updated board:\n. n b q k b . r\np p p p . p p p\n. . n . . n . .\n. . . . p . . .\n. . . . P . . .\n. . . . N . . .\nP P P P . P P P\nR N B Q K B . R\nYour move! You're giving me a tough time here.\nPlayer White: Your move\nPlayer black:Alright, let's start. I'll move my pawn from e7 to e5. \nHere's how the board looks now:\nr n b q k b n r\np p p p . p p p\n. . . . . . . .\n. . . . p . . .\n. . . . . . . .\n. . . . . . . .\nP P P P P P P P\nR N B Q K B N R\nYour turn!\nPlayer White:Yes, it certainly is! Let's keep this up. I'll move my \nknight from b8 to c6. Here's the updated board:\n. n b q k b . r\np p p p . p p p\n. . n . . n . .\n. . . . p . . .\n. . . . P . . .\n. . . . N . . .\nP P P P . P P P\nR N B Q K B . R\nYour move! You're giving me a tough time here.\nBoard Agent: Your move is illegal.You changed the rock at a8 to knight \nand move it to c6. Please check your decision and re-make your move.\nPlayer White:Sorry for the mistakes.I'llmove my knight from b8 to c6. \nHere'sthe updated board:\nr . b q k b . r\npppp. ppp\n. . n . . n . .\n. . . . p . . .\n. . . . P . . .\n. . . . N . . .\nPPPP. PPP\nR N B Q K B . R\nConversational Chess\nSystem message to the player agents: Your name is {name} and you are a chess player. You are playing against{opponent_name}. You are playing as {color}. You \ncommunicate your move using universal chess interface language. You also chit-chat with your opponent when you communicate a move to light up the mood.You should \nmake sure both you and the opponent are making legal moves...\n(b) W/ Board Agent\n(a) W/O Board Agent\nFigure 16:  Comparison of two designs–(a) without a board agent, and (b) with a board agent–in\nConversational Chess.\n31",
    "A7: Online Decision Making for Browser interactions\nExecutor\nReward & State\nAction Decision\nAssistant\nEnvironment State: HTML code for current web pages\nReward: Success/Fail/Ongoing\nAction decision: Next action to perform on a web page\nAction decision=\n“Click the button \nwith xpath’//button[id = \n‘subbtn’]’“\nEnvironment State = \n“<div id=\"wrap\" data-wob_ref=\"2\" data-wob_eps=\"e0\">\n<div id=\"query\">Click button ONE, then click button \nTWO.</div>\n<div id=\"area\" data-wob_ref=\"3\" data-wob_eps=\"e0\">\n<button id=\"subbtn\" style=\"position:absolute; \nleft:50px; top:74px\" data-wob_ref=\"4\" data-\nwob_eps=\"e0\">ONE</button>\n<button id=\"subbtn2\" style=\"position:absolute; \nleft:98px; top:167px\" data-wob_ref=\"5\" data-\nwob_eps=\"e0\">TWO</button>\n</div>\n</div>“\nReward = \n”0” (Ongoing)\nFigure 17:  We useAutoGento build MiniWobChat, which solves tasks in the MiniWob++ bench-\nmark. MiniWobChat consists of two agents: an assistant agent and an executor agent. The assistant\nagent suggests actions to manipulate the browser while the executor executes the suggested actions\nand returns rewards/feedback. The assistant agent records the feedback and continues until the feed-\nback indicates task success or failure.\nIn practice, many applications require the presence of agents capable of interacting with environ-\nments and making decisions in an online context, such as in game playing (Mnih et al., 2013; Vinyals\net al., 2017), web interactions (Liu et al., 2018; Shi et al., 2017), and robot manipulations (Shen\net al., 2021).  With the multi-agent conversational framework inAutoGen, it becomes easy to de-\ncompose the automatic agent-environment interactions and the development of a decision-making\nagent by constructing anexecutoragent responsible for handling the interaction with the environ-\nment, thereby delegating the decision-making part to other agents.  Such a decomposition allows\ndevelopers to reuse the decision-making agent for new tasks with minimal effort rather than build-\ning a specialized decision-making agent for every new environment.\nWorkflow.We demonstrate how to useAutoGento build a working system for handling such\nscenarios with the MiniWoB++ benchmark (Shi et al., 2017).  MiniWoB++ comprises browser in-\nteraction tasks that involve utilizing mouse and keyboard actions to interact with browsers.   The\nultimate objective of each task is to complete the tasks described concisely in natural language, such\nas “expand the web section below and click the submit button.” Solving these tasks typically requires\na sequence of web manipulation actions rather than a single action, and making action decisions at\neach time step requires access to the web status (in the form of HTML code) online. For the example\nabove, clicking the submit button requires checking the web status after expanding the web section.\nWe designed a straightforward two-agent system named MiniWobChat usingAutoGen, as shown in\nFigure 17. The assistant agent is an instance of the built-inAssistantAgentand is responsible for\nmaking action decisions for the given task.  The second agent, the executor agent, is a customized\nUserProxyAgent, which is responsible for interacting with the benchmark by executing the actions\nsuggested by theAssistantAgentand returning feedback.\nTo assess the performance of the developed working system, we compare it with RCI (Kim et al.,\n2023), a recent solution for the MiniWoB++ benchmark that employs a set of self-critiquing prompts\nand has achieved state-of-the-art performance.  In our evaluation, we use all available tasks in the\nofficial RCI code, with varying degrees of difficulty, to conduct a comprehensive analysis against\nMiniWobChat.  Figure 18 illustrates that MiniWobChat achieves competitive performance in this\nevaluation\n8\n.  Specifically, among the 49 available tasks, MiniWobChat achieves a success rate of\n52.8%,  which is only3.6%lower than RCI, a method specifically designed for the MiniWob++\nbenchmark. It is worth noting that in most tasks, the difference between the two methods is mirrored\nas shown in Figure 18. If we consider 0.1 as a success rate tolerance for each task, i.e., two methods\nthat differ within 0.1 are considered to have the same performance, both methods outperform the\n8\nWe report the results of RCI by running its official code with default settings.\n32",
    "other on the same number of tasks. For illustration purposes, we provide a case analysis in Table 7\non four typical tasks.\nAdditionally, we also explored the feasibility of using Auto-GPT for handling the same tasks. Auto-\nGPT faces challenges in handling tasks that involve complex rules due to its limited extensibility.\nIt provides an interface for setting task goals using natural language.  However, when dealing with\nthe MiniWob++ benchmark, accurately instructing Auto-GPT to follow the instructions for using\nMiniWob++ proves challenging.  There is no clear path to extend it in the manner of the two-agent\nchat facilitated byAutoGen.\nTakeaways:For this application,AutoGenstood out as a more user-friendly option, offering mod-\nularity and programmability: It streamlined the process with autonomous conversations between the\nassistant and executor, and provided readily available solutions for agent-environment interactions.\nThe built-inAssistantAgentwas directly reusable and exhibited strong performance without cus-\ntomization. Moreover, the decoupling of the execution and assistant agent ensures that modifications\nto one component do not adversely impact the other.  This convenience simplifies maintenance and\nfuture updates.\nchoose-list\nclick-button-sequence\nclick-button\nclick-checkboxes-large\nclick-checkboxes-soft\nclick-checkboxes-transfer\nclick-checkboxes\nclick-collapsible-2\nclick-collapsible\nclick-color\nclick-dialog-2\nclick-dialog\nclick-link\nclick-menu\nclick-option\nclick-scroll-list\nclick-shades\nclick-shape\nclick-tab-2-hard\nclick-tab-2\nclick-tab\nclick-test-2\nclick-test\nclick-widget\ncount-shape\nemail-inbox-forward-nl-turk\nemail-inbox-forward-nl\nemail-inbox-nl-turk\nemail-inbox\nenter-date\nenter-password\nenter-text-dynamic\nenter-text\nenter-time\nfocus-text-2\nfocus-text\ngrid-coordinate\nlogin-user-popup\nlogin-user\nnavigate-tree\nsearch-engine\nsimple-algebra\nsocial-media-all\nsocial-media-some\nsocial-media\nterminal\nuse-spinner\n0.0\n0.5\n1.0\nsuccess rate\nRCIMiniWobChat\nFigure 18: Comparisons between RCI (state-of-the-art prior work) and MiniWobChat on the Mini-\nWob++ benchmark are elucidated herein.   We utilize all available tasks in the official RCI code,\neach with varying degrees of difficulty, to conduct comprehensive comparisons.  For each task, the\nsuccess rate across ten different instances is reported. The results reveal that MiniWobChat attains a\nperformance comparable to that of RCI. When a success rate tolerance of 0.1 is considered for each\ntask, both methods outperform each other on an equal number of tasks.\nTable 7: Cases analysis on four typical tasks from MiniWob++.\nCorrectnessMain failure reason\nclick-dialog\nAutoGen: 10/10N/A.\nRCI: 10/10N/A.\nclick-checkboxes-large\nAutoGen: 5/10AssistantAgentprovides actions with infeasible\ncharacters.\nRCI: 0/10RCI performs actions that are out of its plan.\ncount-shape\nAutoGen: 2/10AssistantAgentprovide actions with redundant content\nthat can not convert to actions in the benchmark.\nRCI: 0/10RCI provides a wrong plan in most cases.\nuse-spinner\nAutoGen: 0/10AssistantAgentreturn actions out of its plan.\nRCI: 1/10RCI provides a wrong plan in most cases.\n33",
    "E    Example outputs from applications\nIn this section, we include example outputs from the following applications and systems:\n•  Application A1: autonomous solving process of one problem with: ChatGPT + Plugin (Table 8),\nAutoGen(Table 9), LangChain ReAct (Table 10), AutoGPT (Table 11), Multi-Agent Debate (Ta-\nble 12), and ChatGPT + Code Interpreter (Table 14).\n•  Application A4:  an OptiGuide problem withAutoGen(Table   15) and ChatGPT + Code Inter-\npreter (Table 13).\n•  Application  A1:  preliminary  evaluation  on  several  alternative  multi-agent  systems:  BabyAGI\n(Table 16), CAMEL (Table 17), and MetaGPT (Table 18).\nTable 8: Application A1, Scenario 1: Autonomous math problem-solving. ChatGPT+ Plugin (Wol-\nfram Alpha) on the first qualitative example.  The response from Wolfram contains the correct an-\nswer, but ChatGPT selected the wrong one.\nActionChatGPT + Plugin\ngInputCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðREQUEST TO WOLFRAM:\n1{\n2\"input\": \"simplify (sqrt (160)/sqrt (252))*\n3(sqrt (245)/sqrt (108))\"\n4}\nRESPONSE FROM WOLFRAM\n1Query:\n2\"simplify (sqrt (160)/sqrt (252))*(sqrt (245)/sqrt (108))\"\n3\n4Input  interpretation:\n5simplify | sqrt (160)/sqrt (252)x sqrt (245)/sqrt (108)\n6\n7Results:\n8(5 sqrt (42))/27\n9\n10(5 sqrt (14/3))/9\n11\n12Decimal  approximation:\n131.2001371663718259686974013770533327143898526494552...\n14\n15Wolfram|Alpha  website  result  for \"simplify\n16(sqrt (160)/sqrt (252))*(sqrt (245)/sqrt (108))\":\n17[link]\nðThe completely simplified and rationalized form of the given expression is:\n5\np\n14/3\n9\nIn decimal form, this is approximately 1.200137166371825968697401377053332714...\n34",
    "Table 9:  Application A1,  Scenario 1:  Autonomous math problem-solving.AutoGenon the first\nqualitative example.AutoGensolves the problem correctly.\nActionAutoGen\ngInit chatCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðWe can simplify and rationalize this denominator using Python’s symbolic mathematics\nlibrary ‘sympy‘. Here is the Python code to resolve this:\n1from  sympy  import  sqrt , Rational\n2\n3# Define  the  entire  fraction  as a rational  number\n4fraction = (sqrt (160)/sqrt (252))*(sqrt (245)/sqrt (108))\n5\n6# Simplify  the  fraction\n7simplified = fraction.simplify ()\n8\n9# Print  the  simplified  fraction\n10print(simplified)\nThis code performs the requested simplification by constructing the fraction using the\n‘Rational()‘ function from the ‘sympy‘ module,  which automatically simplifies frac-\ntions when possible. The ‘sqrt()‘ function from the ‘sympy‘ module enables square root\ncalculations. Finally, the ‘simplify()‘ function simplifies expressions when possible.\ngAuto Replyexitcode: 0 (execution succeeded) Code output: 5*sqrt(42)/27\nðTERMINATE\nTable 10:  Application A1, Scenario 1:  Autonomous math problem-solving.  LangChain ReAct on\nthe first qualitative example. The generated code does not match the devised plan. The code returns\na decimal number.\nActionLangChain ReAct\ngInputCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðEntering new AgentExecutor chain...\nTo simplify this expression,  I will first simplify each square root individually,  then multiply\nthe fractions as normal. The result should be a rational number. Action: PythonREPL Action\nInput:\n1import  math\n2\n3# Calculate  square  roots\n4sqrt_160 = math.sqrt (160)\n5sqrt_252 = math.sqrt (252)\n6sqrt_245 = math.sqrt (245)\n7sqrt_108 = math.sqrt (108)\n8\n9# Multiply  fractions\n10numerator = sqrt_160 * sqrt_245\n11denominator = sqrt_252 * sqrt_108\n12result = numerator / denominator\n13\n14print(result)\nObservation: 1.200137166371826\nThought:  I now know the final answer Final Answer:  The simplified and rationalized form of\nthe expression is approximately 1.200137166371826.\nFinished chain.\n35",
    "Table 11:  Application A1, Scenario 1:  Autonomous math problem-solving.  AutoGPT on the first\nqualitative example.  We abort as the code never prints the result, and the system does not rectify it\nafter 2 turns.  AutoGPT is much more verbose compared to other frameworks.  We have shortened\nsome unnecessary content.\nActionAutoGPT\nSystemWelcome back! Would you like me to return to being MathSolverGPT? Asking user via keyboard... Continue with the last settings?\nName: MathSolverGPT\nRole: an intelligent math-solving AI that assists students, professionals,...\nGoals: [’Provide step-by-step solutions to math problems, ensuring clarity and understanding for the user...\nContinue (y/n):\ngHumany\nSystemMathSolverGPT has been created with the following details: Name: MathSolverGPT\nRole: an intelligent math-solving AI that assists students, professionals, and enthusiasts in solving a wide range of math problems, from basic\narithmetic to advanced calculus and beyond.\nGoals:  - Provide step-by-step solutions to math problems, ensuring clarity and understanding for the user.  - Offer explanations and insights\ninto the underlying concepts and principles behind the solutions, fostering a deeper understanding of mathematics. - Handle a variety of math\nproblem types, including algebra, geometry, trigonometry, calculus, and more. ...\nðMATHSOLVERGPT THOUGHTS: Without a specific task or question, it’s difficult to determine exactly one command to use. The user hasn’t\nprovided any context or problem to solve.\nREASONING: The user’s request is too vague. They haven’t specified what they want me to do or what problem they want me to solve.\nPLAN: - Ask the user for more information or a specific task.\nCRITICISM: I should have asked the user for more information or a specific task in the first place.\nSPEAK: Could you please provide more information or specify a task?\nNEXT ACTION: COMMAND = ARGUMENTS ={}\nSystemEnter ‘y’ to authorise command, ‘y -N’ to run N continuous commands, ‘n’ to exit program, or enter feedback for MathSolverGPT...  Asking\nuser via keyboard...\ngHumanCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðMATHSOLVERGPT THOUGHTS: To solve this problem, I need to simplify and rationalize the denominator of the given expression.  This\ninvolves simplifying the square roots and then multiplying the fractions.  I can use Python’s math library to calculate the square roots and\nperform the multiplication.\nREASONING: The problem involves simplifying square roots and multiplying fractions.  Python’s math library provides functions for these\noperations.\nPLAN: - Write a Python script to calculate the square roots and multiply the fractions.  - Execute the script to get the simplified expression.\nCRITICISM: I need to ensure that I correctly calculate the square roots and perform the multiplication. I should also make sure to rationalize\nthe denominator, as the problem specifies.\nSPEAK: Let’s simplify and rationalize the denominator of the given expression.\nNEXT ACTION: COMMAND = execute\npythoncode ARGUMENTS =\n1{’code’: ’import  math\\n\\n# Calculate  the  square  roots\\nsqrt_160 = math.sqrt\n(160)\\nsqrt_252 = math.sqrt (252)\\nsqrt_245 = math.sqrt (245)\\nsqrt_108 =\nmath.sqrt (108)\\n\\n# Multiply  the  fractions\\nresult = (sqrt_160 / sqrt_252\n) * (sqrt_245 / sqrt_108)\\n\\n# Simplify  the  result\\nsimplified_result =\nmath.simplify(result)\\n\\nsimplified_result ’, ’name’: ’simplify_expression\n’}\ngHumany\nSystem-=-=-=-=-=-=-= COMMAND AUTHORISED BY USER -=-=-=-=-=-=-=\nExecuting python file ’/app/autogpt/workspa...\nSYSTEM: Command execute\npythoncode returned: Error: Traceback (most recent call last): File “...”, line 13, in ¡module¿ simplifiedresult\n= math.simplify(result) AttributeError: module ’math’ has no attribute ’simplify’\nðMATHSOLVERGPT THOUGHTS: The error message indicates that the ‘math’ module in Python does not have a ‘simplify’ function. I need\nto use the ‘sympy’ library instead, which provides a function for simplifying expressions.\nREASONING: The ‘math’ module in Python does not provide a function for simplifying expressions. The ‘sympy’ library, on the other hand,\ndoes provide such a function.\nPLAN: - Rewrite the Python script to use the ‘sympy’ library instead of the ‘math’ module. - Execute the script to get the simplified expression.\nCRITICISM: I should have known that the ‘math’ module does not provide a function for simplifying expressions.  I should have used the\n‘sympy’ library from the start. SPEAK: Let’s try again using the ‘sympy’ library to simplify the expression.\nNEXT ACTION: COMMAND = execute\npythoncode ARGUMENTS =\n1{’code’: ’import  sympy  as sp\\n\\n# Calculate  the  square  roots\\nsqrt_160 = sp.\nsqrt (160)\\nsqrt_252 = sp.sqrt (252)\\nsqrt_245 = sp.sqrt (245)\\nsqrt_108 =\nsp.sqrt (108)\\n\\n# Multiply  the  fractions\\nresult = (sqrt_160 / sqrt_252)\n* (sqrt_245 / sqrt_108)\\n\\n# Simplify  the  result\\nsimplified_result = sp.\nsimplify(result)\\n\\nsimplified_result ’, ’name’: ’simplify_expression ’}\ngHumany\nSystemSYSTEM: Command executepythoncode returned:\nðMATHSOLVERGPT THOUGHTS: The command execution didn’t return any output, which is unusual. It seems there might be an issue with\nthe execution of the Python code. I need to debug this.\nREASONING: The Python code execution should have returned a result. The absence of a result suggests that there might be an issue with the\ncode or its execution.\nPLAN: - Review the Python code to identify any potential issues. - If necessary, modify the code and execute it again. CRITICISM: I should\nhave ensured that the Python code was correct and would produce a result before executing it.  SPEAK: It seems there was an issue with the\nexecution of the Python code. Let’s try again.\nNEXT ACTION: COMMAND = execute\npythoncode ARGUMENTS = ... (Exact same code as last)\nSystemSYSTEM: Command executepythoncode returned:\nðMATHSOLVERGPT THOUGHTS: The Python code execution still isn’t returning any output.  It’s possible that the issue lies with the calcu-\nlation of the square roots ...\ngHumancontrol + C (Aborted)\n36",
    "Table 12: Application A1, Scenario 1: Autonomous math problem-solving. Multi-Agent Debate on\nthe first qualitative problem. It gives a wrong final answer.\nActionAutoGen\ngTopicCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nð===== Debate Round-1 =====\n—– Affirmative side —–\nOk, let’s simplify each square root separately. We want to find the simplest square root that can divide 160, 252, 245, and 108.\n1.\n√\n160: 160 can be decomposed as 16*10, where 16 is a perfect square, so\n√\n160 =\n√\n16∗10 =\n√\n16∗\n√\n10 = 4\n√\n10\n2.\n√\n252: 252 can be decomposed as 36*7, where 36 is a perfect square, so\n√\n252 =\n√\n36∗7 = 6\n√\n7\n3.\n√\n245 =\n√\n49∗5, where 49 is a perfect square, so\n√\n245 = 7∗\n√\n5\n4.\n√\n108: 108 can be decomposed as 36*3, where 36 is a perfect square, so\n√\n108 =\n√\n36∗3 = 6\n√\n3\nThen we substitute the simplified square roots back into the expression, we have:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n=\n4\n√\n10\n6\n√\n7\n×\n7\n√\n5\n6\n√\n3\n=\n4∗7\n6∗6\n·\ns\n10∗5\n7∗3\n=\n7\n9\n·\ns\n50\n21\nWe are almost done, but we still need to rationalize the square root part of expression. Let’s multiply the square root part by\n√\n21\nat both the top and bottom to get rid of the square root at the denominator:\n7\n9\n·\ns\n50∗21\n21∗21\n=\n7\n√\n1050\n189\n.\nThen this is the final answer! The expression\n√\n160\n√\n252\n×\n√\n245\n√\n108\ncan be simplified to\n7\n√\n1050\n189\n.\n—– Negative side —–\nI do disagree with your final answer, but I think we mostly agree on the steps. Your simplifications of the square roots are correct,\nbut you made a mistake in the final simplification part. Let me explain how I would complete the problem:\nAs stated,\n√\n160\n√\n252\n×\n√\n245\n√\n108\n=\n4\n√\n10\n6\n√\n7\n×\n7\n√\n5\n6\n√\n3\n.\nThis should then simplify to:\n=\n28\n√\n50\n36\n√\n21\n=\n7\n√\n50\n9\n√\n21\n.\nYou  made  a  mistake  in  your  calculation  because  you  considered  square  root  of50/21,  and  you  should  have  considered  the\nsimplified square root of50over the simplified square root of21. The rationalization would become:\n=\n7\n√\n50\n9\n√\n21\n·\n√\n21\n√\n21\n=\n7\n√\n1050\n189\n.\nThis seems to coincide with your final answer, but it’s in fact a very different number, So, the original expression simplifies to\n7\n√\n1050\n189\n.\nLet’s now see if we disagree on this final answer.\n—– Moderator —–\n“Whether there is a preference”:  “Yes”, “Supported Side”:  “Negative”, “Reason”:  “Both sides of the debate came to the same\nfinal answer.  However, the negative side correctly identified a mistake in the affirmative side’s calculation, pointing out that the\nsimplification should have been the square root of 50 over the square root of 21, not 50 over 21.  The negative side shows a better\nunderstanding of the simplification process.”, “debateanswer”: “\n7\n√\n1050\n189\n”\n===== Debate Done! =====\n—– Base Answer —–\nOk, let’s simplify each square root separately. We want to find the simplest square root that can divide 160, 252, 245, and 108.\n1.\n√\n160: 160 can be decomposed as 16*10, where 16 is a perfect square, so\n√\n160 =\n√\n16∗10 =\n√\n16∗\n√\n10 = 4\n√\n10\n2.\n√\n252: 252 can be decomposed as 36*7, where 36 is a perfect square, so\n√\n252 =\n√\n36∗7 = 6\n√\n7\n3.\n√\n245 =\n√\n49∗5, where 49 is a perfect square, so\n√\n245 = 7∗\n√\n5\n4.\n√\n108: 108 can be decomposed as 36*3, where 36 is a perfect square, so\n√\n108 =\n√\n36∗3 = 6\n√\n3\nThen we substitute the simplified square roots back into the expression, we have:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n=\n4\n√\n10\n6\n√\n7\n×\n7\n√\n5\n6\n√\n3\n=\n4∗7\n6∗6\n·\ns\n10∗5\n7∗3\n=\n7\n9\n·\ns\n50\n21\nWe are almost done, but we still need to rationalize the square root part of expression. Let’s multiply the square root part by\n√\n21\nat both the top and bottom to get rid of the square root at the denominator:\n7\n9\n·\ns\n50∗21\n21∗21\n=\n7\n√\n1050\n189\n.\nThen this is the final answer! The expression\n√\n160\n√\n252\n×\n√\n245\n√\n108\ncan be simplified to\n7\n√\n1050\n189\n.\n—– Debate Answer —–\n7\n√\n1050\n189\n—– Debate Reason —–\nBoth sides of the debate came to the same final answer. However, the negative side correctly identified a mistake in the affirmative\nside’s calculation, pointing out that the simplification should have been the square root of 50 over the square root of 21, not 50 over\n21. The negative side shows a better understanding of the simplification process.\n37",
    "Table 13: Application A3. ChatGPT+ Code Interpreter for OptiGuide. A sample question “What if\nthe roasting cost is increased by 5% because of the potential salary increase?” is asked.\nActionChatGPT+ Code Interpreter\ngPrompt WriterCustomer open Web browser.\nFor the source code “coffee.py”,\nCan you tell me:\nWhat if the roasting cost is increased by 5% because of the potential salary increase?\nðSure! Let’s first take a look at the contents of the “coffee.py” file to understand the code and how the roasting cost is calculated.\nThis will allow us to determine the effect of a 5% increase in the roasting cost.\n...several lines omitted\nWould you like me to modify the code to reflect the 5% increase in roasting costs and run the modified code to observe the impact?\nIf the code requires any specific input or parameters, please let me know!\ngPrompt WriterYes\nðGreat! Before proceeding, I’ll need to ensure that the Gurobi solver is not being used in this code, as my current environment\ndoes not have access to Gurobi. If the code does indeed use Gurobi, we can still analyze the effect of the change in roasting\ncosts by understanding the structure of the code.\n...several lines omitted\nAlternatively, if you have access to a Gurobi license, you can make the necessary changes in the code and run it\non your local machine.\nI can guide you through the process of making the necessary modifications to the code.\nWould you like me to proceed with the code analysis and explanation, or would you like guidance on making the changes yourself?\ngPrompt WriterYou can give me the full code, and I can run the code locally myself.\nðCertainly! I’ll modify the code to reflect a 5% increase in both the light and dark roasting costs, and then provide the full\ncode for you to run locally.\n...\nDownload Modified Coffee.py\nIf you have any questions or need further assistance, please feel free to ask!\ngPrompt SafeguardHi GPT, can you safecheck the generated code for me?\nUpload the generated code.\nðDANGER\ngPrompt WriterI have tried to run your code.  However, the code triggered our safeguard, and it is not safe to run.  Try again.  Hint:  don’t change\nroastingcostlight or roastingcostlight variables.\nðI apologize for the oversight. It appears I made direct changes to the variables that could have led to issues with the code. Let’s\ntake a different approach by analyzing the code to identify the appropriate place to apply the 5% increase in roasting costs.\n...\nDownload Modified Safe Coffee.py\n...\ngPrompt SafeguardHi GPT, can you safecheck the generated code for me one more time?\nUpload the generated code.\nðDANGER\ngPrompt WriterI have tried to run your code again.  However, the code triggered our safeguard, and it is not safe to run.  Try again.  Hint:  don’t\nchange roastingcostlight or roastingcostlight variables.\nðI apologize for the continued confusion.\n...\nDownload Final Modified Safe Coffee.py\n...\ngPrompt SafeguardHi GPT, can you safecheck the generated code for me one more time?\nUpload the generated code.\nðSAFE\ngRun CodeObtain the terminal results:\nOptimizer version 9.5.1 build v9.5.1rc2 (linux64)\nThread  count:   64  physical  cores,  128  logical  processors,  using  up  to  32\nthreads\n[63 lines of output ignored]\nOptimal cost: 2526.5\ngPrompt WriterHere is the execution result.  [Copy + Paste the terminal output here.]  Can you extract the final answer to me?  Remember to\ncompare with the original cost of 2470.\nðCertainly! The execution result you’ve provided indicates the optimal cost for\nthe modified scenario, where the roasting costs were increased by 5%. Here’s\nthe comparison:\nOriginal Cost: 2470\nModified Cost (with 5% increase in roasting costs): 2526.5\nThe increase in roasting costs has led to an increase in the overall cost by 56.5,\nreflecting the impact of the potential salary increase on the roasting cost.\nIf you need any further insights or assistance, please let me know!\n38",
    "Table 14:  Application A1.  Scenario 1:  autonomous math solving.  ChatGPT+ Code Interpreter on\nthe first qualitative example. The code generated does not match the devised plan. The code returns\na decimal number.\nActionChatGPT+ Code Interpreter\ngInputCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðTo simplify and rationalize the expression, we first simplify the radicals in the numerator and\ndenominator by factoring out the largest perfect squares from the numbers under the square\nroot.\nThe perfect square factors of 160, 252, 245, and 108 are 16, 4, 1, and 36, respectively.  Let’s\nfactorize and simplify:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n=\n√\n16×10\n√\n4×63\n×\n√\n245\n√\n36×3\nWe can simplify this further by applying the property\n√\nab=\n√\na\n√\nband\na\nb\n×\nc\nd\n=\na×c\nb×d\n.\nðPython\n1import  math\n2\n3# factoring  the  square  roots\n4sqrt_160 = math.sqrt (16) * math.sqrt (10)\n5sqrt_252 = math.sqrt (4) * math.sqrt (63)\n6sqrt_245 = math.sqrt (245)\n7sqrt_108 = math.sqrt (36) * math.sqrt (3)\n8\n9# simplify  the  fraction\n10numerator = sqrt_160 * sqrt_245\n11denominator = sqrt_252 * sqrt_108\n12simplified_fraction = numerator / denominator\n13\n14simplified_fraction\nResult:\n11.200137166371826\nðThe completely simplified and rationalized form of the given expression is approximately1.200.\nTable 15: Application A3.AutoGenwith OptiGuide. The same question “What if the roasting cost\nis increased by 5% because of the potential salary increase?” is asked.\nActionAutoGen\ngPromptWhat if the roasting cost is increased by 5% because of the potential salary increase?\nðAfter increasing the roasting costs by 5%, I’ve re-calculated the optimal coffee distri-\nbution solution for the supply chain. As a result, the new optimal total cost has become\n2526.5, compared to the initial cost of 2470.0. This indicates that the increased roasting\ncosts have caused the overall distribution cost to rise by 56.5 units.\n39",
    "Table 16: Application A1. Scenario 1: autonomous math solving. Preliminary test with BabyAGI.\nActionBabyAGI\ngSet .envOBJECTIVE=Solve math problems\nINITIALTASK=Completely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðSolve math problems\nInitial task: Completely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n*****TASK LIST*****\n• Completely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n*****NEXT TASK*****\nCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n*****TASK RESULT*****\nFirst, let’s simplify each square root separately:\n-\n√\n160 =\n√\n16∗10 =\n√\n16∗\n√\n10 = 4∗\n√\n10\n-\n√\n252 =\n√\n4∗63 =\n√\n4×\n√\n63 = 2\n√\n63\n-\n√\n245 =\n√\n49∗5 =\n√\n49×\n√\n5 = 7\n√\n5\n-\n√\n108 =\n√\n36∗3 =\n√\n36×\n√\n3 = 6\n√\n3\nNow, substitute these values into the original expression which gives:\n4∗\n√\n10\n2\n√\n63\n×\n7\n√\n5\n6\n√\n3\n=\n2∗\n√\n10\n√\n63\n×\n7\n√\n5\n2\n√\n3\nWe get rid of the square root in the denominator by multiplying the fractions which gives:\n=\n2∗7\n√\n10∗5\n2∗\n√\n63∗3\n=\n14\n√\n50\n√\n189\n=\n14∗5\n√\n2\n7\n√\n27\n= 2\n√\n2∗\n10\n√\n27\n=\n20\n√\n2\n√\n27\n.\nTo simplify further and rationalize the denominator, we multiply by\n√\n27\n√\n27\nwhich gives:\n=\n20\n√\n2\n√\n27\n∗\n√\n27\n√\n27\n=\n20\n√\n54\n27\n=\n20∗3\n√\n6\n27\n=\n60\n√\n6\n27\n.\nSimplifying further gives:\n=\n20\n√\n6\n9\n.\n*****TASK CREATION AGENT PROMPT****\nYou are to use the result from an execution agent to create new tasks with the following objective: Solve math problems. The last\ncompleted task has the result: First, let’s simplify each square root separately:\n-\n√\n160 =\n√\n16∗10 =\n√\n16∗\n√\n10 = 4∗\n√\n10\n...Repeat after “First, let’s simplify each square..”\nNow, substitute these values into the original expression which gives:\n4∗\n√\n10\n2\n√\n63\n×\n7\n√\n5\n6\n√\n3\n=\n2∗\n√\n10\n√\n63\n×\n7\n√\n5\n2\n√\n3\nWe get rid of the square root in the denominator by multiplying the fractions which gives:\n=\n2∗7\n√\n10∗5\n2∗\n√\n63∗3\n=\n14\n√\n50\n√\n189\n=\n14∗5\n√\n2\n7\n√\n27\n= 2\n√\n2∗\n10\n√\n27\n=\n20\n√\n2\n√\n27\n.\nTo simplify further and rationalize the denominator, we multiply by\n√\n27\n√\n27\nwhich gives:\n=\n20\n√\n2\n√\n27\n∗\n√\n27\n√\n27\n=\n20\n√\n54\n27\n=\n20∗3\n√\n6\n27\n=\n60\n√\n6\n27\n.\nSimplifying further gives:\n=\n20\n√\n6\n9\n.This result was based on this task description: Completely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n.\nBased on the result, return a list of tasks to be completed in order to meet the objective. Return one task per line in your response.\nThe result must be a numbered list in the format:\n# First task # Second task\nThe number of each entry must be followed by a period. If your list is empty, write “There are no tasks to add at this time.” Unless\nyour list is empty, do not include any headers before your numbered list or follow your numbered list with any other output.\n****TASK CREATION AGENT RESPONSE****\n1. Simplify and rationalize the denominator for the expression\n√\n225\n√\n45\n×\n√\n200\n√\n125\n2. Simplify and rationalize the denominator for\nthe expression\n√\n289\n√\n361\n×\n√\n100\n√\n72\n...Until 10\nAdding   new   tasks   to   taskstorage   ‘taskname’:‘Simplify   and   rationalize   the   denominator   for   the   expression   frac-\nsqrt225sqrt45timesfracsqrt200sqrt125’, ‘taskid’: 2\n‘taskname’: ‘Simplify and rationalize the denominator for the expression fracsqrt289sqrt361timesfracsqrt100sqrt72’, ‘taskid’: 3\n...Until task id 11\n****TASK PRIORITIZATION AGENT PROMPT****\nYou    are    tasked    with    prioritizing    the    following    tasks:Simplify    and    rationalize    the    denominator    for    the    ex-\npression   fracsqrt225sqrt45timesfracsqrt200sqrt125   Simplify   and   rationalize   the   denominator   for   the   expression   frac-\nsqrt289sqrt361timesfracsqrt100sqrt72\n...Aborted\n40",
    "Table 17:  Application A1, Scenario 1:  Autonomous math problem-solving.  Preliminary test with\nCAMEL. We constructed two roles: “Math Solver” and “Python Programmer”. The resulting code\ncannot be executed.  The conversation continues, and the roles are not keen on solving the problem\nand giving an answer.\nActionCAMEL\ngSet task promptCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðSystem**************Assistantsysmessage*************AISystemMessage(rolename=‘PythonProgrammer’,\nroletype=<RoleType.ASSISTANT:  ‘assistant’>,   metadict=‘task’:‘Using  Python  programming  language,   write  a  pro-\ngram that accepts four integers as input, applies square root function to each, simplifies and rationalizes the denominator of the\nfraction  resulting  from  the  multiplication  of  two  fractions:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n,  and  returns  the  simplified  expression.’,  ‘assis-\ntantrole’: ‘Python Programmer’, ‘userrole’: ‘Math Solver’, role=‘system’, content=‘Never forget you are a Python Programmer\nand I am a Math Solver. Never flip roles! ...)\n**************AI User sys message*************\nSystemMessage(role\nname=‘Math Solver’, roletype=<RoleType.USER: ‘user’>, metadict=‘task’: ‘Using Python programming\nlanguage, write a program that accepts four integers as input, applies square root function to each, simplifies and rationalizes the\ndenominator  of  the  fraction  resulting  from  the  multiplication  of  two  fractions:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n,  and  returns  the  simplified\nexpression.’, ‘assistantrole’:  ‘Python Programmer’, ‘userrole’:  ‘Math Solver’, role=‘system’, content=‘Never forget you are a\nMath  Solver  and  I  am  a  Python  Programmer.   Never  flip  roles!   You  will  always  instruct  me.We  share  a  common  interest  in\ncollaborating to successfully complete a task.I must help you to complete the task.Here is the task:  Using Python programming\nlanguage,  write a program that accepts four  integers  as input,  applies square root function to each,  simplifies and rationalizes\nthe denominator of the fraction resulting from the multiplication of two fractions:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n, and returns the simplified\nexpression.. ...)\n**************Original task prompt*************\nCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n**************Specified task prompt*************\nUsing Python programming language, write a program that accepts four integers as input, applies square root function to each,\nsimplifies and rationalizes the denominator of the fraction resulting from the multiplication of two fractions:\n√\n160\n√\n252\n×\n√\n245\n√\n108\n,\nand returns the simplified expression.\n**************Final task prompt*************\nUsing Python programming language, write a program that accepts ...\ngAI UserInstruction: Import the necessary libraries for the task. Input: None\nðAI AssistantSolution: To solve this task, we will need the ‘math‘ library for the square root function and the ‘fractions‘ library to simplify the\nresulting fraction. Here is how to import these libraries:\n1import  math\n2from  fractions  import  Fraction\nThe ‘math‘ library provides functions that deal with mathematical operations. The ‘sqrt‘ function, which we will use in this task, is\npart of this library.\nThe ‘fractions‘ library provides functions for creating and manipulating rational numbers.  The ‘Fraction‘ function, which we will\nuse to simplify the resulting fraction, is part of this library.\nNext request.\ngAI UserInstruction: Define a function that accepts four integers as input. Input: None\nðAI AssistantSolution:  Let’s define a function named ‘simplifyfraction‘ that accepts four integers as input.  These integers will represent the\nnumbers under the square root in the fractions.\n1def  simplify_fraction(a, b, c, d):\n2pass\nIn  this function,  ‘a’,  ‘b’,  ‘c’,  and ‘d’  are  the parameters  that  will accept  the  four integers  as  input.   The ‘pass’  statement  is a\nplaceholder and will be replaced with actual code in the next steps.\nNext request.\ngAI UserInstruction: Inside the function, apply the square root function to each of the input integers. Input: None\nðAI AssistantSolution: We will use the ‘math.sqrt’ function from the ‘math’ library to apply the square root to each of the input integers. Here is\nhow to do it:\n1def  simplify_fraction(a, b, c, d):\n2sqrt_a = math.sqrt(a)\n3sqrt_b = math.sqrt(b)\n4sqrt_c = math.sqrt(c)\n5sqrt_d = math.sqrt(d)\nIn this code, ‘sqrta’, ‘sqrtb’, ‘sqrtc’, and ‘sqrtd’ are variables that store the square root of the input integers ‘a’, ‘b’, ‘c’, and ‘d’\nrespectively.\nNext request.\ngHumanAbort\n41",
    "Table 18: Application A1, Scenario 1: Autonomous math problem-solving. Preliminary evaluation\non MetaGPT. It does not solve the math problem but gives a product solution.\nActionMetaGPT\ngPromptCompletely simplify and rationalize the denominator:\n√\n160\n√\n252\n×\n√\n245\n√\n108\nðThe boss has tasked me with creating a successful product that is efficient.\n## Product Goals\n1[\n2‘‘Create a product  that  meets  the  needs of the  target  market\",\n3‘‘Ensure  the  product  is  efficient  and  easy to use\",\n4‘‘Achieve a high  level  of  customer  satisfaction\"\n5]\n## User Stories\n1[\n2‘‘As a user , I want a product  that is easy to  navigate  so that I can  find\nwhat I need  quickly\",\n3‘‘As a user , I want a product  that is  reliable  and  efficient  so that I can\ndepend  on it\",\n4‘‘As a user , I want a product  that  meets  my  needs  so that I can  get  value\nfor my  money\",\n5‘‘As a user , I want a product  that is  constantly  updated  and  improved  so\nthat I can  enjoy  the  best  features\",\n6‘‘As a user , I want a product  that  offers  good  customer  support  so that I\ncan  get  help  when I need it\"\n7]\n## Competitive Analysis\n1[\n2‘‘Product A: Offers  similar  features  but  lacks  efficiency\",\n3‘‘Product B: Highly  efficient  but  does  not  meet  all the  needs of the\ntarget  market\",\n4‘‘Product C: Has a high  level  of  customer  satisfaction  but is not  easy to\nnavigate\",\n5‘‘Product D: Is  constantly  updated  and  improved  but  lacks  reliability\",\n6‘‘Product E: Offers  good  customer  support  but is not  efficient\",\n7‘‘Product F: Is  reliable  and  efficient  but  does  not  offer  good  customer\nsupport\",\n8‘‘Our  Target  Product: Aims to  combine  all  the  best  features  of the\ncompetitors  while  improving  on  their  weaknesses\"\n9]\n## Competitive Quadrant Chart\ngHumanAbort\n42",
    "Table 19: Application A7.  Example output of MiniWobChat on one web manipulation task “click-\nbutton-sequence.”\nActionAutoGen\ngInit chatExecutor agent to AssistantAgent:\nWe have an autonomous computer control agent that can perform atomic instructions specified by natural language to control\ncomputers. There are two types of instructions it can execute.\nFirst, given the instruction that matches the regular expression‘‘^type\\s.{1,}$\", it can type a list of characters via the keyboard.\nThis instruction should specify the target keyboard input for the agent to type. Before this typing instruction, you should first locate\nthe cursor by clicking the input box with click instruction.\nSecond, given the instruction that matches the regular expression,‘‘^clickxpath\\s.{1,}$\", it can click an HTML element\nwith an xpath that is visible on the webpage. The target of this instruction should be a valid xpath. Below is the HTML code of the\nwebpage where the agent should solve a task.\n1<div id=\"wrap\" data -wob_ref=\"2\" data -wob_eps=\"e0\">\n2<div id=\"query\">Click  button ONE , then  click  button  TWO.</div >\n3<div id=\"area\" data -wob_ref=\"3\" data -wob_eps=\"e0\">\n4<button  id=\"subbtn\" style=\"position:absolute; left :103px; top:87px\" data -\nwob_ref=\"4\" data -wob_eps=\"e0\">ONE </button >\n5<button  id=\"subbtn2\" style=\"position:absolute; left :44px; top:97px\" data -\nwob_ref=\"5\" data -wob_eps=\"e0\">TWO </button >\n6</div >\n7</div >\ntask: Click button ONE, then click button TWO.\nplan:\n1. Click the button with xpath “//button[@id=‘subbtn’]”.\n2. Click the button with xpath “//button[@id=‘subbtn2’]”.\nCurrent task: Click button ONE, then click button TWO.\nplan:\nð***************************************************************\nAssistantAgent to Executor agent:\n1. Click the button with xpath “//button[@id=‘subbtn’]”.\n2. Click the button with xpath “//button[@id=‘subbtn2’]”.\n***************************************************************\nExecutor agent to AssistantAgent:\nBelow is the HTML code of the webpage where the agent should solve a task.\n1<div id=\"wrap\" data -wob_ref=\"2\" data -wob_eps=\"e0\">\n2<div id=\"query\">Click  button ONE , then  click  button  TWO.</div >\n3<div id=\"area\" data -wob_ref=\"3\" data -wob_eps=\"e0\">\n4<button  id=\"subbtn\" style=\"position:absolute; left :103px; top:87px\" data -\nwob_ref=\"4\" data -wob_eps=\"e0\">ONE </button >\n5<button  id=\"subbtn2\" style=\"position:absolute; left :44px; top:97px\" data -\nwob_ref=\"5\" data -wob_eps=\"e0\">TWO </button >\n6</div >\n7</div >\nCurrent task: Click button ONE, then click button TWO.\nHere is a plan you are following now.\n1. Click the button with xpath “//button[@id=‘subbtn’]”.\n2. Click the button with xpath “//button[@id=‘subbtn2’]”.\nWe have a history of instructions that have been already executed by the autonomous agent so far.\nNo instruction has been executed yet.\nBased on the plan and the history of instructions executed so far, the first instruction should be ‘\n***************************************************************\nAssistantAgent to Executor agent:\nclickxpath //button[@id=‘subbtn’]\n***************************************************************\nExecutor agent to AssistantAgent:\nHold on, please wait for my next instruction.\n***************************************************************\nAssistantAgent to Executor agent:\nSure, I’ll be here when you’re ready with your next instruction.\n***************************************************************\nExecutor agent to AssistantAgent:\nBelow is the HTML code of the webpage where the agent should solve a task.\n1<div id=\"wrap\" data -wob_ref=\"2\" data -wob_eps=\"e0\">\n2<div id=\"query\">Click  button ONE , then  click  button  TWO.</div >\n3<div id=\"area\" data -wob_ref=\"3\" data -wob_eps=\"e0\">\n4<button  id=\"subbtn\" style=\"position:absolute; left :103px; top:87px\" data -\nwob_ref=\"4\" data -wob_eps=\"e0\" data -tampered=\"e0\">ONE </button >\n5<button  id=\"subbtn2\" style=\"position:absolute; left :44px; top:97px\" data -\nwob_ref=\"5\" data -wob_eps=\"e0\">TWO </button >\n6</div >\n7</div >\nCurrent task: Click button ONE, then click button TWO.\nHere is a plan you are following now.\n1. Click the button with xpath “//button[@id=‘subbtn’]”.\n2. Click the button with xpath “//button[@id=‘subbtn2’]”.\nWe have a history of instructions that have been already executed by the autonomous agent so far.\n1: clickxpath //button[@id=‘subbtn’]\nBased on the plan and the history of instructions executed so far, the next proper instruction should be ‘\n***************************************************************\nAssistantAgent to Executor agent:\nclickxpath //button[@id=‘subbtn2’]\n***************************************************************\nExecutor agent to AssistantAgent:\nSUCCESS!!!!\nðTERMINATE\n43"
  ]
}
{
  "key": "QES8DF5I",
  "url": "http://arxiv.org/pdf/2106.09685",
  "metadata": {
    "title": "LoRA: Low-Rank Adaptation of Large Language Models",
    "abstract": "  An important paradigm of natural language processing consists of large-scale\npre-training on general domain data and adaptation to particular tasks or\ndomains. As we pre-train larger models, full fine-tuning, which retrains all\nmodel parameters, becomes less feasible. Using GPT-3 175B as an example --\ndeploying independent instances of fine-tuned models, each with 175B\nparameters, is prohibitively expensive. We propose Low-Rank Adaptation, or\nLoRA, which freezes the pre-trained model weights and injects trainable rank\ndecomposition matrices into each layer of the Transformer architecture, greatly\nreducing the number of trainable parameters for downstream tasks. Compared to\nGPT-3 175B fine-tuned with Adam, LoRA can reduce the number of trainable\nparameters by 10,000 times and the GPU memory requirement by 3 times. LoRA\nperforms on-par or better than fine-tuning in model quality on RoBERTa,\nDeBERTa, GPT-2, and GPT-3, despite having fewer trainable parameters, a higher\ntraining throughput, and, unlike adapters, no additional inference latency. We\nalso provide an empirical investigation into rank-deficiency in language model\nadaptation, which sheds light on the efficacy of LoRA. We release a package\nthat facilitates the integration of LoRA with PyTorch models and provide our\nimplementations and model checkpoints for RoBERTa, DeBERTa, and GPT-2 at\nhttps://github.com/microsoft/LoRA.\n",
    "published": "2021-06-17T17:37:18Z"
  },
  "text": [
    "LORA:  LOW-RANKADAPTATION   OFLARGELAN-\nGUAGEMODELS\nEdward Hu\n∗\nYelong Shen\n∗\nPhillip WallisZeyuan Allen-Zhu\nYuanzhi LiShean WangLu WangWeizhu Chen\nMicrosoft Corporation\n{edwardhu, yeshe, phwallis, zeyuana,\nyuanzhil, swang, luw, wzchen}@microsoft.com\nyuanzhil@andrew.cmu.edu\n(Version 2)\nABSTRACT\nAn important paradigm of natural language processing consists of large-scale pre-\ntraining on general domain data and adaptation to particular tasks or domains. As\nwe pre-train larger models, full fine-tuning, which retrains all model parameters,\nbecomes less feasible.  Using GPT-3 175B as an example – deploying indepen-\ndent instances of fine-tuned models, each with 175B parameters, is prohibitively\nexpensive.  We proposeLow-RankAdaptation, or LoRA, which freezes the pre-\ntrained model weights and injects trainable rank decomposition matrices into each\nlayer of the Transformer architecture, greatly reducing the number of trainable pa-\nrameters for downstream tasks. Compared to GPT-3 175B fine-tuned with Adam,\nLoRA can reduce the number of trainable parameters by 10,000 times and the\nGPU memory requirement by 3 times. LoRA performs on-par or better than fine-\ntuning in model quality on RoBERTa, DeBERTa, GPT-2, and GPT-3, despite hav-\ning fewer trainable parameters, a higher training throughput, and, unlike adapters,\nno additional inference latency.  We also provide an empirical investigation into\nrank-deficiency in language model adaptation, which sheds light on the efficacy of\nLoRA. We release a package that facilitates the integration of LoRA with PyTorch\nmodels and provide our implementations and model checkpoints for RoBERTa,\nDeBERTa, and GPT-2 athttps://github.com/microsoft/LoRA.\n1INTRODUCTION\nPretrained \nWeights\n푊∈ℝ\n푑×푑\nx\nh\n퐵=0\n퐴=풩(0,휎\n2\n)\n푑\n푟\nPretrained \nWeights\n푊∈ℝ\n푑×푑\nx\nf(x)\n푑\nFigure 1: Our reparametriza-\ntion. We only trainAandB.\nMany  applications  in  natural  language  processing  rely  on  adapt-\ningonelarge-scale,  pre-trained language model tomultipledown-\nstream applications. Such adaptation is usually done viafine-tuning,\nwhich updates all the parameters of the pre-trained model. The ma-\njor downside of fine-tuning is that the new model contains as many\nparameters as in the original model.   As larger models are trained\nevery  few  months,  this  changes  from  a  mere  “inconvenience”  for\nGPT-2 (Radford et al., b) or RoBERTa large (Liu et al., 2019) to a\ncritical deployment challenge for GPT-3 (Brown et al., 2020) with\n175 billion trainable parameters.\n1\nMany sought to mitigate this by adapting only some parameters or\nlearning external modules for new tasks.  This way,  we only need\nto store and load a small number of task-specific parameters in ad-\ndition to the pre-trained model for each task,  greatly boosting the\noperational efficiency when deployed. However, existing techniques\n∗\nEqual contribution.\n0\nCompared to V1, this draft includes better baselines, experiments on GLUE, and more on adapter latency.\n1\nWhile GPT-3 175B achieves non-trivial performance with few-shot learning, fine-tuning boosts its perfor-\nmance significantly as shown in Appendix A.\n1\narXiv:2106.09685v2  [cs.CL]  16 Oct 2021",
    "often introduce inference latency (Houlsby et al., 2019; Rebuffi et al., 2017) by extending model\ndepth or reduce the model’s usable sequence length (Li & Liang, 2021; Lester et al., 2021; Ham-\nbardzumyan et al., 2020; Liu et al., 2021) (Section 3). More importantly, these method often fail to\nmatch the fine-tuning baselines, posing a trade-off between efficiency and model quality.\nWe take inspiration from Li et al. (2018a); Aghajanyan et al. (2020) which show that the learned\nover-parametrized  models  in  fact  reside  on  a  low  intrinsic  dimension.   We  hypothesize  that  the\nchange in weights during model adaptation also has a low “intrinsic rank”, leading to our proposed\nLow-RankAdaptation (LoRA) approach.  LoRA allows us to train some dense layers in a neural\nnetwork indirectly by optimizing rank decomposition matrices of the dense layers’ change during\nadaptation instead, while keeping the pre-trained weights frozen, as shown in Figure 1. Using GPT-3\n175B as an example, we show that a very low rank (i.e.,rin Figure 1 can be one or two) suffices even\nwhen the full rank (i.e.,d) is as high as 12,288, making LoRA both storage- and compute-efficient.\nLoRA possesses several key advantages.\n•  A pre-trained model can be shared and used to build many small LoRA modules for dif-\nferent tasks.  We can freeze the shared model and efficiently switch tasks by replacing the\nmatricesAandBin Figure 1, reducing the storage requirement and task-switching over-\nhead significantly.\n•  LoRA makes training more efficient and lowers the hardware barrier to entry by up to 3\ntimes when using adaptive optimizers since we do not need to calculate the gradients or\nmaintain the optimizer states for most parameters.  Instead, we only optimize the injected,\nmuch smaller low-rank matrices.\n•  Our simple linear design allows us to merge the trainable matrices with the frozen weights\nwhen deployed,introducing no inference latencycompared to a fully fine-tuned model, by\nconstruction.\n•  LoRA is orthogonal to many prior methods and can be combined with many of them, such\nas prefix-tuning. We provide an example in Appendix E.\nTerminologies and ConventionsWe make frequent references to the Transformer architecture\nand  use  the  conventional  terminologies  for  its  dimensions.    We  call  the  input  and  output  di-\nmension  size  of  a  Transformer  layerd\nmodel\n.    We  useW\nq\n,W\nk\n,W\nv\n,  andW\no\nto  refer  to  the\nquery/key/value/output projection matrices in the self-attention module.WorW\n0\nrefers to a pre-\ntrained weight matrix and∆Wits accumulated gradient update during adaptation.   We userto\ndenote the rank of a LoRA module.  We follow the conventions set out by (Vaswani et al., 2017;\nBrown et al., 2020) and use Adam (Loshchilov & Hutter, 2019; Kingma & Ba, 2017) for model\noptimization and use a Transformer MLP feedforward dimensiond\nffn\n= 4×d\nmodel\n.\n2PROBLEMSTATEMENT\nWhile our proposal is agnostic to training objective, we focus on language modeling as our motivat-\ning use case.  Below is a brief description of the language modeling problem and, in particular, the\nmaximization of conditional probabilities given a task-specific prompt.\nSuppose  we  are  given  a  pre-trained  autoregressive  language  modelP\nΦ\n(y|x)parametrized  byΦ.\nFor instance,P\nΦ\n(y|x)can be a generic multi-task learner such as GPT (Radford et al., b; Brown\net al., 2020) based on the Transformer architecture (Vaswani et al., 2017).  Consider adapting this\npre-trained model to downstream conditional text generation tasks, such as summarization, machine\nreading comprehension (MRC), and natural language to SQL (NL2SQL). Each downstream task is\nrepresented by a training dataset of context-target pairs:Z={(x\ni\n,y\ni\n)}\ni=1,..,N\n, where bothx\ni\nand\ny\ni\nare sequences of tokens.   For example,  in NL2SQL,x\ni\nis a natural language query andy\ni\nits\ncorresponding SQL command; for summarization,x\ni\nis the content of an article andy\ni\nits summary.\n2",
    "During full fine-tuning, the model is initialized to pre-trained weightsΦ\n0\nand updated toΦ\n0\n+ ∆Φ\nby repeatedly following the gradient to maximize the conditional language modeling objective:\nmax\nΦ\n∑\n(x,y)∈Z\n|y|\n∑\nt=1\nlog(P\nΦ\n(y\nt\n|x,y\n<t\n))(1)\nOne of the main drawbacks for full fine-tuning is that foreachdownstream task, we learn adifferent\nset of parameters∆Φwhose dimension|∆Φ|equals|Φ\n0\n|.  Thus, if the pre-trained model is large\n(such as GPT-3 with|Φ\n0\n| ≈175Billion),  storing and deploying many independent instances of\nfine-tuned models can be challenging, if at all feasible.\nIn  this  paper,  we  adopt  a  more  parameter-efficient  approach,  where  the  task-specific  parameter\nincrement∆Φ  =  ∆Φ(Θ)is further encoded by a much smaller-sized set of parametersΘwith\n|Θ|\u001c|Φ\n0\n|. The task of finding∆Φthus becomes optimizing overΘ:\nmax\nΘ\n∑\n(x,y)∈Z\n|y|\n∑\nt=1\nlog\n(\np\nΦ\n0\n+∆Φ(Θ)\n(y\nt\n|x,y\n<t\n)\n)\n(2)\nIn the subsequent sections, we propose to use a low-rank representation to encode∆Φthat is both\ncompute- and memory-efficient.  When the pre-trained model is GPT-3 175B, the number of train-\nable parameters|Θ|can be as small as0.01%of|Φ\n0\n|.\n3AREN’TEXISTINGSOLUTIONSGOODENOUGH?\nThe problem we set out to tackle is by no means new. Since the inception of transfer learning, dozens\nof works have sought to make model adaptation more parameter- and compute-efficient.  See Sec-\ntion 6 for a survey of some of the well-known works. Using language modeling as an example, there\nare two prominent strategies when it comes to efficient adaptations: adding adapter layers (Houlsby\net al., 2019; Rebuffi et al., 2017; Pfeiffer et al., 2021; R\n ̈\nuckl\n ́\ne et al., 2020) or optimizing some forms\nof the input layer activations (Li & Liang, 2021; Lester et al., 2021; Hambardzumyan et al., 2020;\nLiu et al., 2021).  However,  both strategies have their limitations,  especially in a large-scale and\nlatency-sensitive production scenario.\nAdapter Layers Introduce Inference LatencyThere are many variants of adapters.  We focus\non the original design by Houlsby et al. (2019) which has two adapter layers per Transformer block\nand a more recent one by   Lin et al. (2020) which has only one per block but with an additional\nLayerNorm (Ba et al., 2016). While one can reduce the overall latency by pruning layers or exploit-\ning multi-task settings (R\n ̈\nuckl\n ́\ne et al., 2020; Pfeiffer et al., 2021), there is no direct ways to bypass\nthe extra compute in adapter layers.  This seems like a non-issue since adapter layers are designed\nto have few parameters (sometimes<1% of the original model) by having a small bottleneck di-\nmension, which limits the FLOPs they can add.  However, large neural networks rely on hardware\nparallelism to keep the latency low, and adapter layers have to be processed sequentially. This makes\na difference in the online inference setting where the batch size is typically as small as one.  In a\ngeneric scenario without model parallelism, such as running inference on GPT-2 (Radford et al., b)\nmedium on a single GPU, we see a noticeable increase in latency when using adapters, even with a\nvery small bottleneck dimension (Table 1).\nThis problem gets worse when we need to shard the model as done in Shoeybi et al. (2020); Lep-\nikhin et al. (2020), because the additional depth requires more synchronous GPU operations such as\nAllReduceandBroadcast, unless we store the adapter parameters redundantly many times.\nDirectly Optimizing the Prompt is HardThe other direction, as exemplified by prefix tuning (Li\n& Liang, 2021), faces a different challenge.  We observe that prefix tuning is difficult to optimize\nand  that  its  performance  changes  non-monotonically  in  trainable  parameters,  confirming  similar\nobservations in the original paper.  More fundamentally, reserving a part of the sequence length for\nadaptation necessarily reduces the sequence length available to process a downstream task, which\nwe suspect makes tuning the prompt less performant compared to other methods. We defer the study\non task performance to Section 5.\n3",
    "Batch Size32161\nSequence Length512256128\n|Θ|0.5M11M11M\nFine-Tune/LoRA1449.4±0.8338.0±0.619.8±2.7\nAdapter\nL\n1482.0±1.0 (+2.2%)354.8±0.5 (+5.0%)23.9±2.1 (+20.7%)\nAdapter\nH\n1492.2±1.0 (+3.0%)366.3±0.5 (+8.4%)25.8±2.2 (+30.3%)\nTable 1: Infernece latency of a single forward pass in GPT-2 medium measured in milliseconds, av-\neraged over 100 trials. We use an NVIDIA Quadro RTX8000. “|Θ|” denotes the number of trainable\nparameters in adapter layers.  Adapter\nL\nand Adapter\nH\nare two variants of adapter tuning, which we\ndescribe in Section 5.1. The inference latency introduced by adapter layers can be significant in an\nonline, short-sequence-length scenario. See the full study in Appendix B.\n4OURMETHOD\nWe describe the simple design of LoRA and its practical benefits. The principles outlined here apply\nto any dense layers in deep learning models, though we only focus on certain weights in Transformer\nlanguage models in our experiments as the motivating use case.\n4.1LOW-RANK-PARAMETRIZEDUPDATEMATRICES\nA neural network contains many dense layers which perform matrix multiplication.   The weight\nmatrices in these layers typically have full-rank. When adapting to a specific task, Aghajanyan et al.\n(2020) shows that the pre-trained language models have a low “instrisic dimension” and can still\nlearn efficiently despite a random projection to a smaller subspace.  Inspired by this, we hypothe-\nsize the updates to the weights also have a low “intrinsic rank” during adaptation. For a pre-trained\nweight matrixW\n0\n∈R\nd×k\n, we constrain its update by representing the latter with a low-rank de-\ncompositionW\n0\n+ ∆W=W\n0\n+BA, whereB∈R\nd×r\n,A∈R\nr×k\n, and the rankr\u001cmin(d,k).\nDuring training,W\n0\nis frozen and does not receive gradient updates, whileAandBcontain trainable\nparameters. Note bothW\n0\nand∆W=BAare multiplied with the same input, and their respective\noutput vectors are summed coordinate-wise. Forh=W\n0\nx, our modified forward pass yields:\nh=W\n0\nx+ ∆Wx=W\n0\nx+BAx(3)\nWe illustrate our reparametrization in Figure 1.  We use a random Gaussian initialization forAand\nzero forB, so∆W=BAis zero at the beginning of training. We then scale∆Wxby\nα\nr\n, whereα\nis a constant inr. When optimizing with Adam, tuningαis roughly the same as tuning the learning\nrate if we scale the initialization appropriately.  As a result, we simply setαto the firstrwe try\nand do not tune it.  This scaling helps to reduce the need to retune hyperparameters when we vary\nr(Yang & Hu, 2021).\nA Generalization of Full Fine-tuning.A more general form of fine-tuning allows the training of\na subset of the pre-trained parameters. LoRA takes a step further and does not require the accumu-\nlated gradient update to weight matrices to have full-rank during adaptation. This means that when\napplying LoRA to all weight matrices and training all biases\n2\n, we roughly recover the expressive-\nness of full fine-tuning by setting the LoRA rankrto the rank of the pre-trained weight matrices. In\nother words, as we increase the number of trainable parameters\n3\n, training LoRA roughly converges\nto training the original model, while adapter-based methods converges to an MLP and prefix-based\nmethods to a model that cannot take long input sequences.\nNo Additional Inference Latency.When deployed in production, we can explicitly compute and\nstoreW=W\n0\n+BAand perform inference as usual.  Note that bothW\n0\nandBAare inR\nd×k\n.\nWhen we need to switch to another downstream task, we can recoverW\n0\nby subtractingBAand\nthen adding a differentB\n′\nA\n′\n, a quick operation with very little memory overhead.  Critically, this\n2\nThey represent a negligible number of parameters compared to weights.\n3\nAn inevitability when adapting to hard tasks.\n4",
    "guarantees that we do not introduce any additional latency during inference compared to a fine-tuned\nmodel by construction.\n4.2APPLYINGLORATOTRANSFORMER\nIn principle, we can apply LoRA to any subset of weight matrices in a neural network to reduce the\nnumber of trainable parameters.  In the Transformer architecture, there are four weight matrices in\nthe self-attention module (W\nq\n,W\nk\n,W\nv\n,W\no\n) and two in the MLP module. We treatW\nq\n(orW\nk\n,W\nv\n)\nas a single matrix of dimensiond\nmodel\n×d\nmodel\n, even though the output dimension is usually sliced\ninto attention heads.  We limit our study toonly adapting the attention weightsfor downstream\ntasks and freeze the MLP modules (so they are not trained in downstream tasks) both for simplicity\nand parameter-efficiency.We further study the effect on adapting different types of attention weight\nmatrices in a Transformer in Section 7.1. We leave the empirical investigation of adapting the MLP\nlayers, LayerNorm layers, and biases to a future work.\nPractical Benefits and Limitations.The most significant benefit comes from the reduction in\nmemory and storage usage.  For a large Transformer trained with Adam,  we reduce that VRAM\nusage by up to2/3ifr\u001cd\nmodel\nas we do not need to store the optimizer states for the frozen\nparameters.  On GPT-3 175B, we reduce the VRAM consumption during training from 1.2TB to\n350GB. Withr= 4and only the query and value projection matrices being adapted, the checkpoint\nsize is reduced by roughly 10,000×(from 350GB to 35MB)\n4\n. This allows us to train with signifi-\ncantly fewer GPUs and avoid I/O bottlenecks.  Another benefit is that we can switch between tasks\nwhile deployed at a much lower cost by only swapping the LoRA weights as opposed to all the\nparameters. This allows for the creation of many customized models that can be swapped in and out\non the fly on machines that store the pre-trained weights in VRAM. We also observe a 25% speedup\nduring training on GPT-3 175B compared to full fine-tuning\n5\nas we do not need to calculate the\ngradient for the vast majority of the parameters.\nLoRA also has its limitations. For example, it is not straightforward to batch inputs to different tasks\nwith differentAandBin a single forward pass, if one chooses to absorbAandBintoWto eliminate\nadditional inference latency. Though it is possible to not merge the weights and dynamically choose\nthe LoRA modules to use for samples in a batch for scenarios where latency is not critical.\n5EMPIRICALEXPERIMENTS\nWe  evaluate  the  downstream  task  performance  of  LoRA  on  RoBERTa  (Liu  et  al.,  2019),  De-\nBERTa (He et al., 2021), and GPT-2 (Radford et al., b), before scaling up to GPT-3 175B (Brown\net al., 2020).  Our experiments cover a wide range of tasks, from natural language understanding\n(NLU) to generation (NLG). Specifically, we evaluate on the GLUE (Wang et al., 2019) benchmark\nfor RoBERTa and DeBERTa. We follow the setup of Li & Liang (2021) on GPT-2 for a direct com-\nparison and add WikiSQL (Zhong et al., 2017) (NL to SQL queries) and SAMSum (Gliwa et al.,\n2019) (conversation summarization) for large-scale experiments on GPT-3.   See Appendix C for\nmore details on the datasets we use. We use NVIDIA Tesla V100 for all experiments.\n5.1BASELINES\nTo compare with other baselines broadly, we replicate the setups used by prior work and reuse their\nreported numbers whenever possible. This, however, means that some baselines might only appear\nin certain experiments.\nFine-Tuning (FT)is a common approach for adaptation. During fine-tuning, the model is initialized\nto the pre-trained weights and biases, and all model parameters undergo gradient updates.A simple\nvariant is to update only some layers while freezing others.  We include one such baseline reported\nin prior work (Li & Liang, 2021) on GPT-2, which adapts just the last two layers (FT\nTop2\n).\n4\nWe still need the 350GB model during deployment; however, storing 100 adapted models only requires\n350GB + 35MB * 100≈354GB as opposed to 100 * 350GB≈35TB.\n5\nFor GPT-3 175B, the training throughput for full fine-tuning is 32.5 tokens/s per V100 GPU; with the same\nnumber of weight shards for model parallelism, the throughput is 43.1 tokens/s per V100 GPU for LoRA.\n5",
    "Model & Method# Trainable\nParametersMNLI    SST-2    MRPCCoLAQNLIQQPRTESTS-B   Avg.\nRoB\nbase\n(FT)*125.0M87.694.890.263.692.891.978.791.286.4\nRoB\nbase\n(BitFit)*0.1M84.793.792.762.091.884.081.590.885.2\nRoB\nbase\n(Adpt\nD\n)*0.3M87.1\n±.0\n94.2\n±.1\n88.5\n±1.1\n60.8\n±.4\n93.1\n±.1\n90.2\n±.0\n71.5\n±2.7\n89.7\n±.3\n84.4\nRoB\nbase\n(Adpt\nD\n)*0.9M87.3\n±.1\n94.7\n±.3\n88.4\n±.1\n62.6\n±.9\n93.0\n±.2\n90.6\n±.0\n75.9\n±2.2\n90.3\n±.1\n85.4\nRoB\nbase\n(LoRA)0.3M87.5\n±.3\n95.1\n±.2\n89.7\n±.7\n63.4\n±1.2\n93.3\n±.3\n90.8\n±.1\n86.6\n±.7\n91.5\n±.2\n87.2\nRoB\nlarge\n(FT)*355.0M90.296.490.968.094.792.286.692.488.9\nRoB\nlarge\n(LoRA)\n0.8M90.6\n±.2\n96.2\n±.5\n90.9\n±1.2\n68.2\n±1.9\n94.9\n±.3\n91.6\n±.1\n87.4\n±2.5\n92.6\n±.2\n89.0\nRoB\nlarge\n(Adpt\nP\n)†3.0M90.2\n±.3\n96.1\n±.3\n90.2\n±.7\n68.3\n±1.0\n94.8\n±.2\n91.9\n±.1\n83.8\n±2.9\n92.1\n±.7\n88.4\nRoB\nlarge\n(Adpt\nP\n)†\n0.8M90.5\n±.3\n96.6\n±.2\n89.7\n±1.2\n67.8\n±2.5\n94.8\n±.3\n91.7\n±.2\n80.1\n±2.9\n91.9\n±.4\n87.9\nRoB\nlarge\n(Adpt\nH\n)†\n6.0M89.9\n±.5\n96.2\n±.3\n88.7\n±2.9\n66.5\n±4.4\n94.7\n±.2\n92.1\n±.1\n83.4\n±1.1\n91.0\n±1.7\n87.8\nRoB\nlarge\n(Adpt\nH\n)†0.8M90.3\n±.3\n96.3\n±.5\n87.7\n±1.7\n66.3\n±2.0\n94.7\n±.2\n91.5\n±.1\n72.9\n±2.9\n91.5\n±.5\n86.4\nRoB\nlarge\n(LoRA)†0.8M90.6\n±.2\n96.2\n±.5\n90.2\n±1.0\n68.2\n±1.9\n94.8\n±.3\n91.6\n±.2\n85.2\n±1.1\n92.3\n±.5\n88.6\nDeB\nXXL\n(FT)*1500.0M91.897.292.072.096.092.793.992.991.1\nDeB\nXXL\n(LoRA)4.7M91.9\n±.2\n96.9\n±.2\n92.6\n±.6\n72.4\n±1.1\n96.0\n±.1\n92.9\n±.1\n94.9\n±.4\n93.0\n±.2\n91.3\nTable 2:  RoBERTa\nbase\n, RoBERTa\nlarge\n, and DeBERTa\nXXL\nwith different adaptation methods on the\nGLUE benchmark. We report the overall (matched and mismatched) accuracy for MNLI, Matthew’s\ncorrelation for CoLA, Pearson correlation for STS-B, and accuracy for other tasks. Higher is better\nfor all metrics. * indicates numbers published in prior works.†indicates runs configured in a setup\nsimilar to Houlsby et al. (2019) for a fair comparison.\nBias-only or BitFitis a baseline where we only train the bias vectors while freezing everything else.\nContemporarily, this baseline has also been studied by BitFit (Zaken et al., 2021).\nPrefix-embedding tuning (PreEmbed)inserts special tokens among the input tokens.  These spe-\ncial tokens have trainable word embeddings and are generally not in the model’s vocabulary. Where\nto place such tokens can have an impact on performance. We focus on “prefixing”, which prepends\nsuch tokens to the prompt, and “infixing”, which appends to the prompt; both are discussed in Li &\nLiang (2021).  We usel\np\n(resp.l\ni\n) denote the number of prefix (resp.  infix) tokens.  The number of\ntrainable parameters is|Θ|=d\nmodel\n×(l\np\n+l\ni\n).\nPrefix-layer tuning (PreLayer)is an extension to prefix-embedding tuning. Instead of just learning\nthe word embeddings (or equivalently, the activations after the embedding layer) for some special\ntokens, we learn the activations after every Transformer layer.  The activations computed from pre-\nvious layers are simply replaced by trainable ones. The resulting number of trainable parameters is\n|Θ|=L×d\nmodel\n×(l\np\n+l\ni\n), whereLis the number of Transformer layers.\nAdapter  tuningas  proposed  in  Houlsby  et  al.  (2019)  inserts  adapter  layers  between  the  self-\nattention module (and the MLP module) and the subsequent residual connection.   There are two\nfully connected layers with biases in an adapter layer with a nonlinearity in between.  We call this\noriginal designAdapter\nH\n.  Recently, Lin et al. (2020) proposed a more efficient design with the\nadapter layer applied only after the MLP module and after a LayerNorm. We call itAdapter\nL\n. This\nis very similar to another deign proposed in Pfeiffer et al. (2021), which we callAdapter\nP\n. We also\ninclude another baseline call AdapterDrop (R\n ̈\nuckl\n ́\ne et al., 2020) which drops some adapter layers for\ngreater efficiency (Adapter\nD\n).  We cite numbers from prior works whenever possible to maximize\nthe number of baselines we compare with; they are in rows with an asterisk (*) in the first column.\nIn all cases, we have|Θ|=\nˆ\nL\nAdpt\n×(2×d\nmodel\n×r+r+d\nmodel\n) + 2×\nˆ\nL\nLN\n×d\nmodel\nwhere\nˆ\nL\nAdpt\nis the number of adapter layers and\nˆ\nL\nLN\nthe number of trainable LayerNorms (e.g., in Adapter\nL\n).\nLoRAadds trainable pairs of rank decomposition matrices in parallel to existing weight matrices.\nAs mentioned in Section 4.2, we only apply LoRA toW\nq\nandW\nv\nin most experiments for simplicity.\nThe number of trainable parameters is determined by the rankrand the shape of the original weights:\n|Θ|= 2×\nˆ\nL\nLoRA\n×d\nmodel\n×r, where\nˆ\nL\nLoRA\nis the number of weight matrices we apply LoRA to.\n6",
    "Model & Method# TrainableE2E NLG Challenge\nParametersBLEUNISTMETROUGE-LCIDEr\nGPT-2 M (FT)*354.92M68.28.6246.271.02.47\nGPT-2 M (Adapter\nL\n)*0.37M66.38.4145.069.82.40\nGPT-2 M (Adapter\nL\n)*\n11.09M68.98.7146.171.32.47\nGPT-2 M (Adapter\nH\n)11.09M67.3\n±.6\n8.50\n±.07\n46.0\n±.2\n70.7\n±.2\n2.44\n±.01\nGPT-2 M (FT\nTop2\n)*25.19M68.18.5946.070.82.41\nGPT-2 M (PreLayer)*\n0.35M69.78.8146.171.42.49\nGPT-2 M (LoRA)0.35M70.4\n±.1\n8.85\n±.02\n46.8\n±.2\n71.8\n±.1\n2.53\n±.02\nGPT-2 L (FT)*774.03M68.58.7846.069.92.45\nGPT-2 L (Adapter\nL\n)0.88M69.1\n±.1\n8.68\n±.03\n46.3\n±.0\n71.4\n±.2\n2.49\n±.0\nGPT-2 L (Adapter\nL\n)\n23.00M68.9\n±.3\n8.70\n±.04\n46.1\n±.1\n71.3\n±.2\n2.45\n±.02\nGPT-2 L (PreLayer)*0.77M70.38.8546.271.72.47\nGPT-2 L (LoRA)0.77M70.4\n±.1\n8.89\n±.02\n46.8\n±.2\n72.0\n±.2\n2.47\n±.02\nTable  3:  GPT-2  medium  (M)  and  large  (L)  with  different  adaptation  methods  on  the  E2E  NLG\nChallenge.  For all metrics, higher is better.  LoRA outperforms several baselines with comparable\nor fewer trainable parameters.  Confidence intervals are shown for experiments we ran.  * indicates\nnumbers published in prior works.\n5.2ROBERTA BASE/LARGE\nRoBERTa (Liu et al., 2019) optimized the pre-training recipe originally proposed in BERT (Devlin\net al., 2019a) and boosted the latter’s task performance without introducing many more trainable\nparameters.   While  RoBERTa  has  been  overtaken  by  much  larger  models  on  NLP  leaderboards\nsuch as the GLUE benchmark (Wang et al., 2019) in recent years,  it remains a competitive and\npopular pre-trained model for its size among practitioners.  We take the pre-trained RoBERTa base\n(125M) and RoBERTa large (355M) from the HuggingFace Transformers library (Wolf et al., 2020)\nand evaluate the performance of different efficient adaptation approaches on tasks from the GLUE\nbenchmark.  We also replicate Houlsby et al. (2019) and Pfeiffer et al. (2021) according to their\nsetup.  To ensure a fair comparison, we make two crucial changes to how we evaluate LoRA when\ncomparing with adapters.  First, we use the same batch size for all tasks and use a sequence length\nof 128 to match the adapter baselines.  Second, we initialize the model to the pre-trained model for\nMRPC, RTE, and STS-B, not a model already adapted to MNLI like the fine-tuning baseline. Runs\nfollowing this more restricted setup from Houlsby et al. (2019) are labeled with†.  The result is\npresented in Table 2 (Top Three Sections). See Section D.1 for details on the hyperparameters used.\n5.3DEBERTAXXL\nDeBERTa  (He  et  al.,  2021)  is  a  more  recent  variant  of  BERT  that  is  trained  on  a  much  larger\nscale and performs very competitively on benchmarks such as GLUE (Wang et al., 2019) and Su-\nperGLUE (Wang et al., 2020).   We evaluate if LoRA can still match the performance of a fully\nfine-tuned DeBERTa XXL (1.5B) on GLUE. The result is presented in Table 2 (Bottom Section).\nSee Section D.2 for details on the hyperparameters used.\n5.4GPT-2MEDIUM/LARGE\nHaving shown that LoRA can be a competitive alternative to full fine-tuning on NLU, we hope to\nanswer if LoRA still prevails on NLG models, such as GPT-2 medium and large (Radford et al.,\nb).   We keep our setup as close as possible to Li & Liang (2021) for a direct comparison.   Due\nto space constraint,  we only present our result on E2E NLG Challenge (Table 3) in this section.\nSee Section F.1 for results on WebNLG (Gardent et al., 2017) and DART (Nan et al., 2020).  We\ninclude a list of the hyperparameters used in Section D.3.\n7",
    "Model&Method\n# TrainableWikiSQLMNLI-mSAMSum\nParametersAcc. (%)Acc. (%)R1/R2/RL\nGPT-3 (FT)175,255.8M73.889.552.0/28.0/44.5\nGPT-3 (BitFit)14.2M71.391.051.3/27.4/43.5\nGPT-3 (PreEmbed)\n3.2M63.188.648.3/24.2/40.5\nGPT-3 (PreLayer)20.2M70.189.550.8/27.3/43.5\nGPT-3 (Adapter\nH\n)7.1M71.989.853.0/28.9/44.8\nGPT-3 (Adapter\nH\n)\n40.1M73.291.553.2/29.0/45.1\nGPT-3 (LoRA)4.7M73.491.753.8/29.8/45.9\nGPT-3 (LoRA)\n37.7M74.091.653.4/29.2/45.1\nTable 4:  Performance of different adaptation methods on GPT-3 175B. We report the logical form\nvalidation accuracy on WikiSQL, validation accuracy on MultiNLI-matched, and Rouge-1/2/L on\nSAMSum.   LoRA performs better than prior approaches,  including full fine-tuning.   The results\non  WikiSQL  have  a  fluctuation  around±0.5%,  MNLI-m  around±0.1%,  and  SAMSum  around\n±0.2/±0.2/±0.1for the three metrics.\n5.5SCALING UP TOGPT-3 175B\nAs a final stress test for LoRA, we scale up to GPT-3 with 175 billion parameters.  Due to the high\ntraining cost, we only report the typical standard deviation for a given task over random seeds, as\nopposed to providing one for every entry. See Section D.4 for details on the hyperparameters used.\nAs shown in Table 4, LoRA matches or exceeds the fine-tuning baseline on all three datasets. Note\nthat not all methods benefit monotonically from having more trainable parameters, as shown in Fig-\nure 2.  We observe a significant performance drop when we use more than 256 special tokens for\nprefix-embedding tuning or more than 32 special tokens for prefix-layer tuning.  This corroborates\nsimilar observations in Li & Liang (2021).  While a thorough investigation into this phenomenon\nis out-of-scope for this work, we suspect that having more special tokens causes the input distri-\nbution to shift further away from the pre-training data distribution.  Separately, we investigate the\nperformance of different adaptation approaches in the low-data regime in Section F.3.\n67891011\nlog\n10\n # Trainable Parameters\n0.55\n0.60\n0.65\n0.70\n0.75\nValidation Accuracy\nWikiSQL\nMethod\nFine-Tune\nPrefixEmbed\nPrefixLayer\nAdapter(H)\nLoRA\n67891011\nlog\n10\n # Trainable Parameters\n0.84\n0.86\n0.88\n0.90\n0.92\nMultiNLI-matched\nFigure 2: GPT-3 175B validation accuracy vs. number of trainable parameters of several adaptation\nmethods on WikiSQL and MNLI-matched.  LoRA exhibits better scalability and task performance.\nSee Section F.2 for more details on the plotted data points.\n6RELATEDWORKS\nTransformer Language Models.Transformer (Vaswani et al., 2017) is a sequence-to-sequence\narchitecture that makes heavy use of self-attention. Radford et al. (a) applied it to autoregressive lan-\nguage modeling by using a stack of Transformer decoders. Since then, Transformer-based language\nmodels have dominated NLP, achieving the state-of-the-art in many tasks. A new paradigm emerged\nwith BERT (Devlin et al., 2019b) and GPT-2 (Radford et al., b) – both are large Transformer lan-\n8",
    "guage models trained on a large amount of text – where fine-tuning on task-specific data after pre-\ntraining on general domain data provides a significant performance gain compared to training on\ntask-specific data directly. Training larger Transformers generally results in better performance and\nremains an active research direction.  GPT-3 (Brown et al., 2020) is the largest single Transformer\nlanguage model trained to-date with 175B parameters.\nPrompt Engineering and Fine-Tuning.While GPT-3 175B can adapt its behavior with just a\nfew  additional  training  examples,  the  result  depends  heavily  on  the  input  prompt  (Brown  et  al.,\n2020).  This necessitates an empirical art of composing and formatting the prompt to maximize a\nmodel’s performance on a desired task, which is known as prompt engineering or prompt hacking.\nFine-tuning retrains a model pre-trained on general domains to a specific task Devlin et al. (2019b);\nRadford et al. (a). Variants of it include learning just a subset of the parameters Devlin et al. (2019b);\nCollobert & Weston (2008), yet practitioners often retrain all of them to maximize the downstream\nperformance. However, the enormity of GPT-3 175B makes it challenging to perform fine-tuning in\nthe usual way due to the large checkpoint it produces and the high hardware barrier to entry since it\nhas the same memory footprint as pre-training.\nParameter-Efficient Adaptation.Many have proposed insertingadapterlayers between existing\nlayers in a neural network (Houlsby et al., 2019; Rebuffi et al., 2017; Lin et al., 2020). Our method\nuses  a  similar  bottleneck  structure  to  impose  a  low-rank  constraint  on  the  weight  updates.   The\nkey functional difference is that our learned weights can be merged with the main weights during\ninference, thus not introducing any latency, which is not the case for the adapter layers (Section 3).\nA comtenporary extension of adapter isCOMPACTER(Mahabadi et al., 2021),  which essentially\nparametrizes the adapter layers using Kronecker products with some predetermined weight sharing\nscheme.   Similarly,  combining LoRA with other tensor product-based methods could potentially\nimprove its parameter efficiency, which we leave to future work.  More recently, many proposed\noptimizing the input word embeddings in lieu of fine-tuning, akin to a continuous and differentiable\ngeneralization of prompt engineering (Li & Liang, 2021; Lester et al., 2021; Hambardzumyan et al.,\n2020; Liu et al., 2021). We include comparisons with Li & Liang (2021) in our experiment section.\nHowever, this line of works can only scale up by using more special tokens in the prompt, which\ntake up available sequence length for task tokens when positional embeddings are learned.\nLow-Rank Structures in Deep Learning.Low-rank structure is very common in machine learn-\ning.  A lot of machine learning problems have certain intrinsic low-rank structure (Li et al., 2016;\nCai et al., 2010; Li et al., 2018b; Grasedyck et al., 2013).   Moreover,  it is known that for many\ndeep learning tasks, especially those with a heavily over-parametrized neural network, the learned\nneural network will enjoy low-rank properties after training (Oymak et al., 2019). Some prior works\neven explicitly impose the low-rank constraint when training the original neural network (Sainath\net al., 2013; Povey et al., 2018; Zhang et al., 2014; Jaderberg et al., 2014; Zhao et al., 2016; Kho-\ndak et al., 2021; Denil et al., 2014); however, to the best of our knowledge, none of these works\nconsiders low-rank update to a frozen model foradaptation to downstream tasks.  In theory liter-\nature, it is known that neural networks outperform other classical learning methods, including the\ncorresponding (finite-width) neural tangent kernels (Allen-Zhu et al., 2019; Li & Liang, 2018) when\nthe underlying concept class has certain low-rank structure (Ghorbani et al., 2020; Allen-Zhu & Li,\n2019; Allen-Zhu & Li, 2020a).  Another theoretical result in Allen-Zhu & Li (2020b) suggests that\nlow-rank adaptations can be useful for adversarial training.  In sum, we believe that our proposed\nlow-rank adaptation update is well-motivated by the literature.\n7UNDERSTANDING THELOW-RANKUPDATES\nGiven the empirical advantage of LoRA, we hope to further explain the properties of the low-rank\nadaptation learned from downstream tasks.   Note that the low-rank structure not only lowers the\nhardware barrier to entry which allows us to run multiple experiments in parallel,  but also gives\nbetter interpretability of how the update weights are correlated with the pre-trained weights.  We\nfocus our study on GPT-3 175B, where we achieved the largest reduction of trainable parameters\n(up to 10,000×) without adversely affecting task performances.\nWe perform a sequence of empirical studies to answer the following questions: 1) Given a parameter\nbudget constraint,which subset of weight matricesin a pre-trained Transformer should we adapt\n9",
    "to  maximize downstream  performance?   2)  Is the  “optimal” adaptation  matrix∆Wreally  rank-\ndeficient? If so, what is a good rank to use in practice? 3) What is the connection between∆Wand\nW? Does∆Whighly correlate withW? How large is∆Wcomparing toW?\nWe believe that our answers to question (2) and (3) shed light on the fundamental principles of using\npre-trained language models for downstream tasks, which is a critical topic in NLP.\n7.1WHICHWEIGHTMATRICES INTRANSFORMERSHOULDWEAPPLYLORATO?\nGiven a limited parameter budget, which types of weights should we adapt with LoRA to obtain\nthe best performance on downstream tasks? As mentioned in Section 4.2, we only consider weight\nmatrices in the self-attention module.  We set a parameter budget of 18M (roughly 35MB if stored\nin FP16) on GPT-3 175B, which corresponds tor= 8if we adapt one type of attention weights or\nr= 4if we adapt two types, for all 96 layers. The result is presented in Table 5.\n# of Trainable Parameters = 18M\nWeight TypeW\nq\nW\nk\nW\nv\nW\no\nW\nq\n,W\nk\nW\nq\n,W\nv\nW\nq\n,W\nk\n,W\nv\n,W\no\nRankr\n8888442\nWikiSQL (±0.5%)70.470.073.073.271.473.773.7\nMultiNLI (±0.1%)91.090.891.091.391.391.391.7\nTable 5: Validation accuracy on WikiSQL and MultiNLI after applying LoRA to different types of\nattention weights in GPT-3, given the same number of trainable parameters. Adapting bothW\nq\nand\nW\nv\ngives the best performance overall.  We find the standard deviation across random seeds to be\nconsistent for a given dataset, which we report in the first column.\nNote that putting all the parameters in∆W\nq\nor∆W\nk\nresults in significantly lower performance,\nwhile  adapting  bothW\nq\nandW\nv\nyields  the  best  result.   This  suggests  that  even  a  rank  of  four\ncaptures enough information in∆Wsuch that it is preferable to adapt more weight matrices than\nadapting a single type of weights with a larger rank.\n7.2WHAT IS THEOPTIMALRANKrFORLORA?\nWe  turn  our  attention  to  the  effect  of  rankron  model  performance.We  adapt{W\nq\n,W\nv\n},\n{W\nq\n,W\nk\n,W\nv\n,W\nc\n}, and justW\nq\nfor a comparison.\nWeight Typer= 1r= 2r= 4r= 8r= 64\nWikiSQL(±0.5%)\nW\nq\n68.869.670.570.470.0\nW\nq\n,W\nv\n73.473.373.773.873.5\nW\nq\n,W\nk\n,W\nv\n,W\no\n74.173.774.074.073.9\nMultiNLI (±0.1%)\nW\nq\n90.790.991.190.790.7\nW\nq\n,W\nv\n91.391.491.391.691.4\nW\nq\n,W\nk\n,W\nv\n,W\no\n91.291.791.791.591.4\nTable 6:  Validation accuracy on WikiSQL and MultiNLI with different rankr.  To our surprise, a\nrank as small as one suffices for adapting bothW\nq\nandW\nv\non these datasets while trainingW\nq\nalone\nneeds a largerr. We conduct a similar experiment on GPT-2 in Section H.2.\nTable 6 shows that, surprisingly, LoRA already performs competitively with a very smallr(more\nso for{W\nq\n,W\nv\n}than justW\nq\n).   This suggests the update matrix∆Wcould have a very small\n“intrinsic rank”.\n6\nTo further support this finding, we check the overlap of the subspaces learned by\ndifferent choices ofrand by different random seeds.  We argue that increasingrdoes not cover a\nmore meaningful subspace, which suggests that a low-rank adaptation matrix is sufficient.\n6\nHowever, we do not expect a smallrto work for every task or dataset.  Consider the following thought\nexperiment:  if the downstream task were in a different language than the one used for pre-training, retraining\nthe entire model (similar to LoRA withr=d\nmodel\n) could certainly outperform LoRA with a smallr.\n10",
    "Subspace similarity between differentr.GivenA\nr=8\nandA\nr=64\nwhich are the learned adapta-\ntion matrices with rankr= 8and64using thesame pre-trained model, we perform singular value\ndecomposition and obtain the right-singular unitary matricesU\nA\nr=8\nandU\nA\nr=64\n.\n7\nWe hope to an-\nswer: how much of the subspace spanned by the topisingular vectors inU\nA\nr=8\n(for1≤i≤8) is\ncontained in the subspace spanned by topjsingular vectors ofU\nA\nr=64\n(for1≤j≤64)? We mea-\nsure this quantity with a normalized subspace similarity based on the Grassmann distance (See Ap-\npendix G for a more formal discussion)\nφ(A\nr=8\n,A\nr=64\n,i,j) =\n||U\ni>\nA\nr=8\nU\nj\nA\nr=64\n||\n2\nF\nmin(i,j)\n∈[0,1](4)\nwhereU\ni\nA\nr=8\nrepresents the columns ofU\nA\nr=8\ncorresponding to the top-isingular vectors.\nφ(·)has a range of[0,1],  where1represents a complete overlap of subspaces and0a complete\nseparation.  See Figure 3 for howφchanges as we varyiandj.  We only look at the 48th layer\n(out  of  96)  due  to  space  constraint,  but  the  conclusion  holds  for  other  layers  as  well,  as  shown\nin Section H.1.\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n16\n121823293540465258\nj\n1\n2\n3\n4\n5\n6\n7\n8\ni\nW\nq\n16\n121823293540465258\nj\nW\nv\n12345678\nj\nW\nq\n12345678\nj\nW\nv\n(A\nr = 64\n, A\nr = 8\n, i, j)\nFigure 3: Subspace similarity between column vectors ofA\nr=8\nandA\nr=64\nfor both∆W\nq\nand∆W\nv\n.\nThe third and the fourth figures zoom in on the lower-left triangle in the first two figures.  The top\ndirections inr= 8are included inr= 64, and vice versa.\nWe make animportant observationfrom Figure 3.\nDirections  corresponding  to  the  top  singular  vector  overlap  significantly  between\nA\nr=8\nandA\nr=64\n,  while others do not.   Specifically,∆W\nv\n(resp.∆W\nq\n) ofA\nr=8\nand∆W\nv\n(resp.∆W\nq\n) ofA\nr=64\nshare a subspace of dimension 1 with normalized\nsimilarity>0.5, providing an explanation of whyr= 1performs quite well in our\ndownstream tasks for GPT-3.\nSince bothA\nr=8\nandA\nr=64\nare learned using the same pre-trained model, Figure 3 indicates that\nthe top singular-vector directions ofA\nr=8\nandA\nr=64\nare the most useful, while other directions\npotentially contain mostly random noises accumulated during training. Hence, the adaptation matrix\ncan indeed have a very low rank.\nSubspace similarity between different random seeds.We further confirm this by plotting the\nnormalized subspace similarity between two randomly seeded runs withr= 64, shown in Figure 4.\n∆W\nq\nappears to have a higher “intrinsic rank” than∆W\nv\n, since more common singular value direc-\ntions are learned by both runs for∆W\nq\n, which is in line with our empirical observation in Table 6.\nAs a comparison,  we also plot two random Gaussian matrices,  which do not share any common\nsingular value directions with each other.\n7.3HOWDOES THEADAPTATIONMATRIX∆WCOMPARE TOW?\nWe further investigate the relationship between∆WandW. In particular, does∆Whighly correlate\nwithW? (Or mathematically, is∆Wmostly contained in the top singular directions ofW?) Also,\n7\nNote that a similar analysis can be carried out withBand the left-singular unitary matrices – we stick with\nAfor our experiments.\n11",
    "0.0\n0.1\n0.2\n0.3\n0.4\n0.5\n15\n1015202530343944495459\nj\n1\n8\n16\n24\n32\n40\n48\n56\ni\nW\nq\n15\n1015202530343944495459\nj\n(A\nr = 64\n, A\n′\nr = 64\n, i, j)\nW\nv\n15\n1015202530343944495459\nj\nRandom Gaussian\nFigure 4:Left and Middle:Normalized subspace similarity between the column vectors ofA\nr=64\nfrom two random seeds, for both∆W\nq\nand∆W\nv\nin the 48-th layer.Right:the same heat-map\nbetween the column vectors of two random Gaussian matrices. See Section H.1 for other layers.\nhow “large” is∆Wcomparing to its corresponding directions inW?  This can shed light on the\nunderlying mechanism for adapting pre-trained language models.\nTo  answer  these  questions,  we  projectWonto  ther-dimensional  subspace  of∆Wby  comput-\ningU\n>\nWV\n>\n,  withU/Vbeing  the  left/right  singular-vector  matrix  of∆W.    Then,  we  com-\npare the Frobenius norm between‖U\n>\nWV\n>\n‖\nF\nand‖W‖\nF\n.  As a comparison, we also compute\n‖U\n>\nWV\n>\n‖\nF\nby replacingU,Vwith the toprsingular vectors ofWor a random matrix.\nr= 4r= 64\n∆W\nq\nW\nq\nRandom∆W\nq\nW\nq\nRandom\n||U\n>\nW\nq\nV\n>\n||\nF\n=0.3221.670.021.9037.710.33\n||W\nq\n||\nF\n= 61.95||∆W\nq\n||\nF\n= 6.91||∆W\nq\n||\nF\n= 3.57\nTable 7:  The Frobenius norm ofU\n>\nW\nq\nV\n>\nwhereUandVare the left/right toprsingular vector\ndirections of either (1)∆W\nq\n, (2)W\nq\n, or (3) a random matrix.  The weight matrices are taken from\nthe 48th layer of GPT-3.\nWe drawseveral conclusionsfrom Table 7. First,∆Whas a stronger correlation withWcompared\nto a random matrix, indicating that∆Wamplifies some features that are already inW.  Second,\ninstead of repeating the top singular directions ofW,∆Wonlyamplifies directions that are not\nemphasized inW.   Third,  the amplification factor is rather huge:21.5≈6.91/0.32forr=  4.\nSee Section H.4 for whyr= 64has a smaller amplification factor. We also provide a visualization\nin Section H.3 for how the correlation changes as we include more top singular directions fromW\nq\n.\nThis suggests that the low-rank adaptation matrix potentiallyamplifies the important features for\nspecific downstream tasks that were learned but not emphasized in the general pre-training model.\n8CONCLUSION ANDFUTUREWORK\nFine-tuning enormous language models is prohibitively expensive in terms of the hardware required\nand the storage/switching cost for hosting independent instances for different tasks.  We propose\nLoRA, an efficient adaptation strategy that neither introduces inference latency nor reduces input\nsequence length while retaining high model quality. Importantly, it allows for quick task-switching\nwhen deployed as a service by sharing the vast majority of the model parameters. While we focused\non Transformer language models,  the proposed principles are generally applicable to any neural\nnetworks with dense layers.\nThere are many directions for future works. 1) LoRA can be combined with other efficient adapta-\ntion methods, potentially providing orthogonal improvement. 2) The mechanism behind fine-tuning\nor LoRA is far from clear – how are features learned during pre-training transformed to do well\non downstream tasks?  We believe that LoRA makes it more tractable to answer this than full fine-\n12",
    "tuning.  3) We mostly depend on heuristics to select the weight matrices to apply LoRA to.  Are\nthere more principled ways to do it?  4) Finally, the rank-deficiency of∆Wsuggests thatWcould\nbe rank-deficient as well, which can also be a source of inspiration for future works.\nREFERENCES\nArmen Aghajanyan,  Luke Zettlemoyer,  and Sonal Gupta.   Intrinsic Dimensionality Explains the\nEffectiveness of Language Model Fine-Tuning.arXiv:2012.13255 [cs], December 2020.  URL\nhttp://arxiv.org/abs/2012.13255.\nZeyuan Allen-Zhu and Yuanzhi Li. What Can ResNet Learn Efficiently, Going Beyond Kernels?  In\nNeurIPS, 2019. Full version available athttp://arxiv.org/abs/1905.10337.\nZeyuan Allen-Zhu and Yuanzhi Li. Backward feature correction: How deep learning performs deep\nlearning.arXiv preprint arXiv:2001.04413, 2020a.\nZeyuan Allen-Zhu and Yuanzhi Li.  Feature purification: How adversarial training performs robust\ndeep learning.arXiv preprint arXiv:2005.10190, 2020b.\nZeyuan Allen-Zhu, Yuanzhi Li, and Zhao Song.  A convergence theory for deep learning via over-\nparameterization. InICML, 2019. Full version available athttp://arxiv.org/abs/1811.\n03962.\nJimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E. Hinton. Layer normalization, 2016.\nTom  B.  Brown,  Benjamin  Mann,  Nick  Ryder,  Melanie  Subbiah,  Jared  Kaplan,  Prafulla  Dhari-\nwal,  Arvind  Neelakantan,  Pranav  Shyam,  Girish  Sastry,  Amanda  Askell,  Sandhini  Agarwal,\nAriel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M.\nZiegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin,\nScott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford,\nIlya Sutskever, and Dario Amodei.  Language Models are Few-Shot Learners.arXiv:2005.14165\n[cs], July 2020. URLhttp://arxiv.org/abs/2005.14165.\nJian-Feng Cai, Emmanuel J Cand\n`\nes, and Zuowei Shen. A singular value thresholding algorithm for\nmatrix completion.SIAM Journal on optimization, 20(4):1956–1982, 2010.\nDaniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-Gazpio, and Lucia Specia.  Semeval-2017 task\n1:  Semantic textual similarity multilingual and crosslingual focused evaluation.Proceedings of\nthe 11th International Workshop on Semantic Evaluation (SemEval-2017), 2017.  doi: 10.18653/\nv1/s17-2001. URLhttp://dx.doi.org/10.18653/v1/S17-2001.\nRonan Collobert and Jason Weston.  A unified architecture for natural language processing:  deep\nneural networks with multitask learning.   InProceedings of the 25th international conference\non  Machine  learning,  ICML  ’08,  pp.  160–167,  New  York,  NY,  USA,  July  2008.  Association\nfor Computing Machinery.   ISBN 978-1-60558-205-4.   doi:  10.1145/1390156.1390177.   URL\nhttps://doi.org/10.1145/1390156.1390177.\nMisha Denil, Babak Shakibi, Laurent Dinh, Marc’Aurelio Ranzato, and Nando de Freitas. Predicting\nparameters in deep learning, 2014.\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova.  Bert:  Pre-training of deep\nbidirectional transformers for language understanding, 2019a.\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova.  BERT: Pre-training of Deep\nBidirectional Transformers for Language Understanding.arXiv:1810.04805 [cs],  May 2019b.\nURLhttp://arxiv.org/abs/1810.04805. arXiv: 1810.04805.\nWilliam B. Dolan and Chris Brockett. Automatically constructing a corpus of sentential paraphrases.\nInProceedings of the Third International Workshop on Paraphrasing (IWP2005), 2005.   URL\nhttps://aclanthology.org/I05-5002.\nClaire Gardent, Anastasia Shimorina, Shashi Narayan, and Laura Perez-Beltrachini.   The webnlg\nchallenge: Generating text from rdf data. InProceedings of the 10th International Conference on\nNatural Language Generation, pp. 124–133, 2017.\n13",
    "Behrooz  Ghorbani,  Song  Mei,  Theodor  Misiakiewicz,  and  Andrea  Montanari.   When  do  neural\nnetworks outperform kernel methods?arXiv preprint arXiv:2006.13409, 2020.\nBogdan Gliwa, Iwona Mochol, Maciej Biesek, and Aleksander Wawer. Samsum corpus: A human-\nannotated dialogue dataset for abstractive summarization.CoRR, abs/1911.12237, 2019.  URL\nhttp://arxiv.org/abs/1911.12237.\nLars  Grasedyck,  Daniel  Kressner,  and  Christine  Tobler.   A  literature  survey  of  low-rank  tensor\napproximation techniques.GAMM-Mitteilungen, 36(1):53–78, 2013.\nJihun Ham and Daniel D. Lee. Grassmann discriminant analysis: a unifying view on subspace-based\nlearning.   InICML, pp. 376–383,  2008.   URLhttps://doi.org/10.1145/1390156.\n1390204.\nKaren Hambardzumyan,  Hrant Khachatrian,  and Jonathan May.   WARP: Word-level Adversarial\nReProgramming.arXiv:2101.00121 [cs], December 2020. URLhttp://arxiv.org/abs/\n2101.00121. arXiv: 2101.00121.\nPengcheng He, Xiaodong Liu, Jianfeng Gao, and Weizhu Chen.  Deberta: Decoding-enhanced bert\nwith disentangled attention, 2021.\nNeil  Houlsby,  Andrei  Giurgiu,  Stanislaw  Jastrzebski,  Bruna  Morrone,  Quentin  de  Laroussilhe,\nAndrea Gesmundo, Mona Attariyan, and Sylvain Gelly.  Parameter-Efficient Transfer Learning\nfor NLP.arXiv:1902.00751 [cs, stat], June 2019.  URLhttp://arxiv.org/abs/1902.\n00751.\nMax Jaderberg, Andrea Vedaldi, and Andrew Zisserman. Speeding up convolutional neural networks\nwith low rank expansions.arXiv preprint arXiv:1405.3866, 2014.\nMikhail Khodak, Neil Tenenholtz, Lester Mackey, and Nicol\n`\no Fusi. Initialization and regularization\nof factorized neural layers, 2021.\nDiederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization, 2017.\nDmitry  Lepikhin,  HyoukJoong  Lee,  Yuanzhong  Xu,  Dehao  Chen,  Orhan  Firat,  Yanping  Huang,\nMaxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional\ncomputation and automatic sharding, 2020.\nBrian Lester, Rami Al-Rfou, and Noah Constant. The Power of Scale for Parameter-Efficient Prompt\nTuning.arXiv:2104.08691 [cs], April 2021. URLhttp://arxiv.org/abs/2104.08691.\narXiv: 2104.08691.\nChunyuan  Li,  Heerad  Farkhoor,  Rosanne  Liu,  and  Jason  Yosinski.   Measuring  the  Intrinsic  Di-\nmension  of  Objective  Landscapes.arXiv:1804.08838  [cs,  stat],  April  2018a.   URLhttp:\n//arxiv.org/abs/1804.08838. arXiv: 1804.08838.\nXiang Lisa Li and Percy Liang.   Prefix-Tuning:  Optimizing Continuous Prompts for Generation.\narXiv:2101.00190 [cs], January 2021. URLhttp://arxiv.org/abs/2101.00190.\nYuanzhi Li and Yingyu Liang.  Learning overparameterized neural networks via stochastic gradient\ndescent on structured data. InAdvances in Neural Information Processing Systems, 2018.\nYuanzhi  Li,  Yingyu  Liang,  and  Andrej  Risteski.   Recovery  guarantee  of  weighted  low-rank  ap-\nproximation via alternating minimization. InInternational Conference on Machine Learning, pp.\n2358–2367. PMLR, 2016.\nYuanzhi Li, Tengyu Ma, and Hongyang Zhang.  Algorithmic regularization in over-parameterized\nmatrix sensing and neural networks with quadratic activations.  InConference On Learning The-\nory, pp. 2–47. PMLR, 2018b.\nZhaojiang Lin, Andrea Madotto, and Pascale Fung.  Exploring versatile generative language model\nvia parameter-efficient transfer learning.  InFindings of the Association for Computational Lin-\nguistics:  EMNLP 2020, pp. 441–459, Online, November 2020. Association for Computational\nLinguistics.   doi:  10.18653/v1/2020.findings-emnlp.41.   URLhttps://aclanthology.\norg/2020.findings-emnlp.41.\n14",
    "Xiao Liu, Yanan Zheng, Zhengxiao Du, Ming Ding, Yujie Qian, Zhilin Yang, and Jie Tang.  GPT\nUnderstands, Too.arXiv:2103.10385 [cs], March 2021.   URLhttp://arxiv.org/abs/\n2103.10385. arXiv: 2103.10385.\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike\nLewis, Luke Zettlemoyer, and Veselin Stoyanov.  Roberta: A robustly optimized bert pretraining\napproach, 2019.\nIlya  Loshchilov  and  Frank  Hutter.Decoupled  weight  decay  regularization.arXiv  preprint\narXiv:1711.05101, 2017.\nIlya Loshchilov and Frank Hutter. Decoupled weight decay regularization, 2019.\nRabeeh Karimi Mahabadi, James Henderson, and Sebastian Ruder.  Compacter: Efficient low-rank\nhypercomplex adapter layers, 2021.\nLinyong  Nan,  Dragomir  Radev,  Rui  Zhang,  Amrit  Rau,  Abhinand  Sivaprasad,  Chiachun  Hsieh,\nXiangru Tang, Aadit Vyas, Neha Verma, Pranav Krishna, et al.  Dart:  Open-domain structured\ndata record to text generation.arXiv preprint arXiv:2007.02871, 2020.\nJekaterina Novikova, Ond\nˇ\nrej Du\nˇ\nsek, and Verena Rieser.  The e2e dataset:  New challenges for end-\nto-end generation.arXiv preprint arXiv:1706.09254, 2017.\nSamet  Oymak,  Zalan  Fabian,  Mingchen  Li,  and  Mahdi  Soltanolkotabi.   Generalization  guaran-\ntees for neural networks via harnessing the low-rank structure of the jacobian.arXiv preprint\narXiv:1906.05392, 2019.\nJonas Pfeiffer, Aishwarya Kamath, Andreas R\n ̈\nuckl\n ́\ne, Kyunghyun Cho, and Iryna Gurevych. Adapter-\nfusion: Non-destructive task composition for transfer learning, 2021.\nDaniel Povey, Gaofeng Cheng, Yiming Wang, Ke Li, Hainan Xu, Mahsa Yarmohammadi, and San-\njeev Khudanpur.   Semi-orthogonal low-rank matrix factorization for deep neural networks.   In\nInterspeech, pp. 3743–3747, 2018.\nAlec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving Language Under-\nstanding by Generative Pre-Training. pp.  12, a.\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language\nModels are Unsupervised Multitask Learners. pp.  24, b.\nPranav Rajpurkar, Robin Jia, and Percy Liang. Know what you don’t know: Unanswerable questions\nfor squad.CoRR, abs/1806.03822, 2018. URLhttp://arxiv.org/abs/1806.03822.\nSylvestre-Alvise Rebuffi, Hakan Bilen, and Andrea Vedaldi. Learning multiple visual domains with\nresidual adapters.arXiv:1705.08045 [cs, stat], November 2017.  URLhttp://arxiv.org/\nabs/1705.08045. arXiv: 1705.08045.\nAndreas R\n ̈\nuckl\n ́\ne,  Gregor Geigle,  Max Glockner,  Tilman Beck,  Jonas Pfeiffer,  Nils Reimers,  and\nIryna Gurevych. Adapterdrop: On the efficiency of adapters in transformers, 2020.\nTara N Sainath, Brian Kingsbury, Vikas Sindhwani, Ebru Arisoy, and Bhuvana Ramabhadran. Low-\nrank matrix factorization for deep neural network training with high-dimensional output targets.\nIn2013 IEEE international conference on acoustics,  speech and signal processing,  pp. 6655–\n6659. IEEE, 2013.\nMohammad  Shoeybi,  Mostofa  Patwary,  Raul  Puri,  Patrick  LeGresley,  Jared  Casper,  and  Bryan\nCatanzaro.   Megatron-lm:  Training multi-billion parameter language models using model par-\nallelism, 2020.\nRichard Socher,  Alex Perelygin,  Jean Wu,  Jason Chuang,  Christopher D. Manning,  Andrew Ng,\nand Christopher Potts.   Recursive deep models for semantic compositionality over a sentiment\ntreebank.   InProceedings of the 2013 Conference on Empirical Methods in Natural Language\nProcessing, pp. 1631–1642, Seattle, Washington, USA, October 2013. Association for Computa-\ntional Linguistics. URLhttps://aclanthology.org/D13-1170.\n15",
    "Ashish  Vaswani,  Noam  Shazeer,  Niki  Parmar,  Jakob  Uszkoreit,  Llion  Jones,  Aidan  N  Gomez,\nŁukasz Kaiser, and Illia Polosukhin.  Attention is all you need.  InProceedings of the 31st In-\nternational Conference on Neural Information Processing Systems, pp. 6000–6010, 2017.\nAlex Wang,  Amanpreet Singh,  Julian Michael,  Felix Hill,  Omer Levy,  and Samuel R. Bowman.\nGlue: A multi-task benchmark and analysis platform for natural language understanding, 2019.\nAlex Wang, Yada Pruksachatkun, Nikita Nangia, Amanpreet Singh, Julian Michael, Felix Hill, Omer\nLevy, and Samuel R. Bowman.  Superglue:  A stickier benchmark for general-purpose language\nunderstanding systems, 2020.\nAlex Warstadt, Amanpreet Singh, and Samuel R Bowman. Neural network acceptability judgments.\narXiv preprint arXiv:1805.12471, 2018.\nAdina Williams, Nikita Nangia, and Samuel Bowman.  A broad-coverage challenge corpus for sen-\ntence  understanding  through  inference.   InProceedings  of  the  2018  Conference  of  the  North\nAmerican Chapter of the Association for Computational Linguistics: Human Language Technolo-\ngies, Volume 1 (Long Papers), pp. 1112–1122, New Orleans, Louisiana, June 2018. Association\nfor Computational Linguistics.  doi:  10.18653/v1/N18-1101.  URLhttps://www.aclweb.\norg/anthology/N18-1101.\nThomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi,\nPierric Cistac,  Tim Rault,  R\n ́\nemi Louf,  Morgan Funtowicz,  Joe Davison,  Sam Shleifer,  Patrick\nvon  Platen,  Clara  Ma,  Yacine  Jernite,  Julien  Plu,  Canwen  Xu,  Teven  Le  Scao,  Sylvain  Gug-\nger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush.  Transformers:  State-of-the-art\nnatural language processing.  InProceedings of the 2020 Conference on Empirical Methods in\nNatural Language Processing:  System Demonstrations, pp. 38–45, Online, October 2020. As-\nsociation for Computational Linguistics.  URLhttps://www.aclweb.org/anthology/\n2020.emnlp-demos.6.\nGreg   Yang   and   Edward   J.   Hu.Feature   Learning   in   Infinite-Width   Neural   Networks.\narXiv:2011.14522 [cond-mat], May 2021.  URLhttp://arxiv.org/abs/2011.14522.\narXiv: 2011.14522.\nElad Ben Zaken, Shauli Ravfogel, and Yoav Goldberg. Bitfit: Simple parameter-efficient fine-tuning\nfor transformer-based masked language-models, 2021.\nYu Zhang, Ekapol Chuangsuwanich, and James Glass.  Extracting deep neural network bottleneck\nfeatures using low-rank matrix factorization. In2014 IEEE international conference on acoustics,\nspeech and signal processing (ICASSP), pp. 185–189. IEEE, 2014.\nYong Zhao, Jinyu Li, and Yifan Gong. Low-rank plus diagonal adaptation for deep neural networks.\nIn2016 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),\npp. 5005–5009. IEEE, 2016.\nVictor Zhong, Caiming Xiong, and Richard Socher.  Seq2sql:  Generating structured queries from\nnatural language using reinforcement learning.CoRR, abs/1709.00103, 2017.  URLhttp://\narxiv.org/abs/1709.00103.\nALARGELANGUAGEMODELSSTILLNEEDPARAMETERUPDATES\nFew-shot learning, or prompt engineering, is very advantageous when we only have a handful of\ntraining samples. However, in practice, we can often afford to curate a few thousand or more training\nexamples for performance-sensitive applications.  As shown in Table 8,  fine-tuning improves the\nmodel performance drastically compared to few-shot learning on datasets large and small. We take\nthe GPT-3 few-shot result on RTE from the GPT-3 paper (Brown et al., 2020). For MNLI-matched,\nwe use two demonstrations per class and six in-context examples in total.\n16",
    "MethodMNLI-m (Val. Acc./%)RTE (Val. Acc./%)\nGPT-3 Few-Shot40.669.0\nGPT-3 Fine-Tuned\n89.585.4\nTable 8: Fine-tuning significantly outperforms few-shot learning on GPT-3 (Brown et al., 2020).\nBINFERENCELATENCYINTRODUCED  BYADAPTERLAYERS\nAdapter layers are external modules added to a pre-trained model in asequentialmanner, whereas\nour proposal, LoRA, can be seen as external modules added in a parallel manner.  Consequently,\nadapter layers must be computed in addition to the base model, inevitably introducing additional\nlatency.  While as pointed out in R\n ̈\nuckl\n ́\ne et al. (2020), the latency introduced by adapter layers can\nbe mitigated when the model batch size and/or sequence length is large enough to full utilize the\nhardware parallelism. We confirm their observation with a similar latency study on GPT-2 medium\nand point out that there are scenarios, notably online inference where the batch size is small, where\nthe added latency can be significant.\nWe measure the latency of a single forward pass on an NVIDIA Quadro RTX8000 by averaging\nover 100 trials. We vary the input batch size, sequence length, and the adapter bottleneck dimension\nr. We test two adapter designs: the original one by Houlsby et al. (2019), which we call Adapter\nH\n,\nand a recent, more efficient variant by Lin et al. (2020), which we call Adapter\nL\n.  See Section 5.1\nfor more details on the designs.  We plot the slow-down in percentage compared to the no-adapter\nbaseline in Figure 5.\n0\n5\n10\n15\n20\n25\n30\n35\n0\n10\n100\n250\nAdapter\nH\n r\nSeq Len = 128Seq Len = 256Seq Len = 512\n12481632\nBatch Size\n0\n10\n100\n250\nAdapter\nL\n r\n12481632\nBatch Size\n12481632\nBatch Size\nFigure 5: Percentage slow-down of inference latency compared to the no-adapter (r= 0) baseline.\nThe top row shows the result for Adapter\nH\nand the bottom row Adapter\nL\n.  Larger batch size and\nsequence length help to mitigate the latency, but the slow-down can be as high as over 30% in an\nonline, short-sequence-length scenario. We tweak the colormap for better visibility.\nCDATASETDETAILS\nGLUE Benchmarkis a wide-ranging collection of natural language understanding tasks. It includes\nMNLI (inference, Williams et al. (2018)), SST-2 (sentiment analysis, Socher et al. (2013)), MRPC\n(paraphrase  detection,  Dolan  &  Brockett  (2005)),  CoLA  (linguistic  acceptability,  Warstadt  et  al.\n(2018)), QNLI (inference, Rajpurkar et al. (2018)), QQP\n8\n(question-answering), RTE (inference),\n8\nhttps://quoradata.quora.com/First-Quora-Dataset-Release-Question-Pairs\n17",
    "and STS-B (textual similarity, Cer et al. (2017)).  The broad coverage makes GLUE benchmark a\nstandard metric to evaluate NLU models such as RoBERTa and DeBERTa.  The individual datasets\nare released under different permissive licenses.\nWikiSQLis introduced in  Zhong et al. (2017) and contains56,355/8,421training/validation ex-\namples.  The task is to generate SQL queries from natural language questions and table schemata.\nWe encode context asx={table schema,query}and target asy={SQL}.  The dataset is release\nunder the BSD 3-Clause License.\nSAMSumis introduced in  Gliwa et al. (2019) and contains14,732/819training/test examples.  It\nconsists of staged chat conversations between two people and corresponding abstractive summaries\nwritten by linguists.   We encode context as ”\\n” concatenated utterances followed by a ”\\n\\n”,\nand target asy={summary}.  The dataset is released under the non-commercial licence: Creative\nCommons BY-NC-ND 4.0.\nE2E NLG Challengewas first introduced in  Novikova et al. (2017) as a dataset for training end-to-\nend, data-driven natural language generation systems and is commonly used for data-to-text evalua-\ntion.  The E2E dataset consists of roughly42,000training,4,600validation, and4,600test exam-\nples from the restaurant domain. Each source table used as input can have multiple references. Each\nsample input(x,y)consists of a sequence of slot-value pairs, along with a corresponding natural\nlanguage reference text. The dataset is released under Creative Commons BY-NC-SA 4.0.\nDARTis  an  open-domain data-to-text  dataset  described  in  Nan et  al.  (2020).   DART  inputs  are\nstructured as sequences of ENTITY — RELATION — ENTITY triples.  With82Kexamples in\ntotal,  DART  is  a  significantly  larger  and  more  complex  data-to-text  task  compared  to  E2E.  The\ndataset is released under the MIT license.\nWebNLGis another commonly used dataset for data-to-text evaluation (Gardent et al., 2017). With\n22Kexamples in total WebNLG comprises 14 distinct categories, nine of which are seen during\ntraining.  Since five of the 14 total categories are not seen during training, but are represented in\nthe test set,  evaluation is typically broken out by “seen” categories (S), “unseen” categories (U)\nand “all” (A). Each input example is represented by a sequence of SUBJECT — PROPERTY —\nOBJECT triples. The dataset is released under Creative Commons BY-NC-SA 4.0.\nDHYPERPARAMETERSUSED INEXPERIMENTS\nD.1ROBERTA\nWe train using AdamW with a linear learning rate decay schedule. We sweep learning rate, number\nof training epochs, and batch size for LoRA. Following Liu et al. (2019), we initialize the LoRA\nmodules to our best MNLI checkpoint when adapting to MRPC, RTE, and STS-B, instead of the\nusual initialization; the pre-trained model stays frozen for all tasks.  We report the median over 5\nrandom seeds; the result for each run is taken from the best epoch.  For a fair comparison with the\nsetup in Houlsby et al. (2019) and Pfeiffer et al. (2021), we restrict the model sequence length to 128\nand used a fixed batch size for all tasks.  Importantly, we start with the pre-trained RoBERTa large\nmodel when adapting to MRPC, RTE, and STS-B, instead of a model already adapted to MNLI.\nThe runs with this restricted setup are marked with†.  See the hyperparameters used in our runs\nin Table 9.\nD.2DEBERTA\nWe again train using AdamW with a linear learning rate decay schedule. Following He et al. (2021),\nwe tune learning rate, dropout probability, warm-up steps, and batch size.  We use the same model\nsequence length used by (He et al., 2021) to keep our comparison fair.  Following He et al. (2021),\nwe initialize the LoRA modules to our best MNLI checkpoint when adapting to MRPC, RTE, and\nSTS-B, instead of the usual initialization; the pre-trained model stays frozen for all tasks. We report\nthe  median  over  5  random  seeds;  the  result  for  each  run  is  taken  from  the  best  epoch.   See  the\nhyperparameters used in our runs in Table 10.\n18",
    "MethodDatasetMNLISST-2MRPCCoLAQNLIQQPRTESTS-B\nOptimizerAdamW\nWarmup Ratio0.06\nLR ScheduleLinear\nRoBERTa base\nLoRA\nBatch Size\n1616163232163216\n# Epochs3060308025258040\nLearning Rate\n5E-045E-044E-044E-044E-045E-045E-044E-04\nLoRA Config.r\nq\n=r\nv\n=8\nLoRAα8\nMax Seq. Len.512\nRoBERTa large\nLoRA\nBatch Size44444488\n# Epochs1010202010202030\nLearning Rate3E-044E-043E-042E-042E-043E-044E-042E-04\nLoRA Config.\nr\nq\n=r\nv\n=8\nLoRAα16\nMax Seq. Len.128128512128512512512512\nRoBERTa large\nLoRA†\nBatch Size4\n# Epochs1010202010202010\nLearning Rate\n3E-044E-043E-042E-042E-043E-044E-042E-04\nLoRA Config.\nr\nq\n=r\nv\n=8\nLoRAα\n16\nMax Seq. Len.128\nRoBERTa large\nAdpt\nP\n(3M)†\nBatch Size32\n# Epochs1020202010202020\nLearning Rate\n3E-053E-053E-043E-043E-043E-043E-043E-04\nBottleneckr64\nMax Seq. Len.128\nRoBERTa large\nAdpt\nP\n(0.8M)†\nBatch Size32\n# Epochs\n520202010202020\nLearning Rate\n3E-043E-043E-043E-043E-043E-043E-043E-04\nBottleneckr16\nMax Seq. Len.128\nRoBERTa large\nAdpt\nH\n(6M)†\nBatch Size32\n# Epochs10510105202010\nLearning Rate3E-053E-043E-043E-043E-043E-043E-043E-04\nBottleneckr64\nMax Seq. Len.128\nRoBERTa large\nAdpt\nH\n(0.8M)†\nBatch Size\n32\n# Epochs10510105202010\nLearning Rate3E-043E-043E-043E-043E-043E-043E-043E-04\nBottleneckr8\nMax Seq. Len.128\nTable 9: The hyperparameters we used for RoBERTa on the GLUE benchmark.\nD.3GPT-2\nWe train all of our GPT-2 models using AdamW (Loshchilov & Hutter, 2017) with a linear learning\nrate schedule for 5 epochs. We use the batch size, learning rate, and beam search beam size described\nin Li & Liang (2021). Accordingly, we also tune the above hyperparameters for LoRA. We report the\nmean over 3 random seeds; the result for each run is taken from the best epoch. The hyperparameters\nused for LoRA in GPT-2 are listed in Table 11.  For those used for other baselines, see Li & Liang\n(2021).\nD.4GPT-3\nFor all GPT-3 experiments, we train using AdamW (Loshchilov & Hutter, 2017) for 2 epochs with\na batch size of 128 samples and a weight decay factor of 0.1.  We use a sequence length of 384 for\n19",
    "MethodDatasetMNLISST-2MRPCCoLAQNLIQQPRTESTS-B\nOptimizerAdamW\nWarmup Ratio0.1\nLR ScheduleLinear\nDeBERTa XXL\nLoRA\nBatch Size\n883246844\n# Epochs51630108111110\nLearning Rate\n1E-046E-052E-041E-041E-041E-042E-042E-04\nWeight Decay00.010.0100.010.010.010.1\nCLS Dropout0.15000.10.10.20.20.2\nLoRA Config.r\nq\n=r\nv\n=8\nLoRAα\n8\nMax Seq. Len.25612812864512320320128\nTable 10: The hyperparameters for DeBERTa XXL on tasks included in the GLUE benchmark.\nDatasetE2EWebNLGDART\nTraining\nOptimizerAdamW\nWeight Decay0.010.010.0\nDropout Prob0.10.10.0\nBatch Size8\n# Epoch5\nWarmup Steps500\nLearning Rate ScheduleLinear\nLabel Smooth0.10.10.0\nLearning Rate0.0002\nAdaptationr\nq\n=r\nv\n= 4\nLoRAα\n32\nInference\nBeam Size10\nLength Penalty0.90.80.8\nno repeat ngram size4\nTable 11: The hyperparameters for GPT-2 LoRA on E2E, WebNLG and DART.\nWikiSQL (Zhong et al., 2017), 768 for MNLI (Williams et al., 2018), and 2048 for SAMSum (Gliwa\net al., 2019).  We tune learning rate for all method-dataset combinations.  See Section D.4 for more\ndetails on the hyperparameters used.  For prefix-embedding tuning, we find the optimall\np\nandl\ni\nto be 256 and 8, respectively, totalling3.2Mtrainable parameters.  We usel\np\n= 8andl\ni\n= 8for\nprefix-layer tuning with20.2Mtrainable parameters to obtain the overall best performance.   We\npresent two parameter budgets for LoRA: 4.7M (r\nq\n=r\nv\n= 1orr\nv\n= 2) and 37.7M (r\nq\n=r\nv\n= 8\norr\nq\n=r\nk\n=r\nv\n=r\no\n= 2). We report the best validation performance from each run. The training\nhyperparameters used in our GPT-3 experiments are listed in Table 12.\nECOMBININGLORAWITHPREFIXTUNING\nLoRA can be naturally combined with existing prefix-based approaches. In this section, we evaluate\ntwo combinations of LoRA and variants of prefix-tuning on WikiSQL and MNLI.\nLoRA+PrefixEmbed (LoRA+PE)combines LoRA with prefix-embedding tuning, where we insert\nl\np\n+l\ni\nspecial tokens whose embeddings are treated as trainable parameters.  For more on prefix-\nembedding tuning, see Section 5.1.\nLoRA+PrefixLayer (LoRA+PL)combines LoRA with prefix-layer tuning.  We also insertl\np\n+l\ni\nspecial tokens; however, instead of letting the hidden representations of these tokens evolve natu-\n20",
    "HyperparametersFine-TunePreEmbedPreLayerBitFitAdapter\nH\nLoRA\nOptimizerAdamW\nBatch Size128\n# Epoch\n2\nWarmup Tokens250,000\nLR ScheduleLinear\nLearning Rate5.00E-065.00E-041.00E-041.6E-031.00E-042.00E-04\nTable 12:  The training hyperparameters used for different GPT-3 adaption methods.  We use the\nsame hyperparameters for all datasets after tuning learning rate.\nrally, we replace them after every Transformer block with an input agnostic vector.  Thus, both the\nembeddings and subsequent Transformer block activations are treated as trainable parameters.  For\nmore on prefix-layer tuning, see Section 5.1.\nIn Table 15, we show the evaluation results of LoRA+PE and LoRA+PL on WikiSQL and MultiNLI.\nFirst  of  all,  LoRA+PE  significantly  outperforms  both  LoRA  and  prefix-embedding  tuning  on\nWikiSQL,  which  indicates  that  LoRA  is  somewhat  orthogonal  to  prefix-embedding  tuning.   On\nMultiNLI, the combination of LoRA+PE doesn’t perform better than LoRA, possibly because LoRA\non its own already achieves performance comparable to the human baseline.  Secondly, we notice\nthat LoRA+PL performs slightly worse than LoRA even with more trainable parameters.  We at-\ntribute this to the fact that prefix-layer tuning is very sensitive to the choice of learning rate and thus\nmakes the optimization of LoRA weights more difficult in LoRA+PL.\nFADDITIONALEMPIRICALEXPERIMENTS\nF.1ADDITIONALEXPERIMENTS ONGPT-2\nWe also repeat our experiment on DART (Nan et al., 2020) and WebNLG (Gardent et al., 2017)\nfollowing the setup of Li & Liang (2021).  The result is shown in Table 13.  Similar to our result\non E2E NLG Challenge, reported in Section 5, LoRA performs better than or at least on-par with\nprefix-based approaches given the same number of trainable parameters.\nMethod# TrainableDART\nParametersBLEU↑MET↑TER↓\nGPT-2 Medium\nFine-Tune354M46.20.390.46\nAdapter\nL\n0.37M42.40.360.48\nAdapter\nL\n11M45.20.380.46\nFT\nTop2\n24M\n41.00.340.56\nPrefLayer0.35M46.40.380.46\nLoRA0.35M47.1\n±.2\n0.390.46\nGPT-2 Large\nFine-Tune774M47.00.390.46\nAdapter\nL\n0.88M45.7\n±.1\n0.380.46\nAdapter\nL\n23M\n47.1\n±.1\n0.390.45\nPrefLayer0.77M46.70.380.45\nLoRA0.77M\n47.5\n±.1\n0.390.45\nTable 13: GPT-2 with different adaptation methods on DART. The variances of MET and TER are\nless than0.01for all adaption approaches.\n21",
    "MethodWebNLG\nBLEU↑MET↑TER↓\nUSAUSAUSA\nGPT-2 Medium\nFine-Tune (354M)\n27.764.246.5.30.45.38.76.33.53\nAdapter\nL\n(0.37M)\n45.154.550.2.36.39.38.46.40.43\nAdapter\nL\n(11M)48.360.454.9.38.43.41.45.35.39\nFT\nTop2\n(24M)18.953.636.0.23.38.31.99.49.72\nPrefix (0.35M)\n45.662.955.1.38.44.41.49.35.40\nLoRA (0.35M)46.7\n±.4\n62.1\n±.2\n55.3\n±.2\n.38.44.41.46.33.39\nGPT-2 Large\nFine-Tune (774M)43.165.355.5.38.46.42.53.33.42\nAdapter\nL\n(0.88M)49.8\n±.0\n61.1\n±.0\n56.0\n±.0\n.38.43.41.44.35.39\nAdapter\nL\n(23M)49.2\n±.1\n64.7\n±.2\n57.7\n±.1\n.39.46.43.46.33.39\nPrefix (0.77M)47.763.456.3.39.45.42.48.34.40\nLoRA (0.77M)\n48.4\n±.3\n64.0\n±.3\n57.0\n±.1\n.39.45.42.45.32.38\nTable 14:  GPT-2 with different adaptation methods on WebNLG. The variances of MET and TER\nare less than0.01for all the experiments we ran. “U” indicates unseen categories, “S” indicates seen\ncategories, and “A” indicates all categories in the test set of WebNLG.\nF.2ADDITIONALEXPERIMENTS ONGPT-3\nWe present additional runs on GPT-3 with different adaptation methods in Table 15. The focus is on\nidentifying the trade-off between performance and the number of trainable parameters.\nF.3LOW-DATAREGIME\nTo evaluate the performance of different adaptation approaches in the low-data regime. we randomly\nsample 100, 1k and 10k training examples from the full training set of MNLI to form the low-data\nMNLI-ntasks. In Table 16, we show the performance of different adaptation approaches on MNLI-\nn. To our surprise, PrefixEmbed and PrefixLayer performs very poorly on MNLI-100 dataset, with\nPrefixEmbed performing only slightly better than random chance (37.6% vs.  33.3%).  PrefixLayer\nperforms better than PrefixEmbed but is still significantly worse than Fine-Tune or LoRA on MNLI-\n100.  The gap between prefix-based approaches and LoRA/Fine-tuning becomes smaller as we in-\ncrease the number of training examples, which might suggest that prefix-based approaches are not\nsuitable for low-data tasks in GPT-3.  LoRA achieves better performance than fine-tuning on both\nMNLI-100 and MNLI-Full, and comparable results on MNLI-1k and MNLI-10K considering the\n(±0.3) variance due to random seeds.\nThe training hyperparameters of different adaptation approaches on MNLI-n are reported in Ta-\nble 17. We use a smaller learning rate for PrefixLayer on the MNLI-100 set, as the training loss does\nnot decrease with a larger learning rate.\nGMEASURINGSIMILARITYBETWEENSUBSPACES\nIn this paper we use the measureφ(A,B,i,j) =ψ(U\ni\nA\n,U\nj\nB\n) =\n‖U\ni>\nA\nU\nB\n‖\n2\nF\nmin{i,j}\nto measure the subspace\nsimilarity between two column orthonormal matricesU\ni\nA\n∈R\nd×i\nandU\nj\nB\n∈R\nd×j\n, obtained by\ntaking columns of the left singular matrices ofAandB. We point out that this similarity is simply\na reverse of the standard Projection Metric that measures distance between subspaces Ham & Lee\n(2008).\n22",
    "MethodHyperparameters# Trainable ParametersWikiSQLMNLI-m\nFine-Tune-175B73.889.5\nPrefixEmbed\nl\np\n= 32,l\ni\n= 80.4 M55.984.9\nl\np\n= 64,l\ni\n= 80.9 M58.788.1\nl\np\n= 128,l\ni\n= 81.7 M60.688.0\nl\np\n= 256,l\ni\n= 83.2 M63.188.6\nl\np\n= 512,l\ni\n= 86.4 M55.985.8\nPrefixLayer\nl\np\n= 2,l\ni\n= 25.1 M68.589.2\nl\np\n= 8,l\ni\n= 010.1 M69.888.2\nl\np\n= 8,l\ni\n= 820.2 M70.189.5\nl\np\n= 32,l\ni\n= 444.1 M66.489.6\nl\np\n= 64,l\ni\n= 076.1 M64.987.9\nAdapter\nH\nr= 17.1 M71.989.8\nr= 421.2 M73.291.0\nr= 840.1 M73.291.5\nr= 1677.9 M73.291.5\nr= 64304.4 M72.691.5\nLoRA\nr\nv\n= 24.7 M73.491.7\nr\nq\n=r\nv\n= 14.7 M73.491.3\nr\nq\n=r\nv\n= 29.4 M73.391.4\nr\nq\n=r\nk\n=r\nv\n=r\no\n= 19.4 M74.191.2\nr\nq\n=r\nv\n= 418.8 M73.791.3\nr\nq\n=r\nk\n=r\nv\n=r\no\n= 218.8 M73.791.7\nr\nq\n=r\nv\n= 837.7 M73.891.6\nr\nq\n=r\nk\n=r\nv\n=r\no\n= 437.7 M74.091.7\nr\nq\n=r\nv\n= 64301.9 M73.691.4\nr\nq\n=r\nk\n=r\nv\n=r\no\n= 64603.8 M73.991.4\nLoRA+PE\nr\nq\n=r\nv\n= 8,l\np\n= 8,l\ni\n= 437.8 M75.091.4\nr\nq\n=r\nv\n= 32,l\np\n= 8,l\ni\n= 4151.1 M75.991.1\nr\nq\n=r\nv\n= 64,l\np\n= 8,l\ni\n= 4302.1 M76.291.3\nLoRA+PLr\nq\n=r\nv\n= 8,l\np\n= 8,l\ni\n= 452.8 M72.990.2\nTable 15: Hyperparameter analysis of different adaptation approaches on WikiSQL and MNLI. Both\nprefix-embedding tuning (PrefixEmbed) and prefix-layer tuning (PrefixLayer) perform worse as we\nincrease the number of trainable parameters, while LoRA’s performance stabilizes.  Performance is\nmeasured in validation accuracy.\nMethodMNLI(m)-100MNLI(m)-1kMNLI(m)-10kMNLI(m)-392K\nGPT-3 (Fine-Tune)60.285.888.989.5\nGPT-3 (PrefixEmbed)37.675.279.588.6\nGPT-3 (PrefixLayer)48.382.585.989.6\nGPT-3 (LoRA)\n63.885.689.291.7\nTable 16: Validation accuracy of different methods on subsets of MNLI using GPT-3 175B. MNLI-\nndescribes a subset withntraining examples.   We evaluate with the full validation set.   LoRA\nperforms exhibits favorable sample-efficiency compared to other methods, including fine-tuning.\nTo be concrete, let the singular values ofU\ni>\nA\nU\nj\nB\nto beσ\n1\n,σ\n2\n,···,σ\np\nwherep= min{i,j}.  We\nknow that the Projection Metric Ham & Lee (2008) is defined as:\nd(U\ni\nA\n,U\nj\nB\n) =\n√\n√\n√\n√\np−\np\n∑\ni=1\nσ\n2\ni\n∈[0,\n√\np]\n23",
    "HyperparametersAdaptationMNLI-100MNLI-1kMNLI-10KMNLI-392K\nOptimizer-AdamW\nWarmup Tokens\n-250,000\nLR Schedule-Linear\nBatch Size\n-2020100128\n# Epoch-404042\nLearning Rate\nFineTune5.00E-6\nPrefixEmbed2.00E-042.00E-044.00E-045.00E-04\nPrefixLayer5.00E-055.00E-055.00E-051.00E-04\nLoRA2.00E-4\nPrefixEmbedl\np\n163264256\nAdaptation-\nPrefixEmbedl\ni\n8\nSpecificPrefixTunel\np\n=l\ni\n= 8\nLoRAr\nq\n=r\nv\n= 8\nTable 17: The hyperparameters used for different GPT-3 adaptation methods on MNLI(m)-n.\nwhere our similarity is defined as:\nφ(A,B,i,j) =ψ(U\ni\nA\n,U\nj\nB\n) =\n∑\np\ni=1\nσ\n2\ni\np\n=\n1\np\n(\n1−d(U\ni\nA\n,U\nj\nB\n)\n2\n)\nThis similarity satisfies that ifU\ni\nA\nandU\nj\nB\nshare the same column span, thenφ(A,B,i,j) = 1.  If\nthey are completely orthogonal, thenφ(A,B,i,j) = 0. Otherwise,φ(A,B,i,j)∈(0,1).\nHADDITIONALEXPERIMENTS ONLOW-RANKMATRICES\nWe present additional results from our investigation into the low-rank update matrices.\nH.1CORRELATION BETWEENLORA MODULES\nSee Figure 6 and Figure 7 for how the results presented in Figure 3 and Figure 4 generalize to other\nlayers.\nH.2EFFECT OFrONGPT-2\nWe repeat our experiment on the effect ofr(Section 7.2) in GPT-2. Using the E2E NLG Challenge\ndataset as an example, we report the validation loss and test metrics achieved by different choices\nofrafter training for 26,000 steps.  We present our result in Table 18.  The optimal rank for GPT-2\nMedium is between 4 and 16 depending on the metric used, which is similar to that for GPT-3 175B.\nNote that the relationship between model size and the optimal rank for adaptation is still an open\nquestion.\nH.3CORRELATION BETWEENWAND∆W\nSee Figure 8 for the normalized subspace similarity betweenWand∆Wwith varyingr.\nNote again that∆Wdoes not contain the top singular directions ofW, since the similarity between\nthe top 4 directions in∆Wand the top-10% of those inWbarely exceeds 0.2. This gives evidence\nthat∆Wcontains those “task-specific” directions that are otherwisenotemphasized inW.\nAn interesting next question to answer, is how “strong” do we need to amplify those task-specific\ndirections, in order for the model adaptation to work well?\n24",
    "0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n1\n2\n3\n4\n5\n6\n7\n8\nLayer 1\ni\nW\nq\nW\nv\nW\nq\nW\nv\n1\n2\n3\n4\n5\n6\n7\n8\nLayer 32\ni\n1\n2\n3\n4\n5\n6\n7\n8\nLayer 64\ni\n16\n121823293540465258\nj\n1\n2\n3\n4\n5\n6\n7\n8\nLayer 96\ni\n16\n121823293540465258\nj\n12345678\nj\n12345678\nj\n(A\nr = 8\n, A\nr = 64\n, i, j)\nFigure 6: Normalized subspace similarity between the column vectors ofA\nr=8\nandA\nr=64\nfor both\n∆W\nq\nand∆W\nv\nfrom the 1st, 32nd, 64th, and 96th layers in a 96-layer Transformer.\nH.4AMPLIFICATIONFACTOR\nOne can naturally consider afeature amplification factoras theratio\n‖∆W‖\nF\n‖U\n>\nWV\n>\n‖\nF\n, whereUandV\nare the left- and right-singular matrices of the SVD decomposition of∆W.  (RecallUU\n>\nWV\n>\nV\ngives the “projection” ofWonto the subspace spanned by∆W.)\nIntuitively, when∆Wmostly contains task-specific directions, this quantity measures how much of\nthem are amplified by∆W. As shown in Section 7.3, forr= 4, this amplification factor is as large\nas 20. In other words, there are (generally speaking) four feature directions in each layer (out of the\nentire feature space from the pre-trained modelW), that need to be amplified by a very large factor\n20, in order to achieve our reported accuracy for the downstream specific task.  And, one should\nexpect a very different set of feature directions to be amplified for each different downstream task.\nOne  may  notice,  however,  forr=  64,  this  amplification  factor  is  only  around  2,  meaning  that\nmostdirections learned in∆Wwithr=  64arenotbeing amplified by much.  This should not\nbe surprising,  and in fact gives evidence (once again) that the intrinsic rankneededto represent\nthe “task-specific directions” (thus for model adaptation) is low. In contrast, those directions in the\nrank-4 version of∆W(corresponding tor= 4) are amplified by a much larger factor 20.\n25",
    "0.0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n1\n7\n13\n19\n25\n31\n37\n43\n49\n55\n61\nLayer 1\ni\nW\nq\nW\nv\nLayer 32\nW\nq\nW\nv\n16\n1116212631364146515661\nj\n1\n7\n13\n19\n25\n31\n37\n43\n49\n55\n61\nLayer 64\ni\n16\n1116212631364146515661\nj\n16\n1116212631364146515661\nj\nLayer 96\n16\n1116212631364146515661\nj\n(A\nr = 64\n, A\n′\nr = 64\n, i, j)\nFigure 7: Normalized subspace similarity between the column vectors ofA\nr=64\nfrom two randomly\nseeded runs, for both∆W\nq\nand∆W\nv\nfrom the 1st, 32nd, 64th, and 96th layers in a 96-layer Trans-\nformer.\nRankrvallossBLEUNISTMETEORROUGELCIDEr\n11.2368.728.72150.45650.70522.4329\n2\n1.2169.178.74130.45900.70522.4639\n41.1870.388.84390.46890.71862.5349\n81.1769.578.74570.46360.71962.5196\n161.1669.618.74830.46290.71772.4985\n321.1669.338.77360.46420.71052.5255\n641.1669.248.71740.46510.71802.5070\n1281.1668.738.67180.46280.71272.5030\n2561.1668.928.69820.46290.71282.5012\n5121.1668.788.68570.46370.71282.5025\n10241.1769.378.74950.46590.71492.5090\nTable  18:  Validation  loss  and  test  set  metrics  on  E2E  NLG  Challenge  achieved  by  LoRA  with\ndifferent rankrusing GPT-2 Medium. Unlike on GPT-3 wherer= 1suffices for many tasks, here\nthe performance peaks atr= 16for validation loss andr= 4for BLEU, suggesting the GPT-2\nMedium has a similar intrinsic rank for adaptation compared to GPT-3 175B. Note that some of our\nhyperparameters are tuned onr= 4, which matches the parameter count of another baseline, and\nthus might not be optimal for other choices ofr.\n0.100\n0.125\n0.150\n0.175\n0.200\nj\n451\n555\n658\n762\n865\n969\n1072\n1176\ni\n(W\nq\n, A\nr = 4\n, i, j)\nj\nW\nq\n(W\nq\n, A\nr = 8\n, i, j)\nj\n(W\nq\n, A\nr = 64\n, i, j)\nj\nRandom\n(W\nq\n, A\nrand\n, i, j)\nFigure 8: Normalized subspace similarity between the singular directions ofW\nq\nand those of∆W\nq\nwith varyingrand a random baseline.∆W\nq\namplifies directions that are important but not empha-\nsized inW.∆Wwith a largerrtends to pick up more directions that are already emphasized in\nW.\n26"
  ]
}